(yas-define-snippets (quote objc-mode) (quote (("parser:validationErrorOccurred:" "parser:${1:(NSXMLParser *)parser} validationErrorOccurred:${2:(NSError *)validationError}" "parser:(NSXMLParser *)parser validationErrorOccurred:(NSError *)validationError" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:parseErrorOccurred:" "parser:${1:(NSXMLParser *)parser} parseErrorOccurred:${2:(NSError *)parseError}" "parser:(NSXMLParser *)parser parseErrorOccurred:(NSError *)parseError" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:resolveExternalEntityName:systemID:" "parser:${1:(NSXMLParser *)parser} resolveExternalEntityName:${2:(NSString *)name} systemID:${3:(NSString *)systemID}" "parser:(NSXMLParser *)parser resolveExternalEntityName:(NSString *)name systemID:(NSString *)systemID" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:foundCDATA:" "parser:${1:(NSXMLParser *)parser} foundCDATA:${2:(NSData *)CDATABlock}" "parser:(NSXMLParser *)parser foundCDATA:(NSData *)CDATABlock" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:foundComment:" "parser:${1:(NSXMLParser *)parser} foundComment:${2:(NSString *)comment}" "parser:(NSXMLParser *)parser foundComment:(NSString *)comment" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:foundProcessingInstructionWithTarget:data:" "parser:${1:(NSXMLParser *)parser} foundProcessingInstructionWithTarget:${2:(NSString *)target} data:${3:(NSString *)data}" "parser:(NSXMLParser *)parser foundProcessingInstructionWithTarget:(NSString *)target data:(NSString *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:foundIgnorableWhitespace:" "parser:${1:(NSXMLParser *)parser} foundIgnorableWhitespace:${2:(NSString *)whitespaceString}" "parser:(NSXMLParser *)parser foundIgnorableWhitespace:(NSString *)whitespaceString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:foundCharacters:" "parser:${1:(NSXMLParser *)parser} foundCharacters:${2:(NSString *)string}" "parser:(NSXMLParser *)parser foundCharacters:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:didEndMappingPrefix:" "parser:${1:(NSXMLParser *)parser} didEndMappingPrefix:${2:(NSString *)prefix}" "parser:(NSXMLParser *)parser didEndMappingPrefix:(NSString *)prefix" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:didStartMappingPrefix:toURI:" "parser:${1:(NSXMLParser *)parser} didStartMappingPrefix:${2:(NSString *)prefix} toURI:${3:(NSString *)namespaceURI}" "parser:(NSXMLParser *)parser didStartMappingPrefix:(NSString *)prefix toURI:(NSString *)namespaceURI" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:didEndElement:namespaceURI:qualifiedName:" "parser:${1:(NSXMLParser *)parser} didEndElement:${2:(NSString *)elementName} namespaceURI:${3:(NSString *)namespaceURI} qualifiedName:${4:(NSString *)qName}" "parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:didStartElement:namespaceURI:qualifiedName:attributes:" "parser:${1:(NSXMLParser *)parser} didStartElement:${2:(NSString *)elementName} namespaceURI:${3:(NSString *)namespaceURI} qualifiedName:${4:(NSString *)qName} attributes:${5:(NSDictionary *)attributeDict}" "parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:foundExternalEntityDeclarationWithName:publicID:systemID:" "parser:${1:(NSXMLParser *)parser} foundExternalEntityDeclarationWithName:${2:(NSString *)name} publicID:${3:(NSString *)publicID} systemID:${4:(NSString *)systemID}" "parser:(NSXMLParser *)parser foundExternalEntityDeclarationWithName:(NSString *)name publicID:(NSString *)publicID systemID:(NSString *)systemID" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:foundInternalEntityDeclarationWithName:value:" "parser:${1:(NSXMLParser *)parser} foundInternalEntityDeclarationWithName:${2:(NSString *)name} value:${3:(NSString *)value}" "parser:(NSXMLParser *)parser foundInternalEntityDeclarationWithName:(NSString *)name value:(NSString *)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:foundElementDeclarationWithName:model:" "parser:${1:(NSXMLParser *)parser} foundElementDeclarationWithName:${2:(NSString *)elementName} model:${3:(NSString *)model}" "parser:(NSXMLParser *)parser foundElementDeclarationWithName:(NSString *)elementName model:(NSString *)model" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:" "parser:${1:(NSXMLParser *)parser} foundAttributeDeclarationWithName:${2:(NSString *)attributeName} forElement:${3:(NSString *)elementName} type:${4:(NSString *)type} defaultValue:${5:(NSString *)defaultValue}" "parser:(NSXMLParser *)parser foundAttributeDeclarationWithName:(NSString *)attributeName forElement:(NSString *)elementName type:(NSString *)type defaultValue:(NSString *)defaultValue" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:" "parser:${1:(NSXMLParser *)parser} foundUnparsedEntityDeclarationWithName:${2:(NSString *)name} publicID:${3:(NSString *)publicID} systemID:${4:(NSString *)systemID} notationName:${5:(NSString *)notationName}" "parser:(NSXMLParser *)parser foundUnparsedEntityDeclarationWithName:(NSString *)name publicID:(NSString *)publicID systemID:(NSString *)systemID notationName:(NSString *)notationName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parser:foundNotationDeclarationWithName:publicID:systemID:" "parser:${1:(NSXMLParser *)parser} foundNotationDeclarationWithName:${2:(NSString *)name} publicID:${3:(NSString *)publicID} systemID:${4:(NSString *)systemID}" "parser:(NSXMLParser *)parser foundNotationDeclarationWithName:(NSString *)name publicID:(NSString *)publicID systemID:(NSString *)systemID" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parserDidEndDocument:" "parserDidEndDocument:${1:(NSXMLParser *)parser}" "parserDidEndDocument:(NSXMLParser *)parser" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parserDidStartDocument:" "parserDidStartDocument:${1:(NSXMLParser *)parser}" "parserDidStartDocument:(NSXMLParser *)parser" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("abortParsing" "abortParsing" "abortParsing" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("parse" "parse" "parse" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithStream:" "initWithStream:${1:(NSInputStream *)stream} NS_AVAILABLE(10_7, 5_0)" "initWithStream:(NSInputStream *)stream NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithData:" "initWithData:${1:(NSData *)data}" "initWithData:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfURL:" "initWithContentsOfURL:${1:(NSURL *)url}" "initWithContentsOfURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("reverseTransformedValue:" "reverseTransformedValue:${1:(id)value}" "reverseTransformedValue:(id)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("transformedValue:" "transformedValue:${1:(id)value}" "transformedValue:(id)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("allowsReverseTransformation" "allowsReverseTransformation" "allowsReverseTransformation" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("transformedValueClass" "transformedValueClass" "transformedValueClass" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueTransformerNames" "valueTransformerNames" "valueTransformerNames" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueTransformerForName:" "valueTransformerForName:${1:(NSString *)name}" "valueTransformerForName:(NSString *)name" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setValueTransformer:forName:" "setValueTransformer:${1:(NSValueTransformer *)transformer} forName:${2:(NSString *)name}" "setValueTransformer:(NSValueTransformer *)transformer forName:(NSString *)name" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithUnsignedInteger:" "numberWithUnsignedInteger:${1:(NSUInteger)value} NS_AVAILABLE(10_5, 2_0)" "numberWithUnsignedInteger:(NSUInteger)value NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithInteger:" "numberWithInteger:${1:(NSInteger)value} NS_AVAILABLE(10_5, 2_0)" "numberWithInteger:(NSInteger)value NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithBool:" "numberWithBool:${1:(BOOL)value}" "numberWithBool:(BOOL)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithDouble:" "numberWithDouble:${1:(double)value}" "numberWithDouble:(double)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithFloat:" "numberWithFloat:${1:(float)value}" "numberWithFloat:(float)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithUnsignedLongLong:" "numberWithUnsignedLongLong:${1:(unsigned long long)value}" "numberWithUnsignedLongLong:(unsigned long long)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithLongLong:" "numberWithLongLong:${1:(long long)value}" "numberWithLongLong:(long long)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithUnsignedLong:" "numberWithUnsignedLong:${1:(unsigned long)value}" "numberWithUnsignedLong:(unsigned long)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithLong:" "numberWithLong:${1:(long)value}" "numberWithLong:(long)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithUnsignedInt:" "numberWithUnsignedInt:${1:(unsigned int)value}" "numberWithUnsignedInt:(unsigned int)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithInt:" "numberWithInt:${1:(int)value}" "numberWithInt:(int)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithUnsignedShort:" "numberWithUnsignedShort:${1:(unsigned short)value}" "numberWithUnsignedShort:(unsigned short)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithShort:" "numberWithShort:${1:(short)value}" "numberWithShort:(short)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithUnsignedChar:" "numberWithUnsignedChar:${1:(unsigned char)value}" "numberWithUnsignedChar:(unsigned char)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberWithChar:" "numberWithChar:${1:(char)value}" "numberWithChar:(char)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("descriptionWithLocale:" "descriptionWithLocale:${1:(id)locale}" "descriptionWithLocale:(id)locale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToNumber:" "isEqualToNumber:${1:(NSNumber *)number}" "isEqualToNumber:(NSNumber *)number" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("compare:" "compare:${1:(NSNumber *)otherNumber}" "compare:(NSNumber *)otherNumber" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithUnsignedInteger:" "initWithUnsignedInteger:${1:(NSUInteger)value} NS_AVAILABLE(10_5, 2_0) NS_DESIGNATED_INITIALIZER" "initWithUnsignedInteger:(NSUInteger)value NS_AVAILABLE(10_5, 2_0) NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithInteger:" "initWithInteger:${1:(NSInteger)value} NS_AVAILABLE(10_5, 2_0) NS_DESIGNATED_INITIALIZER" "initWithInteger:(NSInteger)value NS_AVAILABLE(10_5, 2_0) NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithBool:" "initWithBool:${1:(BOOL)value} NS_DESIGNATED_INITIALIZER" "initWithBool:(BOOL)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithDouble:" "initWithDouble:${1:(double)value} NS_DESIGNATED_INITIALIZER" "initWithDouble:(double)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithFloat:" "initWithFloat:${1:(float)value} NS_DESIGNATED_INITIALIZER" "initWithFloat:(float)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithUnsignedLongLong:" "initWithUnsignedLongLong:${1:(unsigned long long)value} NS_DESIGNATED_INITIALIZER" "initWithUnsignedLongLong:(unsigned long long)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithLongLong:" "initWithLongLong:${1:(long long)value} NS_DESIGNATED_INITIALIZER" "initWithLongLong:(long long)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithUnsignedLong:" "initWithUnsignedLong:${1:(unsigned long)value} NS_DESIGNATED_INITIALIZER" "initWithUnsignedLong:(unsigned long)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithLong:" "initWithLong:${1:(long)value} NS_DESIGNATED_INITIALIZER" "initWithLong:(long)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithUnsignedInt:" "initWithUnsignedInt:${1:(unsigned int)value} NS_DESIGNATED_INITIALIZER" "initWithUnsignedInt:(unsigned int)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithInt:" "initWithInt:${1:(int)value} NS_DESIGNATED_INITIALIZER" "initWithInt:(int)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithUnsignedShort:" "initWithUnsignedShort:${1:(unsigned short)value} NS_DESIGNATED_INITIALIZER" "initWithUnsignedShort:(unsigned short)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithShort:" "initWithShort:${1:(short)value} NS_DESIGNATED_INITIALIZER" "initWithShort:(short)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithUnsignedChar:" "initWithUnsignedChar:${1:(unsigned char)value} NS_DESIGNATED_INITIALIZER" "initWithUnsignedChar:(unsigned char)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithChar:" "initWithChar:${1:(char)value} NS_DESIGNATED_INITIALIZER" "initWithChar:(char)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToValue:" "isEqualToValue:${1:(NSValue *)value}" "isEqualToValue:(NSValue *)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pointerValue" "pointerValue" "pointerValue" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueWithPointer:" "valueWithPointer:${1:(const void *)pointer}" "valueWithPointer:(const void *)pointer" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueWithNonretainedObject:" "valueWithNonretainedObject:${1:(id)anObject}" "valueWithNonretainedObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("value:withObjCType:" "value:${1:(const void *)value} withObjCType:${2:(const char *)type}" "value:(const void *)value withObjCType:(const char *)type" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueWithBytes:objCType:" "valueWithBytes:${1:(const void *)value} objCType:${2:(const char *)type}" "valueWithBytes:(const void *)value objCType:(const char *)type" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithBytes:objCType:" "initWithBytes:${1:(const void *)value} objCType:${2:(const char *)type} NS_DESIGNATED_INITIALIZER" "initWithBytes:(const void *)value objCType:(const char *)type NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getValue:" "getValue:${1:(void *)value}" "getValue:(void *)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getUUIDBytes:" "getUUIDBytes:${1:(uuid_t)uuid}" "getUUIDBytes:(uuid_t)uuid" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithUUIDBytes:" "initWithUUIDBytes:${1:(const uuid_t)bytes}" "initWithUUIDBytes:(const uuid_t)bytes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithUUIDString:" "initWithUUIDString:${1:(NSString *)string}" "initWithUUIDString:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("UUID" "UUID" "UUID" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectIsForcedForKey:inDomain:" "objectIsForcedForKey:${1:(NSString *)key} inDomain:${2:(NSString *)domain}" "objectIsForcedForKey:(NSString *)key inDomain:(NSString *)domain" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectIsForcedForKey:" "objectIsForcedForKey:${1:(NSString *)key}" "objectIsForcedForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("synchronize" "synchronize" "synchronize" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removePersistentDomainForName:" "removePersistentDomainForName:${1:(NSString *)domainName}" "removePersistentDomainForName:(NSString *)domainName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setPersistentDomain:forName:" "setPersistentDomain:${1:(NSDictionary *)domain} forName:${2:(NSString *)domainName}" "setPersistentDomain:(NSDictionary *)domain forName:(NSString *)domainName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("persistentDomainForName:" "persistentDomainForName:${1:(NSString *)domainName}" "persistentDomainForName:(NSString *)domainName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("persistentDomainNames NS_DEPRECATED(10_0, 10_9, 2_0, 7_0)" "persistentDomainNames NS_DEPRECATED(10_0, 10_9, 2_0, 7_0)" "persistentDomainNames NS_DEPRECATED(10_0, 10_9, 2_0, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeVolatileDomainForName:" "removeVolatileDomainForName:${1:(NSString *)domainName}" "removeVolatileDomainForName:(NSString *)domainName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setVolatileDomain:forName:" "setVolatileDomain:${1:(NSDictionary *)domain} forName:${2:(NSString *)domainName}" "setVolatileDomain:(NSDictionary *)domain forName:(NSString *)domainName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("volatileDomainForName:" "volatileDomainForName:${1:(NSString *)domainName}" "volatileDomainForName:(NSString *)domainName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryRepresentation" "dictionaryRepresentation" "dictionaryRepresentation" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeSuiteNamed:" "removeSuiteNamed:${1:(NSString *)suiteName}" "removeSuiteNamed:(NSString *)suiteName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addSuiteNamed:" "addSuiteNamed:${1:(NSString *)suiteName}" "addSuiteNamed:(NSString *)suiteName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("registerDefaults:" "registerDefaults:${1:(NSDictionary *)registrationDictionary}" "registerDefaults:(NSDictionary *)registrationDictionary" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setURL:forKey:" "setURL:${1:(NSURL *)url} forKey:${2:(NSString *)defaultName} NS_AVAILABLE(10_6, 4_0)" "setURL:(NSURL *)url forKey:(NSString *)defaultName NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setBool:forKey:" "setBool:${1:(BOOL)value} forKey:${2:(NSString *)defaultName}" "setBool:(BOOL)value forKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDouble:forKey:" "setDouble:${1:(double)value} forKey:${2:(NSString *)defaultName}" "setDouble:(double)value forKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setFloat:forKey:" "setFloat:${1:(float)value} forKey:${2:(NSString *)defaultName}" "setFloat:(float)value forKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setInteger:forKey:" "setInteger:${1:(NSInteger)value} forKey:${2:(NSString *)defaultName}" "setInteger:(NSInteger)value forKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLForKey:" "URLForKey:${1:(NSString *)defaultName} NS_AVAILABLE(10_6, 4_0)" "URLForKey:(NSString *)defaultName NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("boolForKey:" "boolForKey:${1:(NSString *)defaultName}" "boolForKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("doubleForKey:" "doubleForKey:${1:(NSString *)defaultName}" "doubleForKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("floatForKey:" "floatForKey:${1:(NSString *)defaultName}" "floatForKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("integerForKey:" "integerForKey:${1:(NSString *)defaultName}" "integerForKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringArrayForKey:" "stringArrayForKey:${1:(NSString *)defaultName}" "stringArrayForKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataForKey:" "dataForKey:${1:(NSString *)defaultName}" "dataForKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryForKey:" "dictionaryForKey:${1:(NSString *)defaultName}" "dictionaryForKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayForKey:" "arrayForKey:${1:(NSString *)defaultName}" "arrayForKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringForKey:" "stringForKey:${1:(NSString *)defaultName}" "stringForKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectForKey:" "removeObjectForKey:${1:(NSString *)defaultName}" "removeObjectForKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setObject:forKey:" "setObject:${1:(id)value} forKey:${2:(NSString *)defaultName}" "setObject:(id)value forKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectForKey:" "objectForKey:${1:(NSString *)defaultName}" "objectForKey:(NSString *)defaultName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithUser:" "initWithUser:${1:(NSString *)username} NS_DEPRECATED(10_0, 10_9, 2_0, 7_0)" "initWithUser:(NSString *)username NS_DEPRECATED(10_0, 10_9, 2_0, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithSuiteName:" "initWithSuiteName:${1:(NSString *)suitename} NS_AVAILABLE(10_9, 7_0) NS_DESIGNATED_INITIALIZER" "initWithSuiteName:(NSString *)suitename NS_AVAILABLE(10_9, 7_0) NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init" "init" "init" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resetStandardUserDefaults" "resetStandardUserDefaults" "resetStandardUserDefaults" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("standardUserDefaults" "standardUserDefaults" "standardUserDefaults" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("userActivity:didReceiveInputStream:outputStream:" "userActivity:${1:(NSUserActivity *)userActivity} didReceiveInputStream:${2:(NSInputStream *)inputStream} outputStream:${3:(NSOutputStream *)outputStream}" "userActivity:(NSUserActivity *)userActivity didReceiveInputStream:(NSInputStream *)inputStream outputStream:(NSOutputStream *)outputStream" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("userActivityWasContinued:" "userActivityWasContinued:${1:(NSUserActivity *)userActivity}" "userActivityWasContinued:(NSUserActivity *)userActivity" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("userActivityWillSave:" "userActivityWillSave:${1:(NSUserActivity *)userActivity}" "userActivityWillSave:(NSUserActivity *)userActivity" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getContinuationStreamsWithCompletionHandler:" "getContinuationStreamsWithCompletionHandler:${1:(void (^)(NSInputStream *inputStream, NSOutputStream *outputStream, NSError *error))completionHandler}" "getContinuationStreamsWithCompletionHandler:(void (^)(NSInputStream *inputStream, NSOutputStream *outputStream, NSError *error))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("invalidate" "invalidate" "invalidate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("becomeCurrent" "becomeCurrent" "becomeCurrent" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addUserInfoEntriesFromDictionary:" "addUserInfoEntriesFromDictionary:${1:(NSDictionary *)otherDictionary}" "addUserInfoEntriesFromDictionary:(NSDictionary *)otherDictionary" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init" "init" "init" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithActivityType:" "initWithActivityType:${1:(NSString *)activityType}" "initWithActivityType:(NSString *)activityType" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("backgroundSessionConfiguration:backgroundSessionConfigurationWithIdentifier:" "backgroundSessionConfiguration:${1:(NSString *)identifier} NS_DEPRECATED(NSURLSESSION_AVAILABLE, 10_10, 7_0, 8_0, \"Please use backgroundSessionConfigurationWithIdentifier: instead\")" "backgroundSessionConfiguration:(NSString *)identifier NS_DEPRECATED(NSURLSESSION_AVAILABLE, 10_10, 7_0, 8_0, \"Please use backgroundSessionConfigurationWithIdentifier: instead\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataTaskWithHTTPGetRequest:completionHandler:" "dataTaskWithHTTPGetRequest:${1:(NSURL *)url} completionHandler:${2:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler} NS_DEPRECATED(NSURLSESSION_AVAILABLE, NSURLSESSION_AVAILABLE, 7_0, 7_0)" "dataTaskWithHTTPGetRequest:(NSURL *)url completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler NS_DEPRECATED(NSURLSESSION_AVAILABLE, NSURLSESSION_AVAILABLE, 7_0, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataTaskWithHTTPGetRequest:" "dataTaskWithHTTPGetRequest:${1:(NSURL *)url} NS_DEPRECATED(NSURLSESSION_AVAILABLE, NSURLSESSION_AVAILABLE, 7_0, 7_0)" "dataTaskWithHTTPGetRequest:(NSURL *)url NS_DEPRECATED(NSURLSESSION_AVAILABLE, NSURLSESSION_AVAILABLE, 7_0, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:" "URLSession:${1:(NSURLSession *)session} downloadTask:${2:(NSURLSessionDownloadTask *)downloadTask}
                                      didResumeAtOffset:${3:(int64_t)fileOffset}
                                     expectedTotalBytes:${4:(int64_t)expectedTotalBytes}" "URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask
                                      didResumeAtOffset:(int64_t)fileOffset
                                     expectedTotalBytes:(int64_t)expectedTotalBytes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:" "URLSession:${1:(NSURLSession *)session} downloadTask:${2:(NSURLSessionDownloadTask *)downloadTask}
                                           didWriteData:${3:(int64_t)bytesWritten}
                                      totalBytesWritten:${4:(int64_t)totalBytesWritten}
                              totalBytesExpectedToWrite:${5:(int64_t)totalBytesExpectedToWrite}" "URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask
                                           didWriteData:(int64_t)bytesWritten
                                      totalBytesWritten:(int64_t)totalBytesWritten
                              totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:downloadTask:didFinishDownloadingToURL:" "URLSession:${1:(NSURLSession *)session} downloadTask:${2:(NSURLSessionDownloadTask *)downloadTask}
                              didFinishDownloadingToURL:${3:(NSURL *)location}" "URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask
                              didFinishDownloadingToURL:(NSURL *)location" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:dataTask:willCacheResponse:completionHandler:" "URLSession:${1:(NSURLSession *)session} dataTask:${2:(NSURLSessionDataTask *)dataTask}
                                  willCacheResponse:${3:(NSCachedURLResponse *)proposedResponse} 
                                  completionHandler:${4:(void (^)(NSCachedURLResponse *cachedResponse))completionHandler}" "URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask
                                  willCacheResponse:(NSCachedURLResponse *)proposedResponse 
                                  completionHandler:(void (^)(NSCachedURLResponse *cachedResponse))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:dataTask:didReceiveData:" "URLSession:${1:(NSURLSession *)session} dataTask:${2:(NSURLSessionDataTask *)dataTask}
                                     didReceiveData:${3:(NSData *)data}" "URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask
                                     didReceiveData:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:dataTask:didBecomeDownloadTask:" "URLSession:${1:(NSURLSession *)session} dataTask:${2:(NSURLSessionDataTask *)dataTask}
                              didBecomeDownloadTask:${3:(NSURLSessionDownloadTask *)downloadTask}" "URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask
                              didBecomeDownloadTask:(NSURLSessionDownloadTask *)downloadTask" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:dataTask:didReceiveResponse:completionHandler:" "URLSession:${1:(NSURLSession *)session} dataTask:${2:(NSURLSessionDataTask *)dataTask}
                                 didReceiveResponse:${3:(NSURLResponse *)response}
                                  completionHandler:${4:(void (^)(NSURLSessionResponseDisposition disposition))completionHandler}" "URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask
                                 didReceiveResponse:(NSURLResponse *)response
                                  completionHandler:(void (^)(NSURLSessionResponseDisposition disposition))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:task:didCompleteWithError:" "URLSession:${1:(NSURLSession *)session} task:${2:(NSURLSessionTask *)task}
                           didCompleteWithError:${3:(NSError *)error}" "URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task
                           didCompleteWithError:(NSError *)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:" "URLSession:${1:(NSURLSession *)session} task:${2:(NSURLSessionTask *)task}
                                didSendBodyData:${3:(int64_t)bytesSent}
                                 totalBytesSent:${4:(int64_t)totalBytesSent}
                       totalBytesExpectedToSend:${5:(int64_t)totalBytesExpectedToSend}" "URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task
                                didSendBodyData:(int64_t)bytesSent
                                 totalBytesSent:(int64_t)totalBytesSent
                       totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:task:needNewBodyStream:" "URLSession:${1:(NSURLSession *)session} task:${2:(NSURLSessionTask *)task}
                              needNewBodyStream:${3:(void (^)(NSInputStream *bodyStream))completionHandler}" "URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task
                              needNewBodyStream:(void (^)(NSInputStream *bodyStream))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:task:didReceiveChallenge:completionHandler:" "URLSession:${1:(NSURLSession *)session} task:${2:(NSURLSessionTask *)task}
                            didReceiveChallenge:${3:(NSURLAuthenticationChallenge *)challenge} 
                              completionHandler:${4:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *credential))completionHandler}" "URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task
                            didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge 
                              completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *credential))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:" "URLSession:${1:(NSURLSession *)session} task:${2:(NSURLSessionTask *)task}
                     willPerformHTTPRedirection:${3:(NSHTTPURLResponse *)response}
                                     newRequest:${4:(NSURLRequest *)request}
                              completionHandler:${5:(void (^)(NSURLRequest *))completionHandler}" "URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task
                     willPerformHTTPRedirection:(NSHTTPURLResponse *)response
                                     newRequest:(NSURLRequest *)request
                              completionHandler:(void (^)(NSURLRequest *))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSessionDidFinishEventsForBackgroundURLSession:" "URLSessionDidFinishEventsForBackgroundURLSession:${1:(NSURLSession *)session} NS_AVAILABLE_IOS(7_0)" "URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession *)session NS_AVAILABLE_IOS(7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:didReceiveChallenge:completionHandler:" "URLSession:${1:(NSURLSession *)session} didReceiveChallenge:${2:(NSURLAuthenticationChallenge *)challenge}
                                             completionHandler:${3:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *credential))completionHandler}" "URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge
                                             completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *credential))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLSession:didBecomeInvalidWithError:" "URLSession:${1:(NSURLSession *)session} didBecomeInvalidWithError:${2:(NSError *)error}" "URLSession:(NSURLSession *)session didBecomeInvalidWithError:(NSError *)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("backgroundSessionConfigurationWithIdentifier:" "backgroundSessionConfigurationWithIdentifier:${1:(NSString *)identifier} NS_AVAILABLE(10_10, 8_0)" "backgroundSessionConfigurationWithIdentifier:(NSString *)identifier NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("ephemeralSessionConfiguration" "ephemeralSessionConfiguration" "ephemeralSessionConfiguration" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("defaultSessionConfiguration" "defaultSessionConfiguration" "defaultSessionConfiguration" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancelByProducingResumeData:" "cancelByProducingResumeData:${1:(void (^)(NSData *resumeData))completionHandler}" "cancelByProducingResumeData:(void (^)(NSData *resumeData))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resume" "resume" "resume" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("suspend" "suspend" "suspend" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancel" "cancel" "cancel" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("downloadTaskWithResumeData:completionHandler:" "downloadTaskWithResumeData:${1:(NSData *)resumeData} completionHandler:${2:(void (^)(NSURL *location, NSURLResponse *response, NSError *error))completionHandler} NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" "downloadTaskWithResumeData:(NSData *)resumeData completionHandler:(void (^)(NSURL *location, NSURLResponse *response, NSError *error))completionHandler NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("downloadTaskWithURL:completionHandler:" "downloadTaskWithURL:${1:(NSURL *)url} completionHandler:${2:(void (^)(NSURL *location, NSURLResponse *response, NSError *error))completionHandler} NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" "downloadTaskWithURL:(NSURL *)url completionHandler:(void (^)(NSURL *location, NSURLResponse *response, NSError *error))completionHandler NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("downloadTaskWithRequest:completionHandler:" "downloadTaskWithRequest:${1:(NSURLRequest *)request} completionHandler:${2:(void (^)(NSURL *location, NSURLResponse *response, NSError *error))completionHandler} NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" "downloadTaskWithRequest:(NSURLRequest *)request completionHandler:(void (^)(NSURL *location, NSURLResponse *response, NSError *error))completionHandler NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("uploadTaskWithRequest:fromData:completionHandler:" "uploadTaskWithRequest:${1:(NSURLRequest *)request} fromData:${2:(NSData *)bodyData} completionHandler:${3:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler} NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" "uploadTaskWithRequest:(NSURLRequest *)request fromData:(NSData *)bodyData completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("uploadTaskWithRequest:fromFile:completionHandler:" "uploadTaskWithRequest:${1:(NSURLRequest *)request} fromFile:${2:(NSURL *)fileURL} completionHandler:${3:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler} NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" "uploadTaskWithRequest:(NSURLRequest *)request fromFile:(NSURL *)fileURL completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataTaskWithURL:completionHandler:" "dataTaskWithURL:${1:(NSURL *)url} completionHandler:${2:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler} NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" "dataTaskWithURL:(NSURL *)url completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataTaskWithRequest:completionHandler:" "dataTaskWithRequest:${1:(NSURLRequest *)request} completionHandler:${2:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler} NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" "dataTaskWithRequest:(NSURLRequest *)request completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler NS_CLASS_AVAILABLE(NSURLSESSION_AVAILABLE, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("downloadTaskWithResumeData:" "downloadTaskWithResumeData:${1:(NSData *)resumeData}" "downloadTaskWithResumeData:(NSData *)resumeData" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("downloadTaskWithURL:" "downloadTaskWithURL:${1:(NSURL *)url}" "downloadTaskWithURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("downloadTaskWithRequest:" "downloadTaskWithRequest:${1:(NSURLRequest *)request}" "downloadTaskWithRequest:(NSURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("uploadTaskWithStreamedRequest:" "uploadTaskWithStreamedRequest:${1:(NSURLRequest *)request}" "uploadTaskWithStreamedRequest:(NSURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("uploadTaskWithRequest:fromData:" "uploadTaskWithRequest:${1:(NSURLRequest *)request} fromData:${2:(NSData *)bodyData}" "uploadTaskWithRequest:(NSURLRequest *)request fromData:(NSData *)bodyData" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("uploadTaskWithRequest:fromFile:" "uploadTaskWithRequest:${1:(NSURLRequest *)request} fromFile:${2:(NSURL *)fileURL}" "uploadTaskWithRequest:(NSURLRequest *)request fromFile:(NSURL *)fileURL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataTaskWithURL:" "dataTaskWithURL:${1:(NSURL *)url}" "dataTaskWithURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataTaskWithRequest:" "dataTaskWithRequest:${1:(NSURLRequest *)request}" "dataTaskWithRequest:(NSURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getTasksWithCompletionHandler:" "getTasksWithCompletionHandler:${1:(void (^)(NSArray *dataTasks, NSArray *uploadTasks, NSArray *downloadTasks))completionHandler}" "getTasksWithCompletionHandler:(void (^)(NSArray *dataTasks, NSArray *uploadTasks, NSArray *downloadTasks))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("flushWithCompletionHandler:" "flushWithCompletionHandler:${1:(void (^)(void))completionHandler}" "flushWithCompletionHandler:(void (^)(void))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resetWithCompletionHandler:" "resetWithCompletionHandler:${1:(void (^)(void))completionHandler}" "resetWithCompletionHandler:(void (^)(void))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("invalidateAndCancel" "invalidateAndCancel" "invalidateAndCancel" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("finishTasksAndInvalidate" "finishTasksAndInvalidate" "finishTasksAndInvalidate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sessionWithConfiguration:delegate:delegateQueue:" "sessionWithConfiguration:${1:(NSURLSessionConfiguration *)configuration} delegate:${2:(id <NSURLSessionDelegate>)delegate} delegateQueue:${3:(NSOperationQueue *)queue}" "sessionWithConfiguration:(NSURLSessionConfiguration *)configuration delegate:(id <NSURLSessionDelegate>)delegate delegateQueue:(NSOperationQueue *)queue" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sessionWithConfiguration:" "sessionWithConfiguration:${1:(NSURLSessionConfiguration *)configuration}" "sessionWithConfiguration:(NSURLSessionConfiguration *)configuration" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sharedSession" "sharedSession" "sharedSession" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedStringForStatusCode:" "localizedStringForStatusCode:${1:(NSInteger)statusCode}" "localizedStringForStatusCode:(NSInteger)statusCode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithURL:statusCode:HTTPVersion:headerFields:" "initWithURL:${1:(NSURL *)url} statusCode:${2:(NSInteger)statusCode} HTTPVersion:${3:(NSString *)HTTPVersion} headerFields:${4:(NSDictionary *)headerFields} NS_AVAILABLE(10_7, 5_0)" "initWithURL:(NSURL *)url statusCode:(NSInteger)statusCode HTTPVersion:(NSString *)HTTPVersion headerFields:(NSDictionary *)headerFields NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithURL:MIMEType:expectedContentLength:textEncodingName:" "initWithURL:${1:(NSURL *)URL} MIMEType:${2:(NSString *)MIMEType} expectedContentLength:${3:(NSInteger)length} textEncodingName:${4:(NSString *)name}" "initWithURL:(NSURL *)URL MIMEType:(NSString *)MIMEType expectedContentLength:(NSInteger)length textEncodingName:(NSString *)name" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addValue:forHTTPHeaderField:" "addValue:${1:(NSString *)value} forHTTPHeaderField:${2:(NSString *)field}" "addValue:(NSString *)value forHTTPHeaderField:(NSString *)field" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setValue:forHTTPHeaderField:" "setValue:${1:(NSString *)value} forHTTPHeaderField:${2:(NSString *)field}" "setValue:(NSString *)value forHTTPHeaderField:(NSString *)field" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueForHTTPHeaderField:" "valueForHTTPHeaderField:${1:(NSString *)field}" "valueForHTTPHeaderField:(NSString *)field" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithURL:cachePolicy:timeoutInterval:" "initWithURL:${1:(NSURL *)URL} cachePolicy:${2:(NSURLRequestCachePolicy)cachePolicy} timeoutInterval:${3:(NSTimeInterval)timeoutInterval}" "initWithURL:(NSURL *)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithURL:" "initWithURL:${1:(NSURL *)URL}" "initWithURL:(NSURL *)URL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("requestWithURL:cachePolicy:timeoutInterval:" "requestWithURL:${1:(NSURL *)URL} cachePolicy:${2:(NSURLRequestCachePolicy)cachePolicy} timeoutInterval:${3:(NSTimeInterval)timeoutInterval}" "requestWithURL:(NSURL *)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("supportsSecureCoding" "supportsSecureCoding" "supportsSecureCoding" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("requestWithURL:" "requestWithURL:${1:(NSURL *)URL}" "requestWithURL:(NSURL *)URL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithTask:cachedResponse:client:" "initWithTask:${1:(NSURLSessionTask *)task} cachedResponse:${2:(NSCachedURLResponse *)cachedResponse} client:${3:(id <NSURLProtocolClient>)client} NS_AVAILABLE(10_10, 8_0)" "initWithTask:(NSURLSessionTask *)task cachedResponse:(NSCachedURLResponse *)cachedResponse client:(id <NSURLProtocolClient>)client NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("canInitWithTask:" "canInitWithTask:${1:(NSURLSessionTask *)task} NS_AVAILABLE(10_10, 8_0)" "canInitWithTask:(NSURLSessionTask *)task NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unregisterClass:" "unregisterClass:${1:(Class)protocolClass}" "unregisterClass:(Class)protocolClass" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("registerClass:" "registerClass:${1:(Class)protocolClass}" "registerClass:(Class)protocolClass" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removePropertyForKey:inRequest:" "removePropertyForKey:${1:(NSString *)key} inRequest:${2:(NSMutableURLRequest *)request}" "removePropertyForKey:(NSString *)key inRequest:(NSMutableURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setProperty:forKey:inRequest:" "setProperty:${1:(id)value} forKey:${2:(NSString *)key} inRequest:${3:(NSMutableURLRequest *)request}" "setProperty:(id)value forKey:(NSString *)key inRequest:(NSMutableURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("propertyForKey:inRequest:" "propertyForKey:${1:(NSString *)key} inRequest:${2:(NSURLRequest *)request}" "propertyForKey:(NSString *)key inRequest:(NSURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stopLoading" "stopLoading" "stopLoading" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("startLoading" "startLoading" "startLoading" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("requestIsCacheEquivalent:toRequest:" "requestIsCacheEquivalent:${1:(NSURLRequest *)a} toRequest:${2:(NSURLRequest *)b}" "requestIsCacheEquivalent:(NSURLRequest *)a toRequest:(NSURLRequest *)b" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("canonicalRequestForRequest:" "canonicalRequestForRequest:${1:(NSURLRequest *)request}" "canonicalRequestForRequest:(NSURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("canInitWithRequest:" "canInitWithRequest:${1:(NSURLRequest *)request}" "canInitWithRequest:(NSURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithRequest:cachedResponse:client:" "initWithRequest:${1:(NSURLRequest *)request} cachedResponse:${2:(NSCachedURLResponse *)cachedResponse} client:${3:(id <NSURLProtocolClient>)client}" "initWithRequest:(NSURLRequest *)request cachedResponse:(NSCachedURLResponse *)cachedResponse client:(id <NSURLProtocolClient>)client" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLProtocol:didCancelAuthenticationChallenge:" "URLProtocol:${1:(NSURLProtocol *)protocol} didCancelAuthenticationChallenge:${2:(NSURLAuthenticationChallenge *)challenge}" "URLProtocol:(NSURLProtocol *)protocol didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLProtocol:didReceiveAuthenticationChallenge:" "URLProtocol:${1:(NSURLProtocol *)protocol} didReceiveAuthenticationChallenge:${2:(NSURLAuthenticationChallenge *)challenge}" "URLProtocol:(NSURLProtocol *)protocol didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLProtocol:didFailWithError:" "URLProtocol:${1:(NSURLProtocol *)protocol} didFailWithError:${2:(NSError *)error}" "URLProtocol:(NSURLProtocol *)protocol didFailWithError:(NSError *)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLProtocolDidFinishLoading:" "URLProtocolDidFinishLoading:${1:(NSURLProtocol *)protocol}" "URLProtocolDidFinishLoading:(NSURLProtocol *)protocol" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLProtocol:didLoadData:" "URLProtocol:${1:(NSURLProtocol *)protocol} didLoadData:${2:(NSData *)data}" "URLProtocol:(NSURLProtocol *)protocol didLoadData:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLProtocol:didReceiveResponse:cacheStoragePolicy:" "URLProtocol:${1:(NSURLProtocol *)protocol} didReceiveResponse:${2:(NSURLResponse *)response} cacheStoragePolicy:${3:(NSURLCacheStoragePolicy)policy}" "URLProtocol:(NSURLProtocol *)protocol didReceiveResponse:(NSURLResponse *)response cacheStoragePolicy:(NSURLCacheStoragePolicy)policy" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLProtocol:cachedResponseIsValid:" "URLProtocol:${1:(NSURLProtocol *)protocol} cachedResponseIsValid:${2:(NSCachedURLResponse *)cachedResponse}" "URLProtocol:(NSURLProtocol *)protocol cachedResponseIsValid:(NSCachedURLResponse *)cachedResponse" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLProtocol:wasRedirectedToRequest:redirectResponse:" "URLProtocol:${1:(NSURLProtocol *)protocol} wasRedirectedToRequest:${2:(NSURLRequest *)request} redirectResponse:${3:(NSURLResponse *)redirectResponse}" "URLProtocol:(NSURLProtocol *)protocol wasRedirectedToRequest:(NSURLRequest *)request redirectResponse:(NSURLResponse *)redirectResponse" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithProxyHost:port:type:realm:authenticationMethod:" "initWithProxyHost:${1:(NSString *)host} port:${2:(NSInteger)port} type:${3:(NSString *)type} realm:${4:(NSString *)realm}  authenticationMethod:${5:(NSString *)authenticationMethod}" "initWithProxyHost:(NSString *)host port:(NSInteger)port type:(NSString *)type realm:(NSString *)realm  authenticationMethod:(NSString *)authenticationMethod" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithHost:port:protocol:realm:authenticationMethod:" "initWithHost:${1:(NSString *)host} port:${2:(NSInteger)port} protocol:${3:(NSString *)protocol} realm:${4:(NSString *)realm} authenticationMethod:${5:(NSString *)authenticationMethod}" "initWithHost:(NSString *)host port:(NSInteger)port protocol:(NSString *)protocol realm:(NSString *)realm authenticationMethod:(NSString *)authenticationMethod" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDefaultCredential:forProtectionSpace:task:" "setDefaultCredential:${1:(NSURLCredential *)credential} forProtectionSpace:${2:(NSURLProtectionSpace *)protectionSpace} task:${3:(NSURLSessionTask *)task} NS_AVAILABLE(10_10, 8_0)" "setDefaultCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)protectionSpace task:(NSURLSessionTask *)task NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getDefaultCredentialForProtectionSpace:task:completionHandler:" "getDefaultCredentialForProtectionSpace:${1:(NSURLProtectionSpace *)space} task:${2:(NSURLSessionTask *)task} completionHandler:${3:(void (^) (NSURLCredential *credential))completionHandler} NS_AVAILABLE(10_10, 8_0)" "getDefaultCredentialForProtectionSpace:(NSURLProtectionSpace *)space task:(NSURLSessionTask *)task completionHandler:(void (^) (NSURLCredential *credential))completionHandler NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeCredential:forProtectionSpace:options:task:" "removeCredential:${1:(NSURLCredential *)credential} forProtectionSpace:${2:(NSURLProtectionSpace *)protectionSpace} options:${3:(NSDictionary *)options} task:${4:(NSURLSessionTask *)task} NS_AVAILABLE(10_10, 8_0)" "removeCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)protectionSpace options:(NSDictionary *)options task:(NSURLSessionTask *)task NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setCredential:forProtectionSpace:task:" "setCredential:${1:(NSURLCredential *)credential} forProtectionSpace:${2:(NSURLProtectionSpace *)protectionSpace} task:${3:(NSURLSessionTask *)task} NS_AVAILABLE(10_10, 8_0)" "setCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)protectionSpace task:(NSURLSessionTask *)task NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getCredentialsForProtectionSpace:task:completionHandler:" "getCredentialsForProtectionSpace:${1:(NSURLProtectionSpace *)protectionSpace} task:${2:(NSURLSessionTask *)task} completionHandler:${3:(void (^) (NSDictionary *credentials))completionHandler} NS_AVAILABLE(10_10, 8_0)" "getCredentialsForProtectionSpace:(NSURLProtectionSpace *)protectionSpace task:(NSURLSessionTask *)task completionHandler:(void (^) (NSDictionary *credentials))completionHandler NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDefaultCredential:forProtectionSpace:" "setDefaultCredential:${1:(NSURLCredential *)credential} forProtectionSpace:${2:(NSURLProtectionSpace *)space}" "setDefaultCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)space" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("defaultCredentialForProtectionSpace:" "defaultCredentialForProtectionSpace:${1:(NSURLProtectionSpace *)space}" "defaultCredentialForProtectionSpace:(NSURLProtectionSpace *)space" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeCredential:forProtectionSpace:options:" "removeCredential:${1:(NSURLCredential *)credential} forProtectionSpace:${2:(NSURLProtectionSpace *)space} options:${3:(NSDictionary *)options} NS_AVAILABLE(10_9, 7_0)" "removeCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)space options:(NSDictionary *)options NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeCredential:forProtectionSpace:" "removeCredential:${1:(NSURLCredential *)credential} forProtectionSpace:${2:(NSURLProtectionSpace *)space}" "removeCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)space" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setCredential:forProtectionSpace:" "setCredential:${1:(NSURLCredential *)credential} forProtectionSpace:${2:(NSURLProtectionSpace *)space}" "setCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)space" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("credentialsForProtectionSpace:" "credentialsForProtectionSpace:${1:(NSURLProtectionSpace *)space}" "credentialsForProtectionSpace:(NSURLProtectionSpace *)space" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sharedCredentialStorage" "sharedCredentialStorage" "sharedCredentialStorage" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("credentialForTrust:" "credentialForTrust:${1:(SecTrustRef)trust} NS_AVAILABLE(10_6, 3_0)" "credentialForTrust:(SecTrustRef)trust NS_AVAILABLE(10_6, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithTrust:" "initWithTrust:${1:(SecTrustRef)trust} NS_AVAILABLE(10_6, 3_0)" "initWithTrust:(SecTrustRef)trust NS_AVAILABLE(10_6, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("credentialWithIdentity:certificates:persistence:" "credentialWithIdentity:${1:(SecIdentityRef)identity} certificates:${2:(NSArray *)certArray} persistence:${3:(NSURLCredentialPersistence)persistence} NS_AVAILABLE(10_6, 3_0)" "credentialWithIdentity:(SecIdentityRef)identity certificates:(NSArray *)certArray persistence:(NSURLCredentialPersistence)persistence NS_AVAILABLE(10_6, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithIdentity:certificates:persistence:" "initWithIdentity:${1:(SecIdentityRef)identity} certificates:${2:(NSArray *)certArray} persistence:${3:(NSURLCredentialPersistence)persistence} NS_AVAILABLE(10_6, 3_0)" "initWithIdentity:(SecIdentityRef)identity certificates:(NSArray *)certArray persistence:(NSURLCredentialPersistence)persistence NS_AVAILABLE(10_6, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("credentialWithUser:password:persistence:" "credentialWithUser:${1:(NSString *)user} password:${2:(NSString *)password} persistence:${3:(NSURLCredentialPersistence)persistence}" "credentialWithUser:(NSString *)user password:(NSString *)password persistence:(NSURLCredentialPersistence)persistence" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithUser:password:persistence:" "initWithUser:${1:(NSString *)user} password:${2:(NSString *)password} persistence:${3:(NSURLCredentialPersistence)persistence}" "initWithUser:(NSString *)user password:(NSString *)password persistence:(NSURLCredentialPersistence)persistence" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sendAsynchronousRequest:queue:completionHandler:" "sendAsynchronousRequest:${1:(NSURLRequest*) request}
                          queue:${2:(NSOperationQueue*) queue}
              completionHandler:${3:(void (^)(NSURLResponse* response, NSData* data, NSError* connectionError)) handler} NS_AVAILABLE(10_7, 5_0)" "sendAsynchronousRequest:(NSURLRequest*) request
                          queue:(NSOperationQueue*) queue
              completionHandler:(void (^)(NSURLResponse* response, NSData* data, NSError* connectionError)) handler NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sendSynchronousRequest:returningResponse:error:" "sendSynchronousRequest:${1:(NSURLRequest *)request} returningResponse:${2:(NSURLResponse **)response} error:${3:(NSError **)error}" "sendSynchronousRequest:(NSURLRequest *)request returningResponse:(NSURLResponse **)response error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connectionDidFinishDownloading:destinationURL:" "connectionDidFinishDownloading:${1:(NSURLConnection *)connection} destinationURL:${2:(NSURL *) destinationURL}" "connectionDidFinishDownloading:(NSURLConnection *)connection destinationURL:(NSURL *) destinationURL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:" "connectionDidResumeDownloading:${1:(NSURLConnection *)connection} totalBytesWritten:${2:(long long)totalBytesWritten} expectedTotalBytes:${3:(long long) expectedTotalBytes}" "connectionDidResumeDownloading:(NSURLConnection *)connection totalBytesWritten:(long long)totalBytesWritten expectedTotalBytes:(long long) expectedTotalBytes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connection:didWriteData:totalBytesWritten:expectedTotalBytes:" "connection:${1:(NSURLConnection *)connection} didWriteData:${2:(long long)bytesWritten} totalBytesWritten:${3:(long long)totalBytesWritten} expectedTotalBytes:${4:(long long) expectedTotalBytes}" "connection:(NSURLConnection *)connection didWriteData:(long long)bytesWritten totalBytesWritten:(long long)totalBytesWritten expectedTotalBytes:(long long) expectedTotalBytes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connectionDidFinishLoading:" "connectionDidFinishLoading:${1:(NSURLConnection *)connection}" "connectionDidFinishLoading:(NSURLConnection *)connection" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connection:willCacheResponse:" "connection:${1:(NSURLConnection *)connection} willCacheResponse:${2:(NSCachedURLResponse *)cachedResponse}" "connection:(NSURLConnection *)connection willCacheResponse:(NSCachedURLResponse *)cachedResponse" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:" "connection:${1:(NSURLConnection *)connection}   didSendBodyData:${2:(NSInteger)bytesWritten}
                                                 totalBytesWritten:${3:(NSInteger)totalBytesWritten}
                                         totalBytesExpectedToWrite:${4:(NSInteger)totalBytesExpectedToWrite}" "connection:(NSURLConnection *)connection   didSendBodyData:(NSInteger)bytesWritten
                                                 totalBytesWritten:(NSInteger)totalBytesWritten
                                         totalBytesExpectedToWrite:(NSInteger)totalBytesExpectedToWrite" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connection:needNewBodyStream:" "connection:${1:(NSURLConnection *)connection} needNewBodyStream:${2:(NSURLRequest *)request}" "connection:(NSURLConnection *)connection needNewBodyStream:(NSURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connection:didReceiveData:" "connection:${1:(NSURLConnection *)connection} didReceiveData:${2:(NSData *)data}" "connection:(NSURLConnection *)connection didReceiveData:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connection:didReceiveResponse:" "connection:${1:(NSURLConnection *)connection} didReceiveResponse:${2:(NSURLResponse *)response}" "connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connection:willSendRequest:redirectResponse:" "connection:${1:(NSURLConnection *)connection} willSendRequest:${2:(NSURLRequest *)request} redirectResponse:${3:(NSURLResponse *)response}" "connection:(NSURLConnection *)connection willSendRequest:(NSURLRequest *)request redirectResponse:(NSURLResponse *)response" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connection:didCancelAuthenticationChallenge:connection:willSendRequestForAuthenticationChallenge:" "connection:${1:(NSURLConnection *)connection} didCancelAuthenticationChallenge:${2:(NSURLAuthenticationChallenge *)challenge} NS_DEPRECATED(10_2, 10_10, 2_0, 8_0, \"Use -connection:willSendRequestForAuthenticationChallenge: instead.\")" "connection:(NSURLConnection *)connection didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge NS_DEPRECATED(10_2, 10_10, 2_0, 8_0, \"Use -connection:willSendRequestForAuthenticationChallenge: instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connection:didReceiveAuthenticationChallenge:connection:willSendRequestForAuthenticationChallenge:" "connection:${1:(NSURLConnection *)connection} didReceiveAuthenticationChallenge:${2:(NSURLAuthenticationChallenge *)challenge} NS_DEPRECATED(10_2, 10_10, 2_0, 8_0, \"Use -connection:willSendRequestForAuthenticationChallenge: instead.\")" "connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge NS_DEPRECATED(10_2, 10_10, 2_0, 8_0, \"Use -connection:willSendRequestForAuthenticationChallenge: instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connection:canAuthenticateAgainstProtectionSpace:connection:willSendRequestForAuthenticationChallenge:" "connection:${1:(NSURLConnection *)connection} canAuthenticateAgainstProtectionSpace:${2:(NSURLProtectionSpace *)protectionSpace} NS_DEPRECATED(10_6, 10_10, 3_0, 8_0, \"Use -connection:willSendRequestForAuthenticationChallenge: instead.\")" "connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace NS_DEPRECATED(10_6, 10_10, 3_0, 8_0, \"Use -connection:willSendRequestForAuthenticationChallenge: instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connection:willSendRequestForAuthenticationChallenge:" "connection:${1:(NSURLConnection *)connection} willSendRequestForAuthenticationChallenge:${2:(NSURLAuthenticationChallenge *)challenge}" "connection:(NSURLConnection *)connection willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connectionShouldUseCredentialStorage:" "connectionShouldUseCredentialStorage:${1:(NSURLConnection *)connection}" "connectionShouldUseCredentialStorage:(NSURLConnection *)connection" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connection:didFailWithError:" "connection:${1:(NSURLConnection *)connection} didFailWithError:${2:(NSError *)error}" "connection:(NSURLConnection *)connection didFailWithError:(NSError *)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("canHandleRequest:" "canHandleRequest:${1:(NSURLRequest *)request}" "canHandleRequest:(NSURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDelegateQueue:" "setDelegateQueue:${1:(NSOperationQueue*) queue} NS_AVAILABLE(10_7, 5_0)" "setDelegateQueue:(NSOperationQueue*) queue NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unscheduleFromRunLoop:forMode:" "unscheduleFromRunLoop:${1:(NSRunLoop *)aRunLoop} forMode:${2:(NSString *)mode} NS_AVAILABLE(10_5, 2_0)" "unscheduleFromRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scheduleInRunLoop:forMode:" "scheduleInRunLoop:${1:(NSRunLoop *)aRunLoop} forMode:${2:(NSString *)mode} NS_AVAILABLE(10_5, 2_0)" "scheduleInRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancel" "cancel" "cancel" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("start NS_AVAILABLE(10_5, 2_0)" "start NS_AVAILABLE(10_5, 2_0)" "start NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("connectionWithRequest:delegate:" "connectionWithRequest:${1:(NSURLRequest *)request} delegate:${2:(id)delegate}" "connectionWithRequest:(NSURLRequest *)request delegate:(id)delegate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithRequest:delegate:" "initWithRequest:${1:(NSURLRequest *)request} delegate:${2:(id)delegate}" "initWithRequest:(NSURLRequest *)request delegate:(id)delegate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithRequest:delegate:startImmediately:" "initWithRequest:${1:(NSURLRequest *)request} delegate:${2:(id)delegate} startImmediately:${3:(BOOL)startImmediately} NS_AVAILABLE(10_5, 2_0)" "initWithRequest:(NSURLRequest *)request delegate:(id)delegate startImmediately:(BOOL)startImmediately NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeCachedResponseForDataTask:" "removeCachedResponseForDataTask:${1:(NSURLSessionDataTask *)dataTask} NS_AVAILABLE(10_10, 8_0)" "removeCachedResponseForDataTask:(NSURLSessionDataTask *)dataTask NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getCachedResponseForDataTask:completionHandler:" "getCachedResponseForDataTask:${1:(NSURLSessionDataTask *)dataTask} completionHandler:${2:(void (^) (NSCachedURLResponse *cachedResponse))completionHandler} NS_AVAILABLE(10_10, 8_0)" "getCachedResponseForDataTask:(NSURLSessionDataTask *)dataTask completionHandler:(void (^) (NSCachedURLResponse *cachedResponse))completionHandler NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("storeCachedResponse:forDataTask:" "storeCachedResponse:${1:(NSCachedURLResponse *)cachedResponse} forDataTask:${2:(NSURLSessionDataTask *)dataTask} NS_AVAILABLE(10_10, 8_0)" "storeCachedResponse:(NSCachedURLResponse *)cachedResponse forDataTask:(NSURLSessionDataTask *)dataTask NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeCachedResponsesSinceDate:" "removeCachedResponsesSinceDate:${1:(NSDate *)date} NS_AVAILABLE(10_10, 8_0)" "removeCachedResponsesSinceDate:(NSDate *)date NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAllCachedResponses" "removeAllCachedResponses" "removeAllCachedResponses" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeCachedResponseForRequest:" "removeCachedResponseForRequest:${1:(NSURLRequest *)request}" "removeCachedResponseForRequest:(NSURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("storeCachedResponse:forRequest:" "storeCachedResponse:${1:(NSCachedURLResponse *)cachedResponse} forRequest:${2:(NSURLRequest *)request}" "storeCachedResponse:(NSCachedURLResponse *)cachedResponse forRequest:(NSURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cachedResponseForRequest:" "cachedResponseForRequest:${1:(NSURLRequest *)request}" "cachedResponseForRequest:(NSURLRequest *)request" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithMemoryCapacity:diskCapacity:diskPath:" "initWithMemoryCapacity:${1:(NSUInteger)memoryCapacity} diskCapacity:${2:(NSUInteger)diskCapacity} diskPath:${3:(NSString *)path}" "initWithMemoryCapacity:(NSUInteger)memoryCapacity diskCapacity:(NSUInteger)diskCapacity diskPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setSharedURLCache:" "setSharedURLCache:${1:(NSURLCache *)cache}" "setSharedURLCache:(NSURLCache *)cache" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sharedURLCache" "sharedURLCache" "sharedURLCache" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithResponse:data:userInfo:storagePolicy:" "initWithResponse:${1:(NSURLResponse *)response} data:${2:(NSData *)data} userInfo:${3:(NSDictionary *)userInfo} storagePolicy:${4:(NSURLCacheStoragePolicy)storagePolicy}" "initWithResponse:(NSURLResponse *)response data:(NSData *)data userInfo:(NSDictionary *)userInfo storagePolicy:(NSURLCacheStoragePolicy)storagePolicy" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithResponse:data:" "initWithResponse:${1:(NSURLResponse *)response} data:${2:(NSData *)data}" "initWithResponse:(NSURLResponse *)response data:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithAuthenticationChallenge:sender:" "initWithAuthenticationChallenge:${1:(NSURLAuthenticationChallenge *)challenge} sender:${2:(id<NSURLAuthenticationChallengeSender>)sender}" "initWithAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge sender:(id<NSURLAuthenticationChallengeSender>)sender" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:" "initWithProtectionSpace:${1:(NSURLProtectionSpace *)space} proposedCredential:${2:(NSURLCredential *)credential} previousFailureCount:${3:(NSInteger)previousFailureCount} failureResponse:${4:(NSURLResponse *)response} error:${5:(NSError *)error} sender:${6:(id<NSURLAuthenticationChallengeSender>)sender}" "initWithProtectionSpace:(NSURLProtectionSpace *)space proposedCredential:(NSURLCredential *)credential previousFailureCount:(NSInteger)previousFailureCount failureResponse:(NSURLResponse *)response error:(NSError *)error sender:(id<NSURLAuthenticationChallengeSender>)sender" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rejectProtectionSpaceAndContinueWithChallenge:" "rejectProtectionSpaceAndContinueWithChallenge:${1:(NSURLAuthenticationChallenge *)challenge}" "rejectProtectionSpaceAndContinueWithChallenge:(NSURLAuthenticationChallenge *)challenge" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("performDefaultHandlingForAuthenticationChallenge:" "performDefaultHandlingForAuthenticationChallenge:${1:(NSURLAuthenticationChallenge *)challenge}" "performDefaultHandlingForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancelAuthenticationChallenge:" "cancelAuthenticationChallenge:${1:(NSURLAuthenticationChallenge *)challenge}" "cancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("continueWithoutCredentialForAuthenticationChallenge:" "continueWithoutCredentialForAuthenticationChallenge:${1:(NSURLAuthenticationChallenge *)challenge}" "continueWithoutCredentialForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("useCredential:forAuthenticationChallenge:" "useCredential:${1:(NSURLCredential *)credential} forAuthenticationChallenge:${2:(NSURLAuthenticationChallenge *)challenge}" "useCredential:(NSURLCredential *)credential forAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLHandleUsingCache:" "URLHandleUsingCache:${1:(BOOL)shouldUseCache} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "URLHandleUsingCache:(BOOL)shouldUseCache NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setProperty:forKey:" "setProperty:${1:(id)property} forKey:${2:(NSString *)propertyKey} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "setProperty:(id)property forKey:(NSString *)propertyKey NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setResourceData:" "setResourceData:${1:(NSData *)data} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "setResourceData:(NSData *)data NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("propertyForKey:" "propertyForKey:${1:(NSString *)propertyKey} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "propertyForKey:(NSString *)propertyKey NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("loadResourceDataNotifyingClient:usingCache:" "loadResourceDataNotifyingClient:${1:(id)client} usingCache:${2:(BOOL)shouldUseCache} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "loadResourceDataNotifyingClient:(id)client usingCache:(BOOL)shouldUseCache NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resourceDataUsingCache:" "resourceDataUsingCache:${1:(BOOL)shouldUseCache} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "resourceDataUsingCache:(BOOL)shouldUseCache NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URL:resourceDidFailLoadingWithReason:" "URL:${1:(NSURL *)sender} resourceDidFailLoadingWithReason:${2:(NSString *)reason} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "URL:(NSURL *)sender resourceDidFailLoadingWithReason:(NSString *)reason NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLResourceDidCancelLoading:" "URLResourceDidCancelLoading:${1:(NSURL *)sender} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "URLResourceDidCancelLoading:(NSURL *)sender NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLResourceDidFinishLoading:" "URLResourceDidFinishLoading:${1:(NSURL *)sender} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "URLResourceDidFinishLoading:(NSURL *)sender NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URL:resourceDataDidBecomeAvailable:" "URL:${1:(NSURL *)sender} resourceDataDidBecomeAvailable:${2:(NSData *)newBytes} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "URL:(NSURL *)sender resourceDataDidBecomeAvailable:(NSData *)newBytes NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" " initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" " initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLByAppendingPathExtension:" "URLByAppendingPathExtension:${1:(NSString *)pathExtension} NS_AVAILABLE(10_6, 4_0)" "URLByAppendingPathExtension:(NSString *)pathExtension NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLByAppendingPathComponent:isDirectory:" "URLByAppendingPathComponent:${1:(NSString *)pathComponent} isDirectory:${2:(BOOL)isDirectory} NS_AVAILABLE(10_7, 5_0)" "URLByAppendingPathComponent:(NSString *)pathComponent isDirectory:(BOOL)isDirectory NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLByAppendingPathComponent:" "URLByAppendingPathComponent:${1:(NSString *)pathComponent} NS_AVAILABLE(10_6, 4_0)" "URLByAppendingPathComponent:(NSString *)pathComponent NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileURLWithPathComponents:" "fileURLWithPathComponents:${1:(NSArray *)components} NS_AVAILABLE(10_6, 4_0)" "fileURLWithPathComponents:(NSArray *)components NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByReplacingPercentEscapesUsingEncoding:" "stringByReplacingPercentEscapesUsingEncoding:${1:(NSStringEncoding)enc}" "stringByReplacingPercentEscapesUsingEncoding:(NSStringEncoding)enc" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByAddingPercentEscapesUsingEncoding:" "stringByAddingPercentEscapesUsingEncoding:${1:(NSStringEncoding)enc}" "stringByAddingPercentEscapesUsingEncoding:(NSStringEncoding)enc" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByAddingPercentEncodingWithAllowedCharacters:" "stringByAddingPercentEncodingWithAllowedCharacters:${1:(NSCharacterSet *)allowedCharacters} NS_AVAILABLE(10_9, 7_0)" "stringByAddingPercentEncodingWithAllowedCharacters:(NSCharacterSet *)allowedCharacters NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLFragmentAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" "URLFragmentAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" "URLFragmentAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLQueryAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" "URLQueryAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" "URLQueryAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLPathAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" "URLPathAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" "URLPathAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLHostAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" "URLHostAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" "URLHostAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLPasswordAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" "URLPasswordAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" "URLPasswordAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLUserAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" "URLUserAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" "URLUserAllowedCharacterSet NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLRelativeToURL:" "URLRelativeToURL:${1:(NSURL *)baseURL}" "URLRelativeToURL:(NSURL *)baseURL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("componentsWithString:" "componentsWithString:${1:(NSString *)URLString}" "componentsWithString:(NSString *)URLString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithString:" "initWithString:${1:(NSString *)URLString}" "initWithString:(NSString *)URLString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("componentsWithURL:resolvingAgainstBaseURL:" "componentsWithURL:${1:(NSURL *)url} resolvingAgainstBaseURL:${2:(BOOL)resolve}" "componentsWithURL:(NSURL *)url resolvingAgainstBaseURL:(BOOL)resolve" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithURL:resolvingAgainstBaseURL:" "initWithURL:${1:(NSURL *)url} resolvingAgainstBaseURL:${2:(BOOL)resolve}" "initWithURL:(NSURL *)url resolvingAgainstBaseURL:(BOOL)resolve" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init" "init" "init" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("queryItemWithName:value:" "queryItemWithName:${1:(NSString *)name} value:${2:(NSString *)value}" "queryItemWithName:(NSString *)name value:(NSString *)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithName:value:" "initWithName:${1:(NSString *)name} value:${2:(NSString *)value} NS_DESIGNATED_INITIALIZER" "initWithName:(NSString *)name value:(NSString *)value NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("checkPromisedItemIsReachableAndReturnError:" "checkPromisedItemIsReachableAndReturnError:${1:(NSError **)error} NS_AVAILABLE(10_10, 8_0)" "checkPromisedItemIsReachableAndReturnError:(NSError **)error NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("promisedItemResourceValuesForKeys:error:" "promisedItemResourceValuesForKeys:${1:(NSArray *)keys} error:${2:(NSError **)error} NS_AVAILABLE(10_10, 8_0)" "promisedItemResourceValuesForKeys:(NSArray *)keys error:(NSError **)error NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getPromisedItemResourceValue:forKey:error:" "getPromisedItemResourceValue:${1:(id *)value} forKey:${2:(NSString *)key} error:${3:(NSError **)error} NS_AVAILABLE(10_10, 8_0)" "getPromisedItemResourceValue:(id *)value forKey:(NSString *)key error:(NSError **)error NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stopAccessingSecurityScopedResource NS_AVAILABLE(10_7, 8_0)" "stopAccessingSecurityScopedResource NS_AVAILABLE(10_7, 8_0)" "stopAccessingSecurityScopedResource NS_AVAILABLE(10_7, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("startAccessingSecurityScopedResource NS_AVAILABLE(10_7, 8_0)" "startAccessingSecurityScopedResource NS_AVAILABLE(10_7, 8_0)" "startAccessingSecurityScopedResource NS_AVAILABLE(10_7, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLByResolvingAliasFileAtURL:options:error:" "URLByResolvingAliasFileAtURL:${1:(NSURL *)url} options:${2:(NSURLBookmarkResolutionOptions)options} error:${3:(NSError **)error} NS_AVAILABLE(10_10, 8_0)" "URLByResolvingAliasFileAtURL:(NSURL *)url options:(NSURLBookmarkResolutionOptions)options error:(NSError **)error NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("bookmarkDataWithContentsOfURL:error:" "bookmarkDataWithContentsOfURL:${1:(NSURL *)bookmarkFileURL} error:${2:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "bookmarkDataWithContentsOfURL:(NSURL *)bookmarkFileURL error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeBookmarkData:toURL:options:error:" "writeBookmarkData:${1:(NSData *)bookmarkData} toURL:${2:(NSURL *)bookmarkFileURL} options:${3:(NSURLBookmarkFileCreationOptions)options} error:${4:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "writeBookmarkData:(NSData *)bookmarkData toURL:(NSURL *)bookmarkFileURL options:(NSURLBookmarkFileCreationOptions)options error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resourceValuesForKeys:fromBookmarkData:" "resourceValuesForKeys:${1:(NSArray *)keys} fromBookmarkData:${2:(NSData *)bookmarkData} NS_AVAILABLE(10_6, 4_0)" "resourceValuesForKeys:(NSArray *)keys fromBookmarkData:(NSData *)bookmarkData NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:" "URLByResolvingBookmarkData:${1:(NSData *)bookmarkData} options:${2:(NSURLBookmarkResolutionOptions)options} relativeToURL:${3:(NSURL *)relativeURL} bookmarkDataIsStale:${4:(BOOL *)isStale} error:${5:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "URLByResolvingBookmarkData:(NSData *)bookmarkData options:(NSURLBookmarkResolutionOptions)options relativeToURL:(NSURL *)relativeURL bookmarkDataIsStale:(BOOL *)isStale error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:" "initByResolvingBookmarkData:${1:(NSData *)bookmarkData} options:${2:(NSURLBookmarkResolutionOptions)options} relativeToURL:${3:(NSURL *)relativeURL} bookmarkDataIsStale:${4:(BOOL *)isStale} error:${5:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "initByResolvingBookmarkData:(NSData *)bookmarkData options:(NSURLBookmarkResolutionOptions)options relativeToURL:(NSURL *)relativeURL bookmarkDataIsStale:(BOOL *)isStale error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:" "bookmarkDataWithOptions:${1:(NSURLBookmarkCreationOptions)options} includingResourceValuesForKeys:${2:(NSArray *)keys} relativeToURL:${3:(NSURL *)relativeURL} error:${4:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "bookmarkDataWithOptions:(NSURLBookmarkCreationOptions)options includingResourceValuesForKeys:(NSArray *)keys relativeToURL:(NSURL *)relativeURL error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setTemporaryResourceValue:forKey:" "setTemporaryResourceValue:${1:(id)value} forKey:${2:(NSString *)key} NS_AVAILABLE(10_9, 7_0)" "setTemporaryResourceValue:(id)value forKey:(NSString *)key NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAllCachedResourceValues NS_AVAILABLE(10_9, 7_0)" "removeAllCachedResourceValues NS_AVAILABLE(10_9, 7_0)" "removeAllCachedResourceValues NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeCachedResourceValueForKey:" "removeCachedResourceValueForKey:${1:(NSString *)key} NS_AVAILABLE(10_9, 7_0)" "removeCachedResourceValueForKey:(NSString *)key NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setResourceValues:error:" "setResourceValues:${1:(NSDictionary *)keyedValues} error:${2:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "setResourceValues:(NSDictionary *)keyedValues error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setResourceValue:forKey:error:" "setResourceValue:${1:(id)value} forKey:${2:(NSString *)key} error:${3:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "setResourceValue:(id)value forKey:(NSString *)key error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resourceValuesForKeys:error:" "resourceValuesForKeys:${1:(NSArray *)keys} error:${2:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "resourceValuesForKeys:(NSArray *)keys error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getResourceValue:forKey:error:" "getResourceValue:${1:(out id *)value} forKey:${2:(NSString *)key} error:${3:(out NSError **)error} NS_AVAILABLE(10_6, 4_0)" "getResourceValue:(out id *)value forKey:(NSString *)key error:(out NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileReferenceURL NS_AVAILABLE(10_6, 4_0)" "fileReferenceURL NS_AVAILABLE(10_6, 4_0)" "fileReferenceURL NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isFileReferenceURL NS_AVAILABLE(10_6, 4_0)" "isFileReferenceURL NS_AVAILABLE(10_6, 4_0)" "isFileReferenceURL NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("checkResourceIsReachableAndReturnError:" "checkResourceIsReachableAndReturnError:${1:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "checkResourceIsReachableAndReturnError:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getFileSystemRepresentation:maxLength:" "getFileSystemRepresentation:${1:(char *)buffer} maxLength:${2:(NSUInteger)maxBufferLength} NS_AVAILABLE(10_9, 7_0)" "getFileSystemRepresentation:(char *)buffer maxLength:(NSUInteger)maxBufferLength NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLWithString:relativeToURL:" "URLWithString:${1:(NSString *)URLString} relativeToURL:${2:(NSURL *)baseURL}" "URLWithString:(NSString *)URLString relativeToURL:(NSURL *)baseURL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLWithString:" "URLWithString:${1:(NSString *)URLString}" "URLWithString:(NSString *)URLString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithString:relativeToURL:" "initWithString:${1:(NSString *)URLString} relativeToURL:${2:(NSURL *)baseURL} NS_DESIGNATED_INITIALIZER" "initWithString:(NSString *)URLString relativeToURL:(NSURL *)baseURL NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithString:" "initWithString:${1:(NSString *)URLString}" "initWithString:(NSString *)URLString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:" "fileURLWithFileSystemRepresentation:${1:(const char *)path} isDirectory:${2:(BOOL) isDir} relativeToURL:${3:(NSURL *)baseURL} NS_AVAILABLE(10_9, 7_0)" "fileURLWithFileSystemRepresentation:(const char *)path isDirectory:(BOOL) isDir relativeToURL:(NSURL *)baseURL NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:" "initFileURLWithFileSystemRepresentation:${1:(const char *)path} isDirectory:${2:(BOOL)isDir} relativeToURL:${3:(NSURL *)baseURL} NS_AVAILABLE(10_9, 7_0) NS_DESIGNATED_INITIALIZER" "initFileURLWithFileSystemRepresentation:(const char *)path isDirectory:(BOOL)isDir relativeToURL:(NSURL *)baseURL NS_AVAILABLE(10_9, 7_0) NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileURLWithPath:" "fileURLWithPath:${1:(NSString *)path}" "fileURLWithPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileURLWithPath:isDirectory:" "fileURLWithPath:${1:(NSString *)path} isDirectory:${2:(BOOL) isDir} NS_AVAILABLE(10_5, 2_0)" "fileURLWithPath:(NSString *)path isDirectory:(BOOL) isDir NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initFileURLWithPath:" "initFileURLWithPath:${1:(NSString *)path} NS_DESIGNATED_INITIALIZER" "initFileURLWithPath:(NSString *)path NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initFileURLWithPath:isDirectory:" "initFileURLWithPath:${1:(NSString *)path} isDirectory:${2:(BOOL)isDir} NS_AVAILABLE(10_5, 2_0) NS_DESIGNATED_INITIALIZER" "initFileURLWithPath:(NSString *)path isDirectory:(BOOL)isDir NS_AVAILABLE(10_5, 2_0) NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithScheme:host:path:" "initWithScheme:${1:(NSString *)scheme} host:${2:(NSString *)host} path:${3:(NSString *)path}" "initWithScheme:(NSString *)scheme host:(NSString *)host path:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("redoMenuTitleForUndoActionName:" "redoMenuTitleForUndoActionName:${1:(NSString *)actionName}" "redoMenuTitleForUndoActionName:(NSString *)actionName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("undoMenuTitleForUndoActionName:" "undoMenuTitleForUndoActionName:${1:(NSString *)actionName}" "undoMenuTitleForUndoActionName:(NSString *)actionName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setActionName:" "setActionName:${1:(NSString *)actionName}" "setActionName:(NSString *)actionName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setActionIsDiscardable:" "setActionIsDiscardable:${1:(BOOL)discardable} NS_AVAILABLE(10_7, 5_0)" "setActionIsDiscardable:(BOOL)discardable NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("prepareWithInvocationTarget:" "prepareWithInvocationTarget:${1:(id)target}" "prepareWithInvocationTarget:(id)target" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("registerUndoWithTarget:selector:object:" "registerUndoWithTarget:${1:(id)target} selector:${2:(SEL)selector} object:${3:(id)anObject}" "registerUndoWithTarget:(id)target selector:(SEL)selector object:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAllActionsWithTarget:" "removeAllActionsWithTarget:${1:(id)target}" "removeAllActionsWithTarget:(id)target" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAllActions" "removeAllActions" "removeAllActions" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("undoNestedGroup" "undoNestedGroup" "undoNestedGroup" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("redo" "redo" "redo" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("undo" "undo" "undo" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enableUndoRegistration" "enableUndoRegistration" "enableUndoRegistration" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("disableUndoRegistration" "disableUndoRegistration" "disableUndoRegistration" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("endUndoGrouping" "endUndoGrouping" "endUndoGrouping" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("beginUndoGrouping" "beginUndoGrouping" "beginUndoGrouping" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("synchronize" "synchronize" "synchronize" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setBool:forKey:" "setBool:${1:(BOOL)value} forKey:${2:(NSString *)aKey}" "setBool:(BOOL)value forKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDouble:forKey:" "setDouble:${1:(double)value} forKey:${2:(NSString *)aKey}" "setDouble:(double)value forKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setLongLong:forKey:" "setLongLong:${1:(long long)value} forKey:${2:(NSString *)aKey}" "setLongLong:(long long)value forKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDictionary:forKey:" "setDictionary:${1:(NSDictionary *)aDictionary} forKey:${2:(NSString *)aKey}" "setDictionary:(NSDictionary *)aDictionary forKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setArray:forKey:" "setArray:${1:(NSArray *)anArray} forKey:${2:(NSString *)aKey}" "setArray:(NSArray *)anArray forKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setData:forKey:" "setData:${1:(NSData *)aData} forKey:${2:(NSString *)aKey}" "setData:(NSData *)aData forKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setString:forKey:" "setString:${1:(NSString *)aString} forKey:${2:(NSString *)aKey}" "setString:(NSString *)aString forKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("boolForKey:" "boolForKey:${1:(NSString *)aKey}" "boolForKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("doubleForKey:" "doubleForKey:${1:(NSString *)aKey}" "doubleForKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("longLongForKey:" "longLongForKey:${1:(NSString *)aKey}" "longLongForKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataForKey:" "dataForKey:${1:(NSString *)aKey}" "dataForKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryForKey:" "dictionaryForKey:${1:(NSString *)aKey}" "dictionaryForKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayForKey:" "arrayForKey:${1:(NSString *)aKey}" "arrayForKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringForKey:" "stringForKey:${1:(NSString *)aKey}" "stringForKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectForKey:" "removeObjectForKey:${1:(NSString *)aKey}" "removeObjectForKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setObject:forKey:" "setObject:${1:(id)anObject} forKey:${2:(NSString *)aKey}" "setObject:(id)anObject forKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectForKey:" "objectForKey:${1:(NSString *)aKey}" "objectForKey:(NSString *)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("defaultStore" "defaultStore" "defaultStore" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("timeZoneWithAbbreviation:" "timeZoneWithAbbreviation:${1:(NSString *)abbreviation}" "timeZoneWithAbbreviation:(NSString *)abbreviation" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("timeZoneForSecondsFromGMT:" "timeZoneForSecondsFromGMT:${1:(NSInteger)seconds}" "timeZoneForSecondsFromGMT:(NSInteger)seconds" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithName:data:" "initWithName:${1:(NSString *)tzName} data:${2:(NSData *)aData}" "initWithName:(NSString *)tzName data:(NSData *)aData" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithName:" "initWithName:${1:(NSString *)tzName}" "initWithName:(NSString *)tzName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("timeZoneWithName:data:" "timeZoneWithName:${1:(NSString *)tzName} data:${2:(NSData *)aData}" "timeZoneWithName:(NSString *)tzName data:(NSData *)aData" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("timeZoneWithName:" "timeZoneWithName:${1:(NSString *)tzName}" "timeZoneWithName:(NSString *)tzName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedName:locale:" "localizedName:${1:(NSTimeZoneNameStyle)style} locale:${2:(NSLocale *)locale} NS_AVAILABLE(10_5, 2_0)" "localizedName:(NSTimeZoneNameStyle)style locale:(NSLocale *)locale NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToTimeZone:" "isEqualToTimeZone:${1:(NSTimeZone *)aTimeZone}" "isEqualToTimeZone:(NSTimeZone *)aTimeZone" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("timeZoneDataVersion NS_AVAILABLE(10_6, 4_0)" "timeZoneDataVersion NS_AVAILABLE(10_6, 4_0)" "timeZoneDataVersion NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setAbbreviationDictionary:" "setAbbreviationDictionary:${1:(NSDictionary *)dict} NS_AVAILABLE(10_6, 4_0)" "setAbbreviationDictionary:(NSDictionary *)dict NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("abbreviationDictionary" "abbreviationDictionary" "abbreviationDictionary" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("knownTimeZoneNames" "knownTimeZoneNames" "knownTimeZoneNames" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localTimeZone" "localTimeZone" "localTimeZone" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDefaultTimeZone:" "setDefaultTimeZone:${1:(NSTimeZone *)aTimeZone}" "setDefaultTimeZone:(NSTimeZone *)aTimeZone" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("defaultTimeZone" "defaultTimeZone" "defaultTimeZone" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resetSystemTimeZone" "resetSystemTimeZone" "resetSystemTimeZone" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("systemTimeZone" "systemTimeZone" "systemTimeZone" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("nextDaylightSavingTimeTransitionAfterDate:" "nextDaylightSavingTimeTransitionAfterDate:${1:(NSDate *)aDate} NS_AVAILABLE(10_5, 2_0)" "nextDaylightSavingTimeTransitionAfterDate:(NSDate *)aDate NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("daylightSavingTimeOffsetForDate:" "daylightSavingTimeOffsetForDate:${1:(NSDate *)aDate} NS_AVAILABLE(10_5, 2_0)" "daylightSavingTimeOffsetForDate:(NSDate *)aDate NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isDaylightSavingTimeForDate:" "isDaylightSavingTimeForDate:${1:(NSDate *)aDate}" "isDaylightSavingTimeForDate:(NSDate *)aDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("abbreviationForDate:" "abbreviationForDate:${1:(NSDate *)aDate}" "abbreviationForDate:(NSDate *)aDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("secondsFromGMTForDate:" "secondsFromGMTForDate:${1:(NSDate *)aDate}" "secondsFromGMTForDate:(NSDate *)aDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("invalidate" "invalidate" "invalidate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fire" "fire" "fire" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithFireDate:interval:target:selector:userInfo:repeats:" "initWithFireDate:${1:(NSDate *)date} interval:${2:(NSTimeInterval)ti} target:${3:(id)t} selector:${4:(SEL)s} userInfo:${5:(id)ui} repeats:${6:(BOOL)rep} NS_DESIGNATED_INITIALIZER" "initWithFireDate:(NSDate *)date interval:(NSTimeInterval)ti target:(id)t selector:(SEL)s userInfo:(id)ui repeats:(BOOL)rep NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:" "scheduledTimerWithTimeInterval:${1:(NSTimeInterval)ti} target:${2:(id)aTarget} selector:${3:(SEL)aSelector} userInfo:${4:(id)userInfo} repeats:${5:(BOOL)yesOrNo}" "scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("timerWithTimeInterval:target:selector:userInfo:repeats:" "timerWithTimeInterval:${1:(NSTimeInterval)ti} target:${2:(id)aTarget} selector:${3:(SEL)aSelector} userInfo:${4:(id)userInfo} repeats:${5:(BOOL)yesOrNo}" "timerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scheduledTimerWithTimeInterval:invocation:repeats:" "scheduledTimerWithTimeInterval:${1:(NSTimeInterval)ti} invocation:${2:(NSInvocation *)invocation} repeats:${3:(BOOL)yesOrNo}" "scheduledTimerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation *)invocation repeats:(BOOL)yesOrNo" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("timerWithTimeInterval:invocation:repeats:" "timerWithTimeInterval:${1:(NSTimeInterval)ti} invocation:${2:(NSInvocation *)invocation} repeats:${3:(BOOL)yesOrNo}" "timerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation *)invocation repeats:(BOOL)yesOrNo" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("performSelectorInBackground:withObject:" "performSelectorInBackground:${1:(SEL)aSelector} withObject:${2:(id)arg} NS_AVAILABLE(10_5, 2_0)" "performSelectorInBackground:(SEL)aSelector withObject:(id)arg NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("performSelector:onThread:withObject:waitUntilDone:" "performSelector:${1:(SEL)aSelector} onThread:${2:(NSThread *)thr} withObject:${3:(id)arg} waitUntilDone:${4:(BOOL)wait} NS_AVAILABLE(10_5, 2_0)" "performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(id)arg waitUntilDone:(BOOL)wait NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("performSelector:onThread:withObject:waitUntilDone:modes:" "performSelector:${1:(SEL)aSelector} onThread:${2:(NSThread *)thr} withObject:${3:(id)arg} waitUntilDone:${4:(BOOL)wait} modes:${5:(NSArray *)array} NS_AVAILABLE(10_5, 2_0)" "performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(id)arg waitUntilDone:(BOOL)wait modes:(NSArray *)array NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("performSelectorOnMainThread:withObject:waitUntilDone:" "performSelectorOnMainThread:${1:(SEL)aSelector} withObject:${2:(id)arg} waitUntilDone:${3:(BOOL)wait}" "performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("performSelectorOnMainThread:withObject:waitUntilDone:modes:" "performSelectorOnMainThread:${1:(SEL)aSelector} withObject:${2:(id)arg} waitUntilDone:${3:(BOOL)wait} modes:${4:(NSArray *)array}" "performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait modes:(NSArray *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("main NS_AVAILABLE(10_5, 2_0)" "main NS_AVAILABLE(10_5, 2_0)" "main NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("start NS_AVAILABLE(10_5, 2_0)" "start NS_AVAILABLE(10_5, 2_0)" "start NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancel NS_AVAILABLE(10_5, 2_0)" "cancel NS_AVAILABLE(10_5, 2_0)" "cancel NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithTarget:selector:object:" "initWithTarget:${1:(id)target} selector:${2:(SEL)selector} object:${3:(id)argument} NS_AVAILABLE(10_5, 2_0)" "initWithTarget:(id)target selector:(SEL)selector object:(id)argument NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_AVAILABLE(10_5, 2_0) NS_DESIGNATED_INITIALIZER" "init NS_AVAILABLE(10_5, 2_0) NS_DESIGNATED_INITIALIZER" "init NS_AVAILABLE(10_5, 2_0) NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mainThread NS_AVAILABLE(10_5, 2_0)" "mainThread NS_AVAILABLE(10_5, 2_0)" "mainThread NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isMainThread NS_AVAILABLE(10_5, 2_0)" "isMainThread NS_AVAILABLE(10_5, 2_0)" "isMainThread NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("callStackSymbols NS_AVAILABLE(10_6, 4_0)" "callStackSymbols NS_AVAILABLE(10_6, 4_0)" "callStackSymbols NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("callStackReturnAddresses NS_AVAILABLE(10_5, 2_0)" "callStackReturnAddresses NS_AVAILABLE(10_5, 2_0)" "callStackReturnAddresses NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setThreadPriority:" "setThreadPriority:${1:(double)p}" "setThreadPriority:(double)p" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("threadPriority" "threadPriority" "threadPriority" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("exit" "exit" "exit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sleepForTimeInterval:" "sleepForTimeInterval:${1:(NSTimeInterval)ti}" "sleepForTimeInterval:(NSTimeInterval)ti" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sleepUntilDate:" "sleepUntilDate:${1:(NSDate *)date}" "sleepUntilDate:(NSDate *)date" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isMultiThreaded" "isMultiThreaded" "isMultiThreaded" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("detachNewThreadSelector:toTarget:withObject:" "detachNewThreadSelector:${1:(SEL)selector} toTarget:${2:(id)target} withObject:${3:(id)argument}" "detachNewThreadSelector:(SEL)selector toTarget:(id)target withObject:(id)argument" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("currentThread" "currentThread" "currentThread" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("transitInformationCheckingResultWithRange:components:" "transitInformationCheckingResultWithRange:${1:(NSRange)range} components:${2:(NSDictionary *)components}    NS_AVAILABLE(10_7, 4_0)" "transitInformationCheckingResultWithRange:(NSRange)range components:(NSDictionary *)components    NS_AVAILABLE(10_7, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("phoneNumberCheckingResultWithRange:phoneNumber:" "phoneNumberCheckingResultWithRange:${1:(NSRange)range} phoneNumber:${2:(NSString *)phoneNumber}             NS_AVAILABLE(10_7, 4_0)" "phoneNumberCheckingResultWithRange:(NSRange)range phoneNumber:(NSString *)phoneNumber             NS_AVAILABLE(10_7, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("regularExpressionCheckingResultWithRanges:count:regularExpression:" "regularExpressionCheckingResultWithRanges:${1:(NSRangePointer)ranges} count:${2:(NSUInteger)count} regularExpression:${3:(NSRegularExpression *)regularExpression}   NS_AVAILABLE(10_7, 4_0)" "regularExpressionCheckingResultWithRanges:(NSRangePointer)ranges count:(NSUInteger)count regularExpression:(NSRegularExpression *)regularExpression   NS_AVAILABLE(10_7, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("correctionCheckingResultWithRange:replacementString:alternativeStrings:" "correctionCheckingResultWithRange:${1:(NSRange)range} replacementString:${2:(NSString *)replacementString} alternativeStrings:${3:(NSArray *)alternativeStrings}     NS_AVAILABLE(10_9, 7_0)" "correctionCheckingResultWithRange:(NSRange)range replacementString:(NSString *)replacementString alternativeStrings:(NSArray *)alternativeStrings     NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("correctionCheckingResultWithRange:replacementString:" "correctionCheckingResultWithRange:${1:(NSRange)range} replacementString:${2:(NSString *)replacementString}" "correctionCheckingResultWithRange:(NSRange)range replacementString:(NSString *)replacementString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replacementCheckingResultWithRange:replacementString:" "replacementCheckingResultWithRange:${1:(NSRange)range} replacementString:${2:(NSString *)replacementString}" "replacementCheckingResultWithRange:(NSRange)range replacementString:(NSString *)replacementString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dashCheckingResultWithRange:replacementString:" "dashCheckingResultWithRange:${1:(NSRange)range} replacementString:${2:(NSString *)replacementString}" "dashCheckingResultWithRange:(NSRange)range replacementString:(NSString *)replacementString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("quoteCheckingResultWithRange:replacementString:" "quoteCheckingResultWithRange:${1:(NSRange)range} replacementString:${2:(NSString *)replacementString}" "quoteCheckingResultWithRange:(NSRange)range replacementString:(NSString *)replacementString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("linkCheckingResultWithRange:URL:" "linkCheckingResultWithRange:${1:(NSRange)range} URL:${2:(NSURL *)url}" "linkCheckingResultWithRange:(NSRange)range URL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addressCheckingResultWithRange:components:" "addressCheckingResultWithRange:${1:(NSRange)range} components:${2:(NSDictionary *)components}" "addressCheckingResultWithRange:(NSRange)range components:(NSDictionary *)components" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateCheckingResultWithRange:date:timeZone:duration:" "dateCheckingResultWithRange:${1:(NSRange)range} date:${2:(NSDate *)date} timeZone:${3:(NSTimeZone *)timeZone} duration:${4:(NSTimeInterval)duration}" "dateCheckingResultWithRange:(NSRange)range date:(NSDate *)date timeZone:(NSTimeZone *)timeZone duration:(NSTimeInterval)duration" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateCheckingResultWithRange:date:" "dateCheckingResultWithRange:${1:(NSRange)range} date:${2:(NSDate *)date}" "dateCheckingResultWithRange:(NSRange)range date:(NSDate *)date" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("grammarCheckingResultWithRange:details:" "grammarCheckingResultWithRange:${1:(NSRange)range} details:${2:(NSArray *)details}" "grammarCheckingResultWithRange:(NSRange)range details:(NSArray *)details" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("spellCheckingResultWithRange:" "spellCheckingResultWithRange:${1:(NSRange)range}" "spellCheckingResultWithRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orthographyCheckingResultWithRange:orthography:" "orthographyCheckingResultWithRange:${1:(NSRange)range} orthography:${2:(NSOrthography *)orthography}" "orthographyCheckingResultWithRange:(NSRange)range orthography:(NSOrthography *)orthography" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resultByAdjustingRangesWithOffset:" "resultByAdjustingRangesWithOffset:${1:(NSInteger)offset} NS_AVAILABLE(10_7, 5_0)" "resultByAdjustingRangesWithOffset:(NSInteger)offset NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeAtIndex:" "rangeAtIndex:${1:(NSUInteger)idx} NS_AVAILABLE(10_7, 4_0)" "rangeAtIndex:(NSUInteger)idx NS_AVAILABLE(10_7, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getCharacters:" "getCharacters:${1:(unichar *)buffer}" "getCharacters:(unichar *)buffer" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithCString:" "stringWithCString:${1:(const char *)bytes} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "stringWithCString:(const char *)bytes NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithCString:length:" "stringWithCString:${1:(const char *)bytes} length:${2:(NSUInteger)length} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "stringWithCString:(const char *)bytes length:(NSUInteger)length NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCString:" "initWithCString:${1:(const char *)bytes} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "initWithCString:(const char *)bytes NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCString:length:" "initWithCString:${1:(const char *)bytes} length:${2:(NSUInteger)length} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "initWithCString:(const char *)bytes length:(NSUInteger)length NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCStringNoCopy:length:freeWhenDone:" "initWithCStringNoCopy:${1:(char *)bytes} length:${2:(NSUInteger)length} freeWhenDone:${3:(BOOL)freeBuffer} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "initWithCStringNoCopy:(char *)bytes length:(NSUInteger)length freeWhenDone:(BOOL)freeBuffer NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithContentsOfURL:" "stringWithContentsOfURL:${1:(NSURL *)url} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "stringWithContentsOfURL:(NSURL *)url NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithContentsOfFile:" "stringWithContentsOfFile:${1:(NSString *)path} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "stringWithContentsOfFile:(NSString *)path NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfURL:" "initWithContentsOfURL:${1:(NSURL *)url} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "initWithContentsOfURL:(NSURL *)url NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfFile:" "initWithContentsOfFile:${1:(NSString *)path} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "initWithContentsOfFile:(NSString *)path NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToURL:atomically:" "writeToURL:${1:(NSURL *)url} atomically:${2:(BOOL)atomically} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "writeToURL:(NSURL *)url atomically:(BOOL)atomically NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToFile:atomically:" "writeToFile:${1:(NSString *)path} atomically:${2:(BOOL)useAuxiliaryFile} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getCString:maxLength:range:remainingRange:" "getCString:${1:(char *)bytes} maxLength:${2:(NSUInteger)maxLength} range:${3:(NSRange)aRange} remainingRange:${4:(NSRangePointer)leftoverRange} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "getCString:(char *)bytes maxLength:(NSUInteger)maxLength range:(NSRange)aRange remainingRange:(NSRangePointer)leftoverRange NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getCString:maxLength:" "getCString:${1:(char *)bytes} maxLength:${2:(NSUInteger)maxLength} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "getCString:(char *)bytes maxLength:(NSUInteger)maxLength NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getCString:" "getCString:${1:(char *)bytes} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "getCString:(char *)bytes NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cStringLength NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "cStringLength NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "cStringLength NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lossyCString NS_RETURNS_INNER_POINTER NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "lossyCString NS_RETURNS_INNER_POINTER NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "lossyCString NS_RETURNS_INNER_POINTER NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cString NS_RETURNS_INNER_POINTER NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "cString NS_RETURNS_INNER_POINTER NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "cString NS_RETURNS_INNER_POINTER NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("propertyListFromStringsFileFormat" "propertyListFromStringsFileFormat" "propertyListFromStringsFileFormat" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("propertyList" "propertyList" "propertyList" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:" "stringEncodingForData:${1:(NSData *)data}
                          encodingOptions:${2:(NSDictionary *)opts}
                          convertedString:${3:(NSString **)string}
                      usedLossyConversion:${4:(BOOL *)usedLossyConversion} NS_AVAILABLE(10_10, 8_0)" "stringEncodingForData:(NSData *)data
                          encodingOptions:(NSDictionary *)opts
                          convertedString:(NSString **)string
                      usedLossyConversion:(BOOL *)usedLossyConversion NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceOccurrencesOfString:withString:options:range:" "replaceOccurrencesOfString:${1:(NSString *)target} withString:${2:(NSString *)replacement} options:${3:(NSStringCompareOptions)options} range:${4:(NSRange)searchRange}" "replaceOccurrencesOfString:(NSString *)target withString:(NSString *)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithCapacity:" "stringWithCapacity:${1:(NSUInteger)capacity}" "stringWithCapacity:(NSUInteger)capacity" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCapacity:" "initWithCapacity:${1:(NSUInteger)capacity}" "initWithCapacity:(NSUInteger)capacity" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setString:" "setString:${1:(NSString *)aString}" "setString:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("appendFormat:" "appendFormat:${1:(NSString *)format}, ... NS_FORMAT_FUNCTION(1,2)" "appendFormat:(NSString *)format, ... NS_FORMAT_FUNCTION(1,2)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("appendString:" "appendString:${1:(NSString *)aString}" "appendString:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("deleteCharactersInRange:" "deleteCharactersInRange:${1:(NSRange)range}" "deleteCharactersInRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("insertString:atIndex:" "insertString:${1:(NSString *)aString} atIndex:${2:(NSUInteger)loc}" "insertString:(NSString *)aString atIndex:(NSUInteger)loc" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceCharactersInRange:withString:" "replaceCharactersInRange:${1:(NSRange)range} withString:${2:(NSString *)aString}" "replaceCharactersInRange:(NSRange)range withString:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToFile:atomically:encoding:error:" "writeToFile:${1:(NSString *)path} atomically:${2:(BOOL)useAuxiliaryFile} encoding:${3:(NSStringEncoding)enc} error:${4:(NSError **)error}" "writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToURL:atomically:encoding:error:" "writeToURL:${1:(NSURL *)url} atomically:${2:(BOOL)useAuxiliaryFile} encoding:${3:(NSStringEncoding)enc} error:${4:(NSError **)error}" "writeToURL:(NSURL *)url atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithContentsOfFile:usedEncoding:error:" "stringWithContentsOfFile:${1:(NSString *)path} usedEncoding:${2:(NSStringEncoding *)enc} error:${3:(NSError **)error}" "stringWithContentsOfFile:(NSString *)path usedEncoding:(NSStringEncoding *)enc error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithContentsOfURL:usedEncoding:error:" "stringWithContentsOfURL:${1:(NSURL *)url} usedEncoding:${2:(NSStringEncoding *)enc} error:${3:(NSError **)error}" "stringWithContentsOfURL:(NSURL *)url usedEncoding:(NSStringEncoding *)enc error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfFile:usedEncoding:error:" "initWithContentsOfFile:${1:(NSString *)path} usedEncoding:${2:(NSStringEncoding *)enc} error:${3:(NSError **)error}" "initWithContentsOfFile:(NSString *)path usedEncoding:(NSStringEncoding *)enc error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfURL:usedEncoding:error:" "initWithContentsOfURL:${1:(NSURL *)url} usedEncoding:${2:(NSStringEncoding *)enc} error:${3:(NSError **)error}" "initWithContentsOfURL:(NSURL *)url usedEncoding:(NSStringEncoding *)enc error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithContentsOfFile:encoding:error:" "stringWithContentsOfFile:${1:(NSString *)path} encoding:${2:(NSStringEncoding)enc} error:${3:(NSError **)error}" "stringWithContentsOfFile:(NSString *)path encoding:(NSStringEncoding)enc error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithContentsOfURL:encoding:error:" "stringWithContentsOfURL:${1:(NSURL *)url} encoding:${2:(NSStringEncoding)enc} error:${3:(NSError **)error}" "stringWithContentsOfURL:(NSURL *)url encoding:(NSStringEncoding)enc error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfFile:encoding:error:" "initWithContentsOfFile:${1:(NSString *)path} encoding:${2:(NSStringEncoding)enc} error:${3:(NSError **)error}" "initWithContentsOfFile:(NSString *)path encoding:(NSStringEncoding)enc error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfURL:encoding:error:" "initWithContentsOfURL:${1:(NSURL *)url} encoding:${2:(NSStringEncoding)enc} error:${3:(NSError **)error}" "initWithContentsOfURL:(NSURL *)url encoding:(NSStringEncoding)enc error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithCString:encoding:" "stringWithCString:${1:(const char *)cString} encoding:${2:(NSStringEncoding)enc}" "stringWithCString:(const char *)cString encoding:(NSStringEncoding)enc" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCString:encoding:" "initWithCString:${1:(const char *)nullTerminatedCString} encoding:${2:(NSStringEncoding)encoding}" "initWithCString:(const char *)nullTerminatedCString encoding:(NSStringEncoding)encoding" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedStringWithFormat:" "localizedStringWithFormat:${1:(NSString *)format}, ... NS_FORMAT_FUNCTION(1,2)" "localizedStringWithFormat:(NSString *)format, ... NS_FORMAT_FUNCTION(1,2)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithFormat:" "stringWithFormat:${1:(NSString *)format}, ... NS_FORMAT_FUNCTION(1,2)" "stringWithFormat:(NSString *)format, ... NS_FORMAT_FUNCTION(1,2)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithUTF8String:" "stringWithUTF8String:${1:(const char *)nullTerminatedCString}" "stringWithUTF8String:(const char *)nullTerminatedCString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithCharacters:length:" "stringWithCharacters:${1:(const unichar *)characters} length:${2:(NSUInteger)length}" "stringWithCharacters:(const unichar *)characters length:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithString:" "stringWithString:${1:(NSString *)string}" "stringWithString:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("string" "string" "string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithBytesNoCopy:length:encoding:freeWhenDone:" "initWithBytesNoCopy:${1:(void *)bytes} length:${2:(NSUInteger)len} encoding:${3:(NSStringEncoding)encoding} freeWhenDone:${4:(BOOL)freeBuffer}" "initWithBytesNoCopy:(void *)bytes length:(NSUInteger)len encoding:(NSStringEncoding)encoding freeWhenDone:(BOOL)freeBuffer" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithBytes:length:encoding:" "initWithBytes:${1:(const void *)bytes} length:${2:(NSUInteger)len} encoding:${3:(NSStringEncoding)encoding}" "initWithBytes:(const void *)bytes length:(NSUInteger)len encoding:(NSStringEncoding)encoding" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithData:encoding:" "initWithData:${1:(NSData *)data} encoding:${2:(NSStringEncoding)encoding}" "initWithData:(NSData *)data encoding:(NSStringEncoding)encoding" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithFormat:locale:arguments:" "initWithFormat:${1:(NSString *)format} locale:${2:(id)locale} arguments:${3:(va_list)argList} NS_FORMAT_FUNCTION(1,0)" "initWithFormat:(NSString *)format locale:(id)locale arguments:(va_list)argList NS_FORMAT_FUNCTION(1,0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithFormat:locale:" "initWithFormat:${1:(NSString *)format} locale:${2:(id)locale}, ... NS_FORMAT_FUNCTION(1,3)" "initWithFormat:(NSString *)format locale:(id)locale, ... NS_FORMAT_FUNCTION(1,3)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithFormat:arguments:" "initWithFormat:${1:(NSString *)format} arguments:${2:(va_list)argList} NS_FORMAT_FUNCTION(1,0)" "initWithFormat:(NSString *)format arguments:(va_list)argList NS_FORMAT_FUNCTION(1,0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithFormat:" "initWithFormat:${1:(NSString *)format}, ... NS_FORMAT_FUNCTION(1,2)" "initWithFormat:(NSString *)format, ... NS_FORMAT_FUNCTION(1,2)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithString:" "initWithString:${1:(NSString *)aString}" "initWithString:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithUTF8String:" "initWithUTF8String:${1:(const char *)nullTerminatedCString}" "initWithUTF8String:(const char *)nullTerminatedCString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCharacters:length:" "initWithCharacters:${1:(const unichar *)characters} length:${2:(NSUInteger)length}" "initWithCharacters:(const unichar *)characters length:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCharactersNoCopy:length:freeWhenDone:" "initWithCharactersNoCopy:${1:(unichar *)characters} length:${2:(NSUInteger)length} freeWhenDone:${3:(BOOL)freeBuffer}" "initWithCharactersNoCopy:(unichar *)characters length:(NSUInteger)length freeWhenDone:(BOOL)freeBuffer" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedNameOfStringEncoding:" "localizedNameOfStringEncoding:${1:(NSStringEncoding)encoding}" "localizedNameOfStringEncoding:(NSStringEncoding)encoding" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("availableStringEncodings" "availableStringEncodings" "availableStringEncodings" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("defaultCStringEncoding" "defaultCStringEncoding" "defaultCStringEncoding" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByReplacingCharactersInRange:withString:" "stringByReplacingCharactersInRange:${1:(NSRange)range} withString:${2:(NSString *)replacement} NS_AVAILABLE(10_5, 2_0)" "stringByReplacingCharactersInRange:(NSRange)range withString:(NSString *)replacement NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByReplacingOccurrencesOfString:withString:" "stringByReplacingOccurrencesOfString:${1:(NSString *)target} withString:${2:(NSString *)replacement} NS_AVAILABLE(10_5, 2_0)" "stringByReplacingOccurrencesOfString:(NSString *)target withString:(NSString *)replacement NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByReplacingOccurrencesOfString:withString:options:range:" "stringByReplacingOccurrencesOfString:${1:(NSString *)target} withString:${2:(NSString *)replacement} options:${3:(NSStringCompareOptions)options} range:${4:(NSRange)searchRange} NS_AVAILABLE(10_5, 2_0)" "stringByReplacingOccurrencesOfString:(NSString *)target withString:(NSString *)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByFoldingWithOptions:locale:" "stringByFoldingWithOptions:${1:(NSStringCompareOptions)options} locale:${2:(NSLocale *)locale} NS_AVAILABLE(10_5, 2_0)" "stringByFoldingWithOptions:(NSStringCompareOptions)options locale:(NSLocale *)locale NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lengthOfBytesUsingEncoding:" "lengthOfBytesUsingEncoding:${1:(NSStringEncoding)enc}" "lengthOfBytesUsingEncoding:(NSStringEncoding)enc" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("maximumLengthOfBytesUsingEncoding:" "maximumLengthOfBytesUsingEncoding:${1:(NSStringEncoding)enc}" "maximumLengthOfBytesUsingEncoding:(NSStringEncoding)enc" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getBytes:maxLength:usedLength:encoding:options:range:remainingRange:" "getBytes:${1:(void *)buffer} maxLength:${2:(NSUInteger)maxBufferCount} usedLength:${3:(NSUInteger *)usedBufferCount} encoding:${4:(NSStringEncoding)encoding} options:${5:(NSStringEncodingConversionOptions)options} range:${6:(NSRange)range} remainingRange:${7:(NSRangePointer)leftover}" "getBytes:(void *)buffer maxLength:(NSUInteger)maxBufferCount usedLength:(NSUInteger *)usedBufferCount encoding:(NSStringEncoding)encoding options:(NSStringEncodingConversionOptions)options range:(NSRange)range remainingRange:(NSRangePointer)leftover" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getCString:maxLength:encoding:" "getCString:${1:(char *)buffer} maxLength:${2:(NSUInteger)maxBufferCount} encoding:${3:(NSStringEncoding)encoding}" "getCString:(char *)buffer maxLength:(NSUInteger)maxBufferCount encoding:(NSStringEncoding)encoding" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cStringUsingEncoding:" "cStringUsingEncoding:${1:(NSStringEncoding)encoding} NS_RETURNS_INNER_POINTER" "cStringUsingEncoding:(NSStringEncoding)encoding NS_RETURNS_INNER_POINTER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("canBeConvertedToEncoding:" "canBeConvertedToEncoding:${1:(NSStringEncoding)encoding}" "canBeConvertedToEncoding:(NSStringEncoding)encoding" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataUsingEncoding:" "dataUsingEncoding:${1:(NSStringEncoding)encoding}" "dataUsingEncoding:(NSStringEncoding)encoding" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataUsingEncoding:allowLossyConversion:" "dataUsingEncoding:${1:(NSStringEncoding)encoding} allowLossyConversion:${2:(BOOL)lossy}" "dataUsingEncoding:(NSStringEncoding)encoding allowLossyConversion:(BOOL)lossy" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateLinesUsingBlock:" "enumerateLinesUsingBlock:${1:(void (^)(NSString *line, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateLinesUsingBlock:(void (^)(NSString *line, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateSubstringsInRange:options:usingBlock:" "enumerateSubstringsInRange:${1:(NSRange)range} options:${2:(NSStringEnumerationOptions)opts} usingBlock:${3:(void (^)(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateSubstringsInRange:(NSRange)range options:(NSStringEnumerationOptions)opts usingBlock:(void (^)(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("paragraphRangeForRange:" "paragraphRangeForRange:${1:(NSRange)range}" "paragraphRangeForRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getParagraphStart:end:contentsEnd:forRange:" "getParagraphStart:${1:(NSUInteger *)startPtr} end:${2:(NSUInteger *)parEndPtr} contentsEnd:${3:(NSUInteger *)contentsEndPtr} forRange:${4:(NSRange)range}" "getParagraphStart:(NSUInteger *)startPtr end:(NSUInteger *)parEndPtr contentsEnd:(NSUInteger *)contentsEndPtr forRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lineRangeForRange:" "lineRangeForRange:${1:(NSRange)range}" "lineRangeForRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getLineStart:end:contentsEnd:forRange:" "getLineStart:${1:(NSUInteger *)startPtr} end:${2:(NSUInteger *)lineEndPtr} contentsEnd:${3:(NSUInteger *)contentsEndPtr} forRange:${4:(NSRange)range}" "getLineStart:(NSUInteger *)startPtr end:(NSUInteger *)lineEndPtr contentsEnd:(NSUInteger *)contentsEndPtr forRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByPaddingToLength:withString:startingAtIndex:" "stringByPaddingToLength:${1:(NSUInteger)newLength} withString:${2:(NSString *)padString} startingAtIndex:${3:(NSUInteger)padIndex}" "stringByPaddingToLength:(NSUInteger)newLength withString:(NSString *)padString startingAtIndex:(NSUInteger)padIndex" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByTrimmingCharactersInSet:" "stringByTrimmingCharactersInSet:${1:(NSCharacterSet *)set}" "stringByTrimmingCharactersInSet:(NSCharacterSet *)set" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("capitalizedStringWithLocale:" "capitalizedStringWithLocale:${1:(NSLocale *)locale} NS_AVAILABLE(10_8, 6_0)" "capitalizedStringWithLocale:(NSLocale *)locale NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lowercaseStringWithLocale:" "lowercaseStringWithLocale:${1:(NSLocale *)locale} NS_AVAILABLE(10_8, 6_0)" "lowercaseStringWithLocale:(NSLocale *)locale NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("uppercaseStringWithLocale:" "uppercaseStringWithLocale:${1:(NSLocale *)locale} NS_AVAILABLE(10_8, 6_0)" "uppercaseStringWithLocale:(NSLocale *)locale NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("commonPrefixWithString:options:" "commonPrefixWithString:${1:(NSString *)aString} options:${2:(NSStringCompareOptions)mask}" "commonPrefixWithString:(NSString *)aString options:(NSStringCompareOptions)mask" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("componentsSeparatedByCharactersInSet:" "componentsSeparatedByCharactersInSet:${1:(NSCharacterSet *)separator} NS_AVAILABLE(10_5, 2_0)" "componentsSeparatedByCharactersInSet:(NSCharacterSet *)separator NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("componentsSeparatedByString:" "componentsSeparatedByString:${1:(NSString *)separator}" "componentsSeparatedByString:(NSString *)separator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByAppendingFormat:" "stringByAppendingFormat:${1:(NSString *)format}, ... NS_FORMAT_FUNCTION(1,2)" "stringByAppendingFormat:(NSString *)format, ... NS_FORMAT_FUNCTION(1,2)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByAppendingString:" "stringByAppendingString:${1:(NSString *)aString}" "stringByAppendingString:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfComposedCharacterSequencesForRange:" "rangeOfComposedCharacterSequencesForRange:${1:(NSRange)range} NS_AVAILABLE(10_5, 2_0)" "rangeOfComposedCharacterSequencesForRange:(NSRange)range NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfComposedCharacterSequenceAtIndex:" "rangeOfComposedCharacterSequenceAtIndex:${1:(NSUInteger)index}" "rangeOfComposedCharacterSequenceAtIndex:(NSUInteger)index" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfCharacterFromSet:options:range:" "rangeOfCharacterFromSet:${1:(NSCharacterSet *)aSet} options:${2:(NSStringCompareOptions)mask} range:${3:(NSRange)searchRange}" "rangeOfCharacterFromSet:(NSCharacterSet *)aSet options:(NSStringCompareOptions)mask range:(NSRange)searchRange" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfCharacterFromSet:options:" "rangeOfCharacterFromSet:${1:(NSCharacterSet *)aSet} options:${2:(NSStringCompareOptions)mask}" "rangeOfCharacterFromSet:(NSCharacterSet *)aSet options:(NSStringCompareOptions)mask" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfCharacterFromSet:" "rangeOfCharacterFromSet:${1:(NSCharacterSet *)aSet}" "rangeOfCharacterFromSet:(NSCharacterSet *)aSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfString:options:range:locale:" "rangeOfString:${1:(NSString *)aString} options:${2:(NSStringCompareOptions)mask} range:${3:(NSRange)searchRange} locale:${4:(NSLocale *)locale} NS_AVAILABLE(10_5, 2_0)" "rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)searchRange locale:(NSLocale *)locale NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfString:options:range:" "rangeOfString:${1:(NSString *)aString} options:${2:(NSStringCompareOptions)mask} range:${3:(NSRange)searchRange}" "rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)searchRange" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfString:options:" "rangeOfString:${1:(NSString *)aString} options:${2:(NSStringCompareOptions)mask}" "rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfString:" "rangeOfString:${1:(NSString *)aString}" "rangeOfString:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedCaseInsensitiveContainsString:" "localizedCaseInsensitiveContainsString:${1:(NSString *)aString} NS_AVAILABLE(10_10, 8_0)" "localizedCaseInsensitiveContainsString:(NSString *)aString NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("containsString:" "containsString:${1:(NSString *)aString} NS_AVAILABLE(10_10, 8_0)" "containsString:(NSString *)aString NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("hasSuffix:" "hasSuffix:${1:(NSString *)aString}" "hasSuffix:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("hasPrefix:" "hasPrefix:${1:(NSString *)aString}" "hasPrefix:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToString:" "isEqualToString:${1:(NSString *)aString}" "isEqualToString:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedStandardCompare:" "localizedStandardCompare:${1:(NSString *)string} NS_AVAILABLE(10_6, 4_0)" "localizedStandardCompare:(NSString *)string NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedCaseInsensitiveCompare:" "localizedCaseInsensitiveCompare:${1:(NSString *)string}" "localizedCaseInsensitiveCompare:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedCompare:" "localizedCompare:${1:(NSString *)string}" "localizedCompare:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("caseInsensitiveCompare:" "caseInsensitiveCompare:${1:(NSString *)string}" "caseInsensitiveCompare:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("compare:options:range:locale:" "compare:${1:(NSString *)string} options:${2:(NSStringCompareOptions)mask} range:${3:(NSRange)compareRange} locale:${4:(id)locale}" "compare:(NSString *)string options:(NSStringCompareOptions)mask range:(NSRange)compareRange locale:(id)locale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("compare:options:range:" "compare:${1:(NSString *)string} options:${2:(NSStringCompareOptions)mask} range:${3:(NSRange)compareRange}" "compare:(NSString *)string options:(NSStringCompareOptions)mask range:(NSRange)compareRange" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("compare:options:" "compare:${1:(NSString *)string} options:${2:(NSStringCompareOptions)mask}" "compare:(NSString *)string options:(NSStringCompareOptions)mask" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("compare:" "compare:${1:(NSString *)string}" "compare:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("substringWithRange:" "substringWithRange:${1:(NSRange)range}" "substringWithRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("substringToIndex:" "substringToIndex:${1:(NSUInteger)to}" "substringToIndex:(NSUInteger)to" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("substringFromIndex:" "substringFromIndex:${1:(NSUInteger)from}" "substringFromIndex:(NSUInteger)from" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getCharacters:range:" "getCharacters:${1:(unichar *)buffer} range:${2:(NSRange)aRange}" "getCharacters:(unichar *)buffer range:(NSRange)aRange" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("characterAtIndex:" "characterAtIndex:${1:(NSUInteger)index}" "characterAtIndex:(NSUInteger)index" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stream:handleEvent:" "stream:${1:(NSStream *)aStream} handleEvent:${2:(NSStreamEvent)eventCode}" "stream:(NSStream *)aStream handleEvent:(NSStreamEvent)eventCode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("outputStreamWithURL:append:" "outputStreamWithURL:${1:(NSURL *)url} append:${2:(BOOL)shouldAppend} NS_AVAILABLE(10_6, 4_0)" "outputStreamWithURL:(NSURL *)url append:(BOOL)shouldAppend NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("outputStreamToFileAtPath:append:" "outputStreamToFileAtPath:${1:(NSString *)path} append:${2:(BOOL)shouldAppend}" "outputStreamToFileAtPath:(NSString *)path append:(BOOL)shouldAppend" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("outputStreamToBuffer:capacity:" "outputStreamToBuffer:${1:(uint8_t *)buffer} capacity:${2:(NSUInteger)capacity}" "outputStreamToBuffer:(uint8_t *)buffer capacity:(NSUInteger)capacity" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("outputStreamToMemory" "outputStreamToMemory" "outputStreamToMemory" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initToFileAtPath:append:" "initToFileAtPath:${1:(NSString *)path} append:${2:(BOOL)shouldAppend}" "initToFileAtPath:(NSString *)path append:(BOOL)shouldAppend" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("inputStreamWithURL:" "inputStreamWithURL:${1:(NSURL *)url} NS_AVAILABLE(10_6, 4_0)" "inputStreamWithURL:(NSURL *)url NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("inputStreamWithFileAtPath:" "inputStreamWithFileAtPath:${1:(NSString *)path}" "inputStreamWithFileAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("inputStreamWithData:" "inputStreamWithData:${1:(NSData *)data}" "inputStreamWithData:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithFileAtPath:" "initWithFileAtPath:${1:(NSString *)path}" "initWithFileAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getBoundStreamsWithBufferSize:inputStream:outputStream:" "getBoundStreamsWithBufferSize:${1:(NSUInteger)bufferSize} inputStream:${2:(NSInputStream **)inputStream} outputStream:${3:(NSOutputStream **)outputStream} NS_AVAILABLE(10_10, 8_0)" "getBoundStreamsWithBufferSize:(NSUInteger)bufferSize inputStream:(NSInputStream **)inputStream outputStream:(NSOutputStream **)outputStream NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getStreamsToHost:port:inputStream:outputStream:getStreamsToHostWithName:port:inputStream:outputStream:" "getStreamsToHost:${1:(NSHost *)host} port:${2:(NSInteger)port} inputStream:${3:(NSInputStream **)inputStream} outputStream:${4:(NSOutputStream **)outputStream} NS_DEPRECATED_MAC(10_3, 10_10, \"Please use getStreamsToHostWithName:port:inputStream:outputStream: instead\302\224\")" "getStreamsToHost:(NSHost *)host port:(NSInteger)port inputStream:(NSInputStream **)inputStream outputStream:(NSOutputStream **)outputStream NS_DEPRECATED_MAC(10_3, 10_10, \"Please use getStreamsToHostWithName:port:inputStream:outputStream: instead\302\224\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getStreamsToHostWithName:port:inputStream:outputStream:" "getStreamsToHostWithName:${1:(NSString *)hostname} port:${2:(NSInteger)port} inputStream:${3:(NSInputStream **)inputStream} outputStream:${4:(NSOutputStream **)outputStream} NS_AVAILABLE(10_10, 8_0)" "getStreamsToHostWithName:(NSString *)hostname port:(NSInteger)port inputStream:(NSInputStream **)inputStream outputStream:(NSOutputStream **)outputStream NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithURL:append:" "initWithURL:${1:(NSURL *)url} append:${2:(BOOL)shouldAppend} NS_AVAILABLE(10_6, 4_0) NS_DESIGNATED_INITIALIZER" "initWithURL:(NSURL *)url append:(BOOL)shouldAppend NS_AVAILABLE(10_6, 4_0) NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initToBuffer:capacity:" "initToBuffer:${1:(uint8_t *)buffer} capacity:${2:(NSUInteger)capacity} NS_DESIGNATED_INITIALIZER" "initToBuffer:(uint8_t *)buffer capacity:(NSUInteger)capacity NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initToMemory NS_DESIGNATED_INITIALIZER" "initToMemory NS_DESIGNATED_INITIALIZER" "initToMemory NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("write:maxLength:" "write:${1:(const uint8_t *)buffer} maxLength:${2:(NSUInteger)len}" "write:(const uint8_t *)buffer maxLength:(NSUInteger)len" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithURL:" "initWithURL:${1:(NSURL *)url} NS_AVAILABLE(10_6, 4_0) NS_DESIGNATED_INITIALIZER" "initWithURL:(NSURL *)url NS_AVAILABLE(10_6, 4_0) NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithData:" "initWithData:${1:(NSData *)data} NS_DESIGNATED_INITIALIZER" "initWithData:(NSData *)data NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getBuffer:length:" "getBuffer:${1:(uint8_t **)buffer} length:${2:(NSUInteger *)len}" "getBuffer:(uint8_t **)buffer length:(NSUInteger *)len" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("read:maxLength:" "read:${1:(uint8_t *)buffer} maxLength:${2:(NSUInteger)len}" "read:(uint8_t *)buffer maxLength:(NSUInteger)len" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeFromRunLoop:forMode:" "removeFromRunLoop:${1:(NSRunLoop *)aRunLoop} forMode:${2:(NSString *)mode}" "removeFromRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scheduleInRunLoop:forMode:" "scheduleInRunLoop:${1:(NSRunLoop *)aRunLoop} forMode:${2:(NSString *)mode}" "scheduleInRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setProperty:forKey:" "setProperty:${1:(id)property} forKey:${2:(NSString *)key}" "setProperty:(id)property forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("propertyForKey:" "propertyForKey:${1:(NSString *)key}" "propertyForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("close" "close" "close" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("open" "open" "open" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortUsingDescriptors:" "sortUsingDescriptors:${1:(NSArray *)sortDescriptors} NS_AVAILABLE(10_7, 5_0)" "sortUsingDescriptors:(NSArray *)sortDescriptors NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortedArrayUsingDescriptors:" "sortedArrayUsingDescriptors:${1:(NSArray *)sortDescriptors} NS_AVAILABLE(10_7, 5_0)" "sortedArrayUsingDescriptors:(NSArray *)sortDescriptors NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortUsingDescriptors:" "sortUsingDescriptors:${1:(NSArray *)sortDescriptors}" "sortUsingDescriptors:(NSArray *)sortDescriptors" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortedArrayUsingDescriptors:" "sortedArrayUsingDescriptors:${1:(NSArray *)sortDescriptors}" "sortedArrayUsingDescriptors:(NSArray *)sortDescriptors" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortedArrayUsingDescriptors:" "sortedArrayUsingDescriptors:${1:(NSArray *)sortDescriptors} NS_AVAILABLE(10_6, 4_0)" "sortedArrayUsingDescriptors:(NSArray *)sortDescriptors NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("compareObject:toObject:" "compareObject:${1:(id)object1} toObject:${2:(id)object2}" "compareObject:(id)object1 toObject:(id)object2" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithKey:ascending:comparator:" "initWithKey:${1:(NSString *)key} ascending:${2:(BOOL)ascending} comparator:${3:(NSComparator)cmptr} NS_AVAILABLE(10_6, 4_0)" "initWithKey:(NSString *)key ascending:(BOOL)ascending comparator:(NSComparator)cmptr NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortDescriptorWithKey:ascending:comparator:" "sortDescriptorWithKey:${1:(NSString *)key} ascending:${2:(BOOL)ascending} comparator:${3:(NSComparator)cmptr} NS_AVAILABLE(10_6, 4_0)" "sortDescriptorWithKey:(NSString *)key ascending:(BOOL)ascending comparator:(NSComparator)cmptr NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("allowEvaluation NS_AVAILABLE(10_9, 7_0)" "allowEvaluation NS_AVAILABLE(10_9, 7_0)" "allowEvaluation NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithKey:ascending:selector:" "initWithKey:${1:(NSString *)key} ascending:${2:(BOOL)ascending} selector:${3:(SEL)selector}" "initWithKey:(NSString *)key ascending:(BOOL)ascending selector:(SEL)selector" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithKey:ascending:" "initWithKey:${1:(NSString *)key} ascending:${2:(BOOL)ascending}" "initWithKey:(NSString *)key ascending:(BOOL)ascending" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortDescriptorWithKey:ascending:selector:" "sortDescriptorWithKey:${1:(NSString *)key} ascending:${2:(BOOL)ascending} selector:${3:(SEL)selector} NS_AVAILABLE(10_6, 4_0)" "sortDescriptorWithKey:(NSString *)key ascending:(BOOL)ascending selector:(SEL)selector NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortDescriptorWithKey:ascending:" "sortDescriptorWithKey:${1:(NSString *)key} ascending:${2:(BOOL)ascending} NS_AVAILABLE(10_6, 4_0)" "sortDescriptorWithKey:(NSString *)key ascending:(BOOL)ascending NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObject:" "removeObject:${1:(id)object}" "removeObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObject:" "addObject:${1:(id)object}" "addObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectEnumerator" "objectEnumerator" "objectEnumerator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("countForObject:" "countForObject:${1:(id)object}" "countForObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithSet:" "initWithSet:${1:(NSSet *)set}" "initWithSet:(NSSet *)set" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithArray:" "initWithArray:${1:(NSArray *)array}" "initWithArray:(NSArray *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCapacity:" "initWithCapacity:${1:(NSUInteger)numItems}" "initWithCapacity:(NSUInteger)numItems" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setWithCapacity:" "setWithCapacity:${1:(NSUInteger)numItems}" "setWithCapacity:(NSUInteger)numItems" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setSet:" "setSet:${1:(NSSet *)otherSet}" "setSet:(NSSet *)otherSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unionSet:" "unionSet:${1:(NSSet *)otherSet}" "unionSet:(NSSet *)otherSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAllObjects" "removeAllObjects" "removeAllObjects" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("minusSet:" "minusSet:${1:(NSSet *)otherSet}" "minusSet:(NSSet *)otherSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("intersectSet:" "intersectSet:${1:(NSSet *)otherSet}" "intersectSet:(NSSet *)otherSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObjectsFromArray:" "addObjectsFromArray:${1:(NSArray *)array}" "addObjectsFromArray:(NSArray *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCapacity:" "initWithCapacity:${1:(NSUInteger)numItems} NS_DESIGNATED_INITIALIZER" "initWithCapacity:(NSUInteger)numItems NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObject:" "removeObject:${1:(id)object}" "removeObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObject:" "addObject:${1:(id)object}" "addObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithArray:" "initWithArray:${1:(NSArray *)array}" "initWithArray:(NSArray *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithSet:copyItems:" "initWithSet:${1:(NSSet *)set} copyItems:${2:(BOOL)flag}" "initWithSet:(NSSet *)set copyItems:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithSet:" "initWithSet:${1:(NSSet *)set}" "initWithSet:(NSSet *)set" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithObjects:" "initWithObjects:${1:(id)firstObj}, ... NS_REQUIRES_NIL_TERMINATION" "initWithObjects:(id)firstObj, ... NS_REQUIRES_NIL_TERMINATION" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setWithArray:" "setWithArray:${1:(NSArray *)array}" "setWithArray:(NSArray *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setWithSet:" "setWithSet:${1:(NSSet *)set}" "setWithSet:(NSSet *)set" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setWithObjects:" "setWithObjects:${1:(id)firstObj}, ... NS_REQUIRES_NIL_TERMINATION" "setWithObjects:(id)firstObj, ... NS_REQUIRES_NIL_TERMINATION" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setWithObjects:count:" "setWithObjects:${1:(const id [])objects} count:${2:(NSUInteger)cnt}" "setWithObjects:(const id [])objects count:(NSUInteger)cnt" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setWithObject:" "setWithObject:${1:(id)object}" "setWithObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("set" "set" "set" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectsWithOptions:passingTest:" "objectsWithOptions:${1:(NSEnumerationOptions)opts} passingTest:${2:(BOOL (^)(id obj, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectsPassingTest:" "objectsPassingTest:${1:(BOOL (^)(id obj, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateObjectsWithOptions:usingBlock:" "enumerateObjectsWithOptions:${1:(NSEnumerationOptions)opts} usingBlock:${2:(void (^)(id obj, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateObjectsUsingBlock:" "enumerateObjectsUsingBlock:${1:(void (^)(id obj, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setByAddingObjectsFromArray:" "setByAddingObjectsFromArray:${1:(NSArray *)other} NS_AVAILABLE(10_5, 2_0)" "setByAddingObjectsFromArray:(NSArray *)other NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setByAddingObjectsFromSet:" "setByAddingObjectsFromSet:${1:(NSSet *)other} NS_AVAILABLE(10_5, 2_0)" "setByAddingObjectsFromSet:(NSSet *)other NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setByAddingObject:" "setByAddingObject:${1:(id)anObject} NS_AVAILABLE(10_5, 2_0)" "setByAddingObject:(id)anObject NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("makeObjectsPerformSelector:withObject:" "makeObjectsPerformSelector:${1:(SEL)aSelector} withObject:${2:(id)argument}" "makeObjectsPerformSelector:(SEL)aSelector withObject:(id)argument" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("makeObjectsPerformSelector:" "makeObjectsPerformSelector:${1:(SEL)aSelector}" "makeObjectsPerformSelector:(SEL)aSelector" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isSubsetOfSet:" "isSubsetOfSet:${1:(NSSet *)otherSet}" "isSubsetOfSet:(NSSet *)otherSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToSet:" "isEqualToSet:${1:(NSSet *)otherSet}" "isEqualToSet:(NSSet *)otherSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("intersectsSet:" "intersectsSet:${1:(NSSet *)otherSet}" "intersectsSet:(NSSet *)otherSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("descriptionWithLocale:" "descriptionWithLocale:${1:(id)locale}" "descriptionWithLocale:(id)locale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("containsObject:" "containsObject:${1:(id)anObject}" "containsObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("anyObject" "anyObject" "anyObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithObjects:count:" "initWithObjects:${1:(const id [])objects} count:${2:(NSUInteger)cnt} NS_DESIGNATED_INITIALIZER" "initWithObjects:(const id [])objects count:(NSUInteger)cnt NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectEnumerator" "objectEnumerator" "objectEnumerator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("member:" "member:${1:(id)object}" "member:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedScannerWithString:" "localizedScannerWithString:${1:(NSString *)string}" "localizedScannerWithString:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scannerWithString:" "scannerWithString:${1:(NSString *)string}" "scannerWithString:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanUpToCharactersFromSet:intoString:" "scanUpToCharactersFromSet:${1:(NSCharacterSet *)set} intoString:${2:(NSString **)result}" "scanUpToCharactersFromSet:(NSCharacterSet *)set intoString:(NSString **)result" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanUpToString:intoString:" "scanUpToString:${1:(NSString *)string} intoString:${2:(NSString **)result}" "scanUpToString:(NSString *)string intoString:(NSString **)result" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanCharactersFromSet:intoString:" "scanCharactersFromSet:${1:(NSCharacterSet *)set} intoString:${2:(NSString **)result}" "scanCharactersFromSet:(NSCharacterSet *)set intoString:(NSString **)result" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanString:intoString:" "scanString:${1:(NSString *)string} intoString:${2:(NSString **)result}" "scanString:(NSString *)string intoString:(NSString **)result" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanHexDouble:" "scanHexDouble:${1:(double *)result} NS_AVAILABLE(10_5, 2_0)" "scanHexDouble:(double *)result NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanHexFloat:" "scanHexFloat:${1:(float *)result} NS_AVAILABLE(10_5, 2_0)" "scanHexFloat:(float *)result NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanHexLongLong:" "scanHexLongLong:${1:(unsigned long long *)result} NS_AVAILABLE(10_5, 2_0)" "scanHexLongLong:(unsigned long long *)result NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanHexInt:" "scanHexInt:${1:(unsigned *)result}" "scanHexInt:(unsigned *)result" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanDouble:" "scanDouble:${1:(double *)result}" "scanDouble:(double *)result" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanFloat:" "scanFloat:${1:(float *)result}" "scanFloat:(float *)result" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanUnsignedLongLong:" "scanUnsignedLongLong:${1:(unsigned long long *)result} NS_AVAILABLE(10_9, 7_0)" "scanUnsignedLongLong:(unsigned long long *)result NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanLongLong:" "scanLongLong:${1:(long long *)result}" "scanLongLong:(long long *)result" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanInteger:" "scanInteger:${1:(NSInteger *)result} NS_AVAILABLE(10_5, 2_0)" "scanInteger:(NSInteger *)result NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanInt:" "scanInt:${1:(int *)result}" "scanInt:(int *)result" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithString:" "initWithString:${1:(NSString *)string} NS_DESIGNATED_INITIALIZER" "initWithString:(NSString *)string NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancelPerformSelectorsWithTarget:" "cancelPerformSelectorsWithTarget:${1:(id)target}" "cancelPerformSelectorsWithTarget:(id)target" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancelPerformSelector:target:argument:" "cancelPerformSelector:${1:(SEL)aSelector} target:${2:(id)target} argument:${3:(id)arg}" "cancelPerformSelector:(SEL)aSelector target:(id)target argument:(id)arg" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("performSelector:target:argument:order:modes:" "performSelector:${1:(SEL)aSelector} target:${2:(id)target} argument:${3:(id)arg} order:${4:(NSUInteger)order} modes:${5:(NSArray *)modes}" "performSelector:(SEL)aSelector target:(id)target argument:(id)arg order:(NSUInteger)order modes:(NSArray *)modes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancelPreviousPerformRequestsWithTarget:" "cancelPreviousPerformRequestsWithTarget:${1:(id)aTarget}" "cancelPreviousPerformRequestsWithTarget:(id)aTarget" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancelPreviousPerformRequestsWithTarget:selector:object:" "cancelPreviousPerformRequestsWithTarget:${1:(id)aTarget} selector:${2:(SEL)aSelector} object:${3:(id)anArgument}" "cancelPreviousPerformRequestsWithTarget:(id)aTarget selector:(SEL)aSelector object:(id)anArgument" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("performSelector:withObject:afterDelay:" "performSelector:${1:(SEL)aSelector} withObject:${2:(id)anArgument} afterDelay:${3:(NSTimeInterval)delay}" "performSelector:(SEL)aSelector withObject:(id)anArgument afterDelay:(NSTimeInterval)delay" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("performSelector:withObject:afterDelay:inModes:" "performSelector:${1:(SEL)aSelector} withObject:${2:(id)anArgument} afterDelay:${3:(NSTimeInterval)delay} inModes:${4:(NSArray *)modes}" "performSelector:(SEL)aSelector withObject:(id)anArgument afterDelay:(NSTimeInterval)delay inModes:(NSArray *)modes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("configureAsServer NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "configureAsServer NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "configureAsServer NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("runMode:beforeDate:" "runMode:${1:(NSString *)mode} beforeDate:${2:(NSDate *)limitDate}" "runMode:(NSString *)mode beforeDate:(NSDate *)limitDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("runUntilDate:" "runUntilDate:${1:(NSDate *)limitDate}" "runUntilDate:(NSDate *)limitDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("run" "run" "run" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("acceptInputForMode:beforeDate:" "acceptInputForMode:${1:(NSString *)mode} beforeDate:${2:(NSDate *)limitDate}" "acceptInputForMode:(NSString *)mode beforeDate:(NSDate *)limitDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("limitDateForMode:" "limitDateForMode:${1:(NSString *)mode}" "limitDateForMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removePort:forMode:" "removePort:${1:(NSPort *)aPort} forMode:${2:(NSString *)mode}" "removePort:(NSPort *)aPort forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addPort:forMode:" "addPort:${1:(NSPort *)aPort} forMode:${2:(NSString *)mode}" "addPort:(NSPort *)aPort forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addTimer:forMode:" "addTimer:${1:(NSTimer *)timer} forMode:${2:(NSString *)mode}" "addTimer:(NSTimer *)timer forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getCFRunLoop CF_RETURNS_NOT_RETAINED" "getCFRunLoop CF_RETURNS_NOT_RETAINED" "getCFRunLoop CF_RETURNS_NOT_RETAINED" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mainRunLoop NS_AVAILABLE(10_5, 2_0)" "mainRunLoop NS_AVAILABLE(10_5, 2_0)" "mainRunLoop NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("currentRunLoop" "currentRunLoop" "currentRunLoop" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithTypes:error:" "initWithTypes:${1:(NSTextCheckingTypes)checkingTypes} error:${2:(NSError **)error} NS_DESIGNATED_INITIALIZER" "initWithTypes:(NSTextCheckingTypes)checkingTypes error:(NSError **)error NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataDetectorWithTypes:error:" "dataDetectorWithTypes:${1:(NSTextCheckingTypes)checkingTypes} error:${2:(NSError **)error}" "dataDetectorWithTypes:(NSTextCheckingTypes)checkingTypes error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("escapedTemplateForString:" "escapedTemplateForString:${1:(NSString *)string}" "escapedTemplateForString:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replacementStringForResult:inString:offset:template:" "replacementStringForResult:${1:(NSTextCheckingResult *)result} inString:${2:(NSString *)string} offset:${3:(NSInteger)offset} template:${4:(NSString *)templ}" "replacementStringForResult:(NSTextCheckingResult *)result inString:(NSString *)string offset:(NSInteger)offset template:(NSString *)templ" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceMatchesInString:options:range:withTemplate:" "replaceMatchesInString:${1:(NSMutableString *)string} options:${2:(NSMatchingOptions)options} range:${3:(NSRange)range} withTemplate:${4:(NSString *)templ}" "replaceMatchesInString:(NSMutableString *)string options:(NSMatchingOptions)options range:(NSRange)range withTemplate:(NSString *)templ" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByReplacingMatchesInString:options:range:withTemplate:" "stringByReplacingMatchesInString:${1:(NSString *)string} options:${2:(NSMatchingOptions)options} range:${3:(NSRange)range} withTemplate:${4:(NSString *)templ}" "stringByReplacingMatchesInString:(NSString *)string options:(NSMatchingOptions)options range:(NSRange)range withTemplate:(NSString *)templ" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfFirstMatchInString:options:range:" "rangeOfFirstMatchInString:${1:(NSString *)string} options:${2:(NSMatchingOptions)options} range:${3:(NSRange)range}" "rangeOfFirstMatchInString:(NSString *)string options:(NSMatchingOptions)options range:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("firstMatchInString:options:range:" "firstMatchInString:${1:(NSString *)string} options:${2:(NSMatchingOptions)options} range:${3:(NSRange)range}" "firstMatchInString:(NSString *)string options:(NSMatchingOptions)options range:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberOfMatchesInString:options:range:" "numberOfMatchesInString:${1:(NSString *)string} options:${2:(NSMatchingOptions)options} range:${3:(NSRange)range}" "numberOfMatchesInString:(NSString *)string options:(NSMatchingOptions)options range:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("matchesInString:options:range:" "matchesInString:${1:(NSString *)string} options:${2:(NSMatchingOptions)options} range:${3:(NSRange)range}" "matchesInString:(NSString *)string options:(NSMatchingOptions)options range:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateMatchesInString:options:range:usingBlock:" "enumerateMatchesInString:${1:(NSString *)string} options:${2:(NSMatchingOptions)options} range:${3:(NSRange)range} usingBlock:${4:(void (^)(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop))block}" "enumerateMatchesInString:(NSString *)string options:(NSMatchingOptions)options range:(NSRange)range usingBlock:(void (^)(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop))block" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("escapedPatternForString:" "escapedPatternForString:${1:(NSString *)string}" "escapedPatternForString:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithPattern:options:error:" "initWithPattern:${1:(NSString *)pattern} options:${2:(NSRegularExpressionOptions)options} error:${3:(NSError **)error} NS_DESIGNATED_INITIALIZER" "initWithPattern:(NSString *)pattern options:(NSRegularExpressionOptions)options error:(NSError **)error NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("regularExpressionWithPattern:options:error:" "regularExpressionWithPattern:${1:(NSString *)pattern} options:${2:(NSRegularExpressionOptions)options} error:${3:(NSError **)error}" "regularExpressionWithPattern:(NSString *)pattern options:(NSRegularExpressionOptions)options error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueWithRange:" "valueWithRange:${1:(NSRange)range}" "valueWithRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("retainWeakReference NS_UNAVAILABLE" "retainWeakReference NS_UNAVAILABLE" "retainWeakReference NS_UNAVAILABLE" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("allowsWeakReference NS_UNAVAILABLE" "allowsWeakReference NS_UNAVAILABLE" "allowsWeakReference NS_UNAVAILABLE" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("respondsToSelector:" "respondsToSelector:${1:(SEL)aSelector}" "respondsToSelector:(SEL)aSelector" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("finalize" "finalize" "finalize" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dealloc" "dealloc" "dealloc" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("methodSignatureForSelector:" "methodSignatureForSelector:${1:(SEL)sel}" "methodSignatureForSelector:(SEL)sel" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("forwardInvocation:" "forwardInvocation:${1:(NSInvocation *)invocation}" "forwardInvocation:(NSInvocation *)invocation" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("class" "class" "class" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("allocWithZone:" "allocWithZone:${1:(NSZone *)zone} NS_AUTOMATED_REFCOUNT_UNAVAILABLE" "allocWithZone:(NSZone *)zone NS_AUTOMATED_REFCOUNT_UNAVAILABLE" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("alloc" "alloc" "alloc" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("propertyListFromData:mutabilityOption:format:errorDescription:propertyListWithData:options:format:error:" "propertyListFromData:${1:(NSData *)data} mutabilityOption:${2:(NSPropertyListMutabilityOptions)opt} format:${3:(NSPropertyListFormat *)format} errorDescription:${4:(out __strong NSString **)errorString} NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"Use propertyListWithData:options:format:error: instead.\")" "propertyListFromData:(NSData *)data mutabilityOption:(NSPropertyListMutabilityOptions)opt format:(NSPropertyListFormat *)format errorDescription:(out __strong NSString **)errorString NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"Use propertyListWithData:options:format:error: instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataFromPropertyList:format:errorDescription:dataWithPropertyList:format:options:error:" "dataFromPropertyList:${1:(id)plist} format:${2:(NSPropertyListFormat)format} errorDescription:${3:(out __strong NSString **)errorString} NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"Use dataWithPropertyList:format:options:error: instead.\")" "dataFromPropertyList:(id)plist format:(NSPropertyListFormat)format errorDescription:(out __strong NSString **)errorString NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"Use dataWithPropertyList:format:options:error: instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("propertyListWithStream:options:format:error:" "propertyListWithStream:${1:(NSInputStream *)stream} options:${2:(NSPropertyListReadOptions)opt} format:${3:(NSPropertyListFormat *)format} error:${4:(out NSError **)error} NS_AVAILABLE(10_6, 4_0)" "propertyListWithStream:(NSInputStream *)stream options:(NSPropertyListReadOptions)opt format:(NSPropertyListFormat *)format error:(out NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("propertyListWithData:options:format:error:" "propertyListWithData:${1:(NSData *)data} options:${2:(NSPropertyListReadOptions)opt} format:${3:(NSPropertyListFormat *)format} error:${4:(out NSError **)error} NS_AVAILABLE(10_6, 4_0)" "propertyListWithData:(NSData *)data options:(NSPropertyListReadOptions)opt format:(NSPropertyListFormat *)format error:(out NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writePropertyList:toStream:format:options:error:" "writePropertyList:${1:(id)plist} toStream:${2:(NSOutputStream *)stream} format:${3:(NSPropertyListFormat)format} options:${4:(NSPropertyListWriteOptions)opt} error:${5:(out NSError **)error} NS_AVAILABLE(10_6, 4_0)" "writePropertyList:(id)plist toStream:(NSOutputStream *)stream format:(NSPropertyListFormat)format options:(NSPropertyListWriteOptions)opt error:(out NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithPropertyList:format:options:error:" "dataWithPropertyList:${1:(id)plist} format:${2:(NSPropertyListFormat)format} options:${3:(NSPropertyListWriteOptions)opt} error:${4:(out NSError **)error} NS_AVAILABLE(10_6, 4_0)" "dataWithPropertyList:(id)plist format:(NSPropertyListFormat)format options:(NSPropertyListWriteOptions)opt error:(out NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("propertyList:isValidForFormat:" "propertyList:${1:(id)plist} isValidForFormat:${2:(NSPropertyListFormat)format}" "propertyList:(id)plist isValidForFormat:(NSPropertyListFormat)format" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeSubscriber:" "removeSubscriber:${1:(id)subscriber} NS_AVAILABLE(10_9, NA)" "removeSubscriber:(id)subscriber NS_AVAILABLE(10_9, NA)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addSubscriberForFileURL:withPublishingHandler:" "addSubscriberForFileURL:${1:(NSURL *)url} withPublishingHandler:${2:(NSProgressPublishingHandler)publishingHandler} NS_AVAILABLE(10_9, NA)" "addSubscriberForFileURL:(NSURL *)url withPublishingHandler:(NSProgressPublishingHandler)publishingHandler NS_AVAILABLE(10_9, NA)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unpublish NS_AVAILABLE(10_9, NA)" "unpublish NS_AVAILABLE(10_9, NA)" "unpublish NS_AVAILABLE(10_9, NA)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("publish NS_AVAILABLE(10_9, NA)" "publish NS_AVAILABLE(10_9, NA)" "publish NS_AVAILABLE(10_9, NA)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pause" "pause" "pause" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancel" "cancel" "cancel" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setUserInfoObject:forKey:" "setUserInfoObject:${1:(id)objectOrNil} forKey:${2:(NSString *)key}" "setUserInfoObject:(id)objectOrNil forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resignCurrent" "resignCurrent" "resignCurrent" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("becomeCurrentWithPendingUnitCount:" "becomeCurrentWithPendingUnitCount:${1:(int64_t)unitCount}" "becomeCurrentWithPendingUnitCount:(int64_t)unitCount" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithParent:userInfo:" "initWithParent:${1:(NSProgress *)parentProgressOrNil} userInfo:${2:(NSDictionary *)userInfoOrNil} NS_DESIGNATED_INITIALIZER" "initWithParent:(NSProgress *)parentProgressOrNil userInfo:(NSDictionary *)userInfoOrNil NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("progressWithTotalUnitCount:" "progressWithTotalUnitCount:${1:(int64_t)unitCount}" "progressWithTotalUnitCount:(int64_t)unitCount" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("currentProgress" "currentProgress" "currentProgress" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("performExpiringActivityWithReason:usingBlock:" "performExpiringActivityWithReason:${1:(NSString *)reason} usingBlock:${2:(void(^)(BOOL expired))block} NS_AVAILABLE_IOS(8_2)" "performExpiringActivityWithReason:(NSString *)reason usingBlock:(void(^)(BOOL expired))block NS_AVAILABLE_IOS(8_2)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("performActivityWithOptions:reason:usingBlock:" "performActivityWithOptions:${1:(NSActivityOptions)options} reason:${2:(NSString *)reason} usingBlock:${3:(void (^)(void))block} NS_AVAILABLE(10_9, 7_0)" "performActivityWithOptions:(NSActivityOptions)options reason:(NSString *)reason usingBlock:(void (^)(void))block NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("endActivity:" "endActivity:${1:(id <NSObject>)activity} NS_AVAILABLE(10_9, 7_0)" "endActivity:(id <NSObject>)activity NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("beginActivityWithOptions:reason:" "beginActivityWithOptions:${1:(NSActivityOptions)options} reason:${2:(NSString *)reason} NS_AVAILABLE(10_9, 7_0)" "beginActivityWithOptions:(NSActivityOptions)options reason:(NSString *)reason NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enableAutomaticTermination:" "enableAutomaticTermination:${1:(NSString *)reason} NS_AVAILABLE(10_7, NA)" "enableAutomaticTermination:(NSString *)reason NS_AVAILABLE(10_7, NA)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("disableAutomaticTermination:" "disableAutomaticTermination:${1:(NSString *)reason} NS_AVAILABLE(10_7, NA)" "disableAutomaticTermination:(NSString *)reason NS_AVAILABLE(10_7, NA)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enableSuddenTermination NS_AVAILABLE(10_6, NA)" "enableSuddenTermination NS_AVAILABLE(10_6, NA)" "enableSuddenTermination NS_AVAILABLE(10_6, NA)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("disableSuddenTermination NS_AVAILABLE(10_6, NA)" "disableSuddenTermination NS_AVAILABLE(10_6, NA)" "disableSuddenTermination NS_AVAILABLE(10_6, NA)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isOperatingSystemAtLeastVersion:" " isOperatingSystemAtLeastVersion:${1:(NSOperatingSystemVersion)version} NS_AVAILABLE(10_10, 8_0)" " isOperatingSystemAtLeastVersion:(NSOperatingSystemVersion)version NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("operatingSystemName NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead\")" "operatingSystemName NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead\")" "operatingSystemName NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"-operatingSystemName always returns NSMACHOperatingSystem, use -operatingSystemVersionString instead\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isOperatingSystemAtLeastVersion:" "operatingSystem NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead\")" "operatingSystem NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"-operatingSystem always returns NSMACHOperatingSystem, use -operatingSystemVersion or -isOperatingSystemAtLeastVersion: instead\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("processInfo" "processInfo" "processInfo" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("filterUsingPredicate:" "filterUsingPredicate:${1:(NSPredicate *)p} NS_AVAILABLE(10_7, 5_0)" "filterUsingPredicate:(NSPredicate *)p NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("filteredOrderedSetUsingPredicate:" "filteredOrderedSetUsingPredicate:${1:(NSPredicate *)p} NS_AVAILABLE(10_7, 5_0)" "filteredOrderedSetUsingPredicate:(NSPredicate *)p NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("filterUsingPredicate:" "filterUsingPredicate:${1:(NSPredicate *)predicate} NS_AVAILABLE(10_5, 3_0)" "filterUsingPredicate:(NSPredicate *)predicate NS_AVAILABLE(10_5, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("filteredSetUsingPredicate:" "filteredSetUsingPredicate:${1:(NSPredicate *)predicate} NS_AVAILABLE(10_5, 3_0)" "filteredSetUsingPredicate:(NSPredicate *)predicate NS_AVAILABLE(10_5, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("filterUsingPredicate:" "filterUsingPredicate:${1:(NSPredicate *)predicate}" "filterUsingPredicate:(NSPredicate *)predicate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("filteredArrayUsingPredicate:" "filteredArrayUsingPredicate:${1:(NSPredicate *)predicate}" "filteredArrayUsingPredicate:(NSPredicate *)predicate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("allowEvaluation NS_AVAILABLE(10_9, 7_0)" "allowEvaluation NS_AVAILABLE(10_9, 7_0)" "allowEvaluation NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("evaluateWithObject:substitutionVariables:" "evaluateWithObject:${1:(id)object} substitutionVariables:${2:(NSDictionary *)bindings} NS_AVAILABLE(10_5, 3_0)" "evaluateWithObject:(id)object substitutionVariables:(NSDictionary *)bindings NS_AVAILABLE(10_5, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("evaluateWithObject:" "evaluateWithObject:${1:(id)object}" "evaluateWithObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("predicateWithSubstitutionVariables:" "predicateWithSubstitutionVariables:${1:(NSDictionary *)variables}" "predicateWithSubstitutionVariables:(NSDictionary *)variables" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("predicateWithBlock:" "predicateWithBlock:${1:(BOOL (^)(id evaluatedObject, NSDictionary *bindings))block} NS_AVAILABLE(10_6, 4_0)" "predicateWithBlock:(BOOL (^)(id evaluatedObject, NSDictionary *bindings))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("predicateWithValue:" "predicateWithValue:${1:(BOOL)value}" "predicateWithValue:(BOOL)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("predicateFromMetadataQueryString:" "predicateFromMetadataQueryString:${1:(NSString *)queryString} NS_AVAILABLE_MAC(10_9)" "predicateFromMetadataQueryString:(NSString *)queryString NS_AVAILABLE_MAC(10_9)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("predicateWithFormat:arguments:" "predicateWithFormat:${1:(NSString *)predicateFormat} arguments:${2:(va_list)argList}" "predicateWithFormat:(NSString *)predicateFormat arguments:(va_list)argList" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("predicateWithFormat:" "predicateWithFormat:${1:(NSString *)predicateFormat}, ..." "predicateWithFormat:(NSString *)predicateFormat, ..." nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("predicateWithFormat:argumentArray:" "predicateWithFormat:${1:(NSString *)predicateFormat} argumentArray:${2:(NSArray *)arguments}" "predicateWithFormat:(NSString *)predicateFormat argumentArray:(NSArray *)arguments" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initRemoteWithProtocolFamily:socketType:protocol:address:" "initRemoteWithProtocolFamily:${1:(int)family} socketType:${2:(int)type} protocol:${3:(int)protocol} address:${4:(NSData *)address} NS_DESIGNATED_INITIALIZER" "initRemoteWithProtocolFamily:(int)family socketType:(int)type protocol:(int)protocol address:(NSData *)address NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initRemoteWithTCPPort:host:" "initRemoteWithTCPPort:${1:(unsigned short)port} host:${2:(NSString *)hostName}" "initRemoteWithTCPPort:(unsigned short)port host:(NSString *)hostName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithProtocolFamily:socketType:protocol:socket:" "initWithProtocolFamily:${1:(int)family} socketType:${2:(int)type} protocol:${3:(int)protocol} socket:${4:(NSSocketNativeHandle)sock} NS_DESIGNATED_INITIALIZER" "initWithProtocolFamily:(int)family socketType:(int)type protocol:(int)protocol socket:(NSSocketNativeHandle)sock NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithProtocolFamily:socketType:protocol:address:" "initWithProtocolFamily:${1:(int)family} socketType:${2:(int)type} protocol:${3:(int)protocol} address:${4:(NSData *)address} NS_DESIGNATED_INITIALIZER" "initWithProtocolFamily:(int)family socketType:(int)type protocol:(int)protocol address:(NSData *)address NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithTCPPort:" "initWithTCPPort:${1:(unsigned short)port}" "initWithTCPPort:(unsigned short)port" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init" "init" "init" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("handleMachMessage:" "handleMachMessage:${1:(void *)msg}" "handleMachMessage:(void *)msg" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeFromRunLoop:forMode:" "removeFromRunLoop:${1:(NSRunLoop *)runLoop} forMode:${2:(NSString *)mode}" "removeFromRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scheduleInRunLoop:forMode:" "scheduleInRunLoop:${1:(NSRunLoop *)runLoop} forMode:${2:(NSString *)mode}" "scheduleInRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithMachPort:options:" "initWithMachPort:${1:(uint32_t)machPort} options:${2:(NSUInteger)f} NS_AVAILABLE(10_5, 2_0) NS_DESIGNATED_INITIALIZER" "initWithMachPort:(uint32_t)machPort options:(NSUInteger)f NS_AVAILABLE(10_5, 2_0) NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("portWithMachPort:options:" "portWithMachPort:${1:(uint32_t)machPort} options:${2:(NSUInteger)f} NS_AVAILABLE(10_5, 2_0)" "portWithMachPort:(uint32_t)machPort options:(NSUInteger)f NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("delegate" "delegate" "delegate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDelegate:" "setDelegate:${1:(id <NSMachPortDelegate>)anObject}" "setDelegate:(id <NSMachPortDelegate>)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithMachPort:" "initWithMachPort:${1:(uint32_t)machPort}" "initWithMachPort:(uint32_t)machPort" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("portWithMachPort:" "portWithMachPort:${1:(uint32_t)machPort}" "portWithMachPort:(uint32_t)machPort" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("handlePortMessage:" "handlePortMessage:${1:(NSPortMessage *)message}" "handlePortMessage:(NSPortMessage *)message" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeConnection:fromRunLoop:forMode:" "removeConnection:${1:(NSConnection *)conn} fromRunLoop:${2:(NSRunLoop *)runLoop} forMode:${3:(NSString *)mode}" "removeConnection:(NSConnection *)conn fromRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addConnection:toRunLoop:forMode:" "addConnection:${1:(NSConnection *)conn} toRunLoop:${2:(NSRunLoop *)runLoop} forMode:${3:(NSString *)mode}" "addConnection:(NSConnection *)conn toRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sendBeforeDate:msgid:components:from:reserved:" "sendBeforeDate:${1:(NSDate *)limitDate} msgid:${2:(NSUInteger)msgID} components:${3:(NSMutableArray *)components} from:${4:(NSPort *)receivePort} reserved:${5:(NSUInteger)headerSpaceReserved}" "sendBeforeDate:(NSDate *)limitDate msgid:(NSUInteger)msgID components:(NSMutableArray *)components from:(NSPort *)receivePort reserved:(NSUInteger)headerSpaceReserved" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sendBeforeDate:components:from:reserved:" "sendBeforeDate:${1:(NSDate *)limitDate} components:${2:(NSMutableArray *)components} from:${3:(NSPort *) receivePort} reserved:${4:(NSUInteger)headerSpaceReserved}" "sendBeforeDate:(NSDate *)limitDate components:(NSMutableArray *)components from:(NSPort *) receivePort reserved:(NSUInteger)headerSpaceReserved" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeFromRunLoop:forMode:" "removeFromRunLoop:${1:(NSRunLoop *)runLoop} forMode:${2:(NSString *)mode}" "removeFromRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scheduleInRunLoop:forMode:" "scheduleInRunLoop:${1:(NSRunLoop *)runLoop} forMode:${2:(NSString *)mode}" "scheduleInRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("delegate" "delegate" "delegate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDelegate:" "setDelegate:${1:(id <NSPortDelegate>)anObject}" "setDelegate:(id <NSPortDelegate>)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("invalidate" "invalidate" "invalidate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("port" "port" "port" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pointerFunctionsWithOptions:" "pointerFunctionsWithOptions:${1:(NSPointerFunctionsOptions)options}" "pointerFunctionsWithOptions:(NSPointerFunctionsOptions)options" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithOptions:" "initWithOptions:${1:(NSPointerFunctionsOptions)options} NS_DESIGNATED_INITIALIZER" "initWithOptions:(NSPointerFunctionsOptions)options NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("weakObjectsPointerArray NS_AVAILABLE(10_8, 6_0)" "weakObjectsPointerArray NS_AVAILABLE(10_8, 6_0)" "weakObjectsPointerArray NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("strongObjectsPointerArray NS_AVAILABLE(10_8, 6_0)" "strongObjectsPointerArray NS_AVAILABLE(10_8, 6_0)" "strongObjectsPointerArray NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("compact" "compact" "compact" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replacePointerAtIndex:withPointer:" "replacePointerAtIndex:${1:(NSUInteger)index} withPointer:${2:(void *)item}" "replacePointerAtIndex:(NSUInteger)index withPointer:(void *)item" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("insertPointer:atIndex:" "insertPointer:${1:(void *)item} atIndex:${2:(NSUInteger)index}" "insertPointer:(void *)item atIndex:(NSUInteger)index" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removePointerAtIndex:" "removePointerAtIndex:${1:(NSUInteger)index}" "removePointerAtIndex:(NSUInteger)index" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addPointer:" "addPointer:${1:(void *)pointer}" "addPointer:(void *)pointer" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pointerAtIndex:" "pointerAtIndex:${1:(NSUInteger)index}" "pointerAtIndex:(NSUInteger)index" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pointerArrayWithPointerFunctions:" "pointerArrayWithPointerFunctions:${1:(NSPointerFunctions *)functions}" "pointerArrayWithPointerFunctions:(NSPointerFunctions *)functions" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pointerArrayWithOptions:" "pointerArrayWithOptions:${1:(NSPointerFunctionsOptions)options}" "pointerArrayWithOptions:(NSPointerFunctionsOptions)options" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithPointerFunctions:" "initWithPointerFunctions:${1:(NSPointerFunctions *)functions} NS_DESIGNATED_INITIALIZER" "initWithPointerFunctions:(NSPointerFunctions *)functions NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithOptions:" "initWithOptions:${1:(NSPointerFunctionsOptions)options} NS_DESIGNATED_INITIALIZER" "initWithOptions:(NSPointerFunctionsOptions)options NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pathsMatchingExtensions:" "pathsMatchingExtensions:${1:(NSArray *)filterTypes}" "pathsMatchingExtensions:(NSArray *)filterTypes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getFileSystemRepresentation:maxLength:" "getFileSystemRepresentation:${1:(char *)cname} maxLength:${2:(NSUInteger)max}" "getFileSystemRepresentation:(char *)cname maxLength:(NSUInteger)max" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:" "completePathIntoString:${1:(NSString **)outputName} caseSensitive:${2:(BOOL)flag} matchesIntoArray:${3:(NSArray **)outputArray} filterTypes:${4:(NSArray *)filterTypes}" "completePathIntoString:(NSString **)outputName caseSensitive:(BOOL)flag matchesIntoArray:(NSArray **)outputArray filterTypes:(NSArray *)filterTypes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringsByAppendingPaths:" "stringsByAppendingPaths:${1:(NSArray *)paths}" "stringsByAppendingPaths:(NSArray *)paths" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByAppendingPathExtension:" "stringByAppendingPathExtension:${1:(NSString *)str}" "stringByAppendingPathExtension:(NSString *)str" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringByAppendingPathComponent:" "stringByAppendingPathComponent:${1:(NSString *)str}" "stringByAppendingPathComponent:(NSString *)str" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pathWithComponents:" "pathWithComponents:${1:(NSArray *)components}" "pathWithComponents:(NSArray *)components" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orthographyWithDominantScript:languageMap:" "orthographyWithDominantScript:${1:(NSString *)script} languageMap:${2:(NSDictionary *)map} NS_AVAILABLE(10_6, 4_0)" "orthographyWithDominantScript:(NSString *)script languageMap:(NSDictionary *)map NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dominantLanguageForScript:" "dominantLanguageForScript:${1:(NSString *)script} NS_AVAILABLE(10_6, 4_0)" "dominantLanguageForScript:(NSString *)script NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("languagesForScript:" "languagesForScript:${1:(NSString *)script} NS_AVAILABLE(10_6, 4_0)" "languagesForScript:(NSString *)script NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithDominantScript:languageMap:" "initWithDominantScript:${1:(NSString *)script} languageMap:${2:(NSDictionary *)map} NS_AVAILABLE(10_6, 4_0) NS_DESIGNATED_INITIALIZER" "initWithDominantScript:(NSString *)script languageMap:(NSDictionary *)map NS_AVAILABLE(10_6, 4_0) NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orderedSetWithCapacity:" "orderedSetWithCapacity:${1:(NSUInteger)numItems}" "orderedSetWithCapacity:(NSUInteger)numItems" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortRange:options:usingComparator:" "sortRange:${1:(NSRange)range} options:${2:(NSSortOptions)opts} usingComparator:${3:(NSComparator)cmptr}" "sortRange:(NSRange)range options:(NSSortOptions)opts usingComparator:(NSComparator)cmptr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortWithOptions:usingComparator:" "sortWithOptions:${1:(NSSortOptions)opts} usingComparator:${2:(NSComparator)cmptr}" "sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortUsingComparator:" "sortUsingComparator:${1:(NSComparator)cmptr}" "sortUsingComparator:(NSComparator)cmptr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unionSet:" "unionSet:${1:(NSSet *)other}" "unionSet:(NSSet *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("minusSet:" "minusSet:${1:(NSSet *)other}" "minusSet:(NSSet *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("intersectSet:" "intersectSet:${1:(NSSet *)other}" "intersectSet:(NSSet *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unionOrderedSet:" "unionOrderedSet:${1:(NSOrderedSet *)other}" "unionOrderedSet:(NSOrderedSet *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("minusOrderedSet:" "minusOrderedSet:${1:(NSOrderedSet *)other}" "minusOrderedSet:(NSOrderedSet *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("intersectOrderedSet:" "intersectOrderedSet:${1:(NSOrderedSet *)other}" "intersectOrderedSet:(NSOrderedSet *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectsInArray:" "removeObjectsInArray:${1:(NSArray *)array}" "removeObjectsInArray:(NSArray *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObject:" "removeObject:${1:(id)object}" "removeObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAllObjects" "removeAllObjects" "removeAllObjects" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectsAtIndexes:" "removeObjectsAtIndexes:${1:(NSIndexSet *)indexes}" "removeObjectsAtIndexes:(NSIndexSet *)indexes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectsInRange:" "removeObjectsInRange:${1:(NSRange)range}" "removeObjectsInRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceObjectsAtIndexes:withObjects:" "replaceObjectsAtIndexes:${1:(NSIndexSet *)indexes} withObjects:${2:(NSArray *)objects}" "replaceObjectsAtIndexes:(NSIndexSet *)indexes withObjects:(NSArray *)objects" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceObjectsInRange:withObjects:count:" "replaceObjectsInRange:${1:(NSRange)range} withObjects:${2:(const id [])objects} count:${3:(NSUInteger)count}" "replaceObjectsInRange:(NSRange)range withObjects:(const id [])objects count:(NSUInteger)count" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setObject:atIndexedSubscript:" "setObject:${1:(id)obj} atIndexedSubscript:${2:(NSUInteger)idx} NS_AVAILABLE(10_8, 6_0)" "setObject:(id)obj atIndexedSubscript:(NSUInteger)idx NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setObject:atIndex:" "setObject:${1:(id)obj} atIndex:${2:(NSUInteger)idx}" "setObject:(id)obj atIndex:(NSUInteger)idx" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("insertObjects:atIndexes:" "insertObjects:${1:(NSArray *)objects} atIndexes:${2:(NSIndexSet *)indexes}" "insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("moveObjectsAtIndexes:toIndex:" "moveObjectsAtIndexes:${1:(NSIndexSet *)indexes} toIndex:${2:(NSUInteger)idx}" "moveObjectsAtIndexes:(NSIndexSet *)indexes toIndex:(NSUInteger)idx" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("exchangeObjectAtIndex:withObjectAtIndex:" "exchangeObjectAtIndex:${1:(NSUInteger)idx1} withObjectAtIndex:${2:(NSUInteger)idx2}" "exchangeObjectAtIndex:(NSUInteger)idx1 withObjectAtIndex:(NSUInteger)idx2" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObjectsFromArray:" "addObjectsFromArray:${1:(NSArray *)array}" "addObjectsFromArray:(NSArray *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObjects:count:" "addObjects:${1:(const id [])objects} count:${2:(NSUInteger)count}" "addObjects:(const id [])objects count:(NSUInteger)count" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObject:" "addObject:${1:(id)object}" "addObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCapacity:" "initWithCapacity:${1:(NSUInteger)numItems} NS_DESIGNATED_INITIALIZER" "initWithCapacity:(NSUInteger)numItems NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceObjectAtIndex:withObject:" "replaceObjectAtIndex:${1:(NSUInteger)idx} withObject:${2:(id)object}" "replaceObjectAtIndex:(NSUInteger)idx withObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectAtIndex:" "removeObjectAtIndex:${1:(NSUInteger)idx}" "removeObjectAtIndex:(NSUInteger)idx" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("insertObject:atIndex:" "insertObject:${1:(id)object} atIndex:${2:(NSUInteger)idx}" "insertObject:(id)object atIndex:(NSUInteger)idx" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithSet:copyItems:" "initWithSet:${1:(NSSet *)set} copyItems:${2:(BOOL)flag}" "initWithSet:(NSSet *)set copyItems:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithSet:" "initWithSet:${1:(NSSet *)set}" "initWithSet:(NSSet *)set" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithArray:range:copyItems:" "initWithArray:${1:(NSArray *)set} range:${2:(NSRange)range} copyItems:${3:(BOOL)flag}" "initWithArray:(NSArray *)set range:(NSRange)range copyItems:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithArray:copyItems:" "initWithArray:${1:(NSArray *)set} copyItems:${2:(BOOL)flag}" "initWithArray:(NSArray *)set copyItems:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithArray:" "initWithArray:${1:(NSArray *)array}" "initWithArray:(NSArray *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithOrderedSet:range:copyItems:" "initWithOrderedSet:${1:(NSOrderedSet *)set} range:${2:(NSRange)range} copyItems:${3:(BOOL)flag}" "initWithOrderedSet:(NSOrderedSet *)set range:(NSRange)range copyItems:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithOrderedSet:copyItems:" "initWithOrderedSet:${1:(NSOrderedSet *)set} copyItems:${2:(BOOL)flag}" "initWithOrderedSet:(NSOrderedSet *)set copyItems:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithOrderedSet:" "initWithOrderedSet:${1:(NSOrderedSet *)set}" "initWithOrderedSet:(NSOrderedSet *)set" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithObjects:" "initWithObjects:${1:(id)firstObj}, ... NS_REQUIRES_NIL_TERMINATION" "initWithObjects:(id)firstObj, ... NS_REQUIRES_NIL_TERMINATION" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithObject:" "initWithObject:${1:(id)object}" "initWithObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orderedSetWithSet:copyItems:" "orderedSetWithSet:${1:(NSSet *)set} copyItems:${2:(BOOL)flag}" "orderedSetWithSet:(NSSet *)set copyItems:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orderedSetWithSet:" "orderedSetWithSet:${1:(NSSet *)set}" "orderedSetWithSet:(NSSet *)set" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orderedSetWithArray:range:copyItems:" "orderedSetWithArray:${1:(NSArray *)array} range:${2:(NSRange)range} copyItems:${3:(BOOL)flag}" "orderedSetWithArray:(NSArray *)array range:(NSRange)range copyItems:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orderedSetWithArray:" "orderedSetWithArray:${1:(NSArray *)array}" "orderedSetWithArray:(NSArray *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orderedSetWithOrderedSet:range:copyItems:" "orderedSetWithOrderedSet:${1:(NSOrderedSet *)set} range:${2:(NSRange)range} copyItems:${3:(BOOL)flag}" "orderedSetWithOrderedSet:(NSOrderedSet *)set range:(NSRange)range copyItems:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orderedSetWithOrderedSet:" "orderedSetWithOrderedSet:${1:(NSOrderedSet *)set}" "orderedSetWithOrderedSet:(NSOrderedSet *)set" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orderedSetWithObjects:" "orderedSetWithObjects:${1:(id)firstObj}, ... NS_REQUIRES_NIL_TERMINATION" "orderedSetWithObjects:(id)firstObj, ... NS_REQUIRES_NIL_TERMINATION" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orderedSetWithObjects:count:" "orderedSetWithObjects:${1:(const id [])objects} count:${2:(NSUInteger)cnt}" "orderedSetWithObjects:(const id [])objects count:(NSUInteger)cnt" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orderedSetWithObject:" "orderedSetWithObject:${1:(id)object}" "orderedSetWithObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orderedSet" "orderedSet" "orderedSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("descriptionWithLocale:indent:" "descriptionWithLocale:${1:(id)locale} indent:${2:(NSUInteger)level}" "descriptionWithLocale:(id)locale indent:(NSUInteger)level" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("descriptionWithLocale:" "descriptionWithLocale:${1:(id)locale}" "descriptionWithLocale:(id)locale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortedArrayWithOptions:usingComparator:" "sortedArrayWithOptions:${1:(NSSortOptions)opts} usingComparator:${2:(NSComparator)cmptr}" "sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortedArrayUsingComparator:" "sortedArrayUsingComparator:${1:(NSComparator)cmptr}" "sortedArrayUsingComparator:(NSComparator)cmptr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObject:inSortedRange:options:usingComparator:" "indexOfObject:${1:(id)object} inSortedRange:${2:(NSRange)range} options:${3:(NSBinarySearchingOptions)opts} usingComparator:${4:(NSComparator)cmp}" "indexOfObject:(id)object inSortedRange:(NSRange)range options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexesOfObjectsAtIndexes:options:passingTest:" "indexesOfObjectsAtIndexes:${1:(NSIndexSet *)s} options:${2:(NSEnumerationOptions)opts} passingTest:${3:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate}" "indexesOfObjectsAtIndexes:(NSIndexSet *)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexesOfObjectsWithOptions:passingTest:" "indexesOfObjectsWithOptions:${1:(NSEnumerationOptions)opts} passingTest:${2:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate}" "indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexesOfObjectsPassingTest:" "indexesOfObjectsPassingTest:${1:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate}" "indexesOfObjectsPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObjectAtIndexes:options:passingTest:" "indexOfObjectAtIndexes:${1:(NSIndexSet *)s} options:${2:(NSEnumerationOptions)opts} passingTest:${3:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate}" "indexOfObjectAtIndexes:(NSIndexSet *)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObjectWithOptions:passingTest:" "indexOfObjectWithOptions:${1:(NSEnumerationOptions)opts} passingTest:${2:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate}" "indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObjectPassingTest:" "indexOfObjectPassingTest:${1:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate}" "indexOfObjectPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateObjectsAtIndexes:options:usingBlock:" "enumerateObjectsAtIndexes:${1:(NSIndexSet *)s} options:${2:(NSEnumerationOptions)opts} usingBlock:${3:(void (^)(id obj, NSUInteger idx, BOOL *stop))block}" "enumerateObjectsAtIndexes:(NSIndexSet *)s options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateObjectsWithOptions:usingBlock:" "enumerateObjectsWithOptions:${1:(NSEnumerationOptions)opts} usingBlock:${2:(void (^)(id obj, NSUInteger idx, BOOL *stop))block}" "enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateObjectsUsingBlock:" "enumerateObjectsUsingBlock:${1:(void (^)(id obj, NSUInteger idx, BOOL *stop))block}" "enumerateObjectsUsingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("reverseObjectEnumerator" "reverseObjectEnumerator" "reverseObjectEnumerator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectEnumerator" "objectEnumerator" "objectEnumerator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectAtIndexedSubscript:" "objectAtIndexedSubscript:${1:(NSUInteger)idx} NS_AVAILABLE(10_8, 6_0)" "objectAtIndexedSubscript:(NSUInteger)idx NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isSubsetOfSet:" "isSubsetOfSet:${1:(NSSet *)set}" "isSubsetOfSet:(NSSet *)set" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isSubsetOfOrderedSet:" "isSubsetOfOrderedSet:${1:(NSOrderedSet *)other}" "isSubsetOfOrderedSet:(NSOrderedSet *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("intersectsSet:" "intersectsSet:${1:(NSSet *)set}" "intersectsSet:(NSSet *)set" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("intersectsOrderedSet:" "intersectsOrderedSet:${1:(NSOrderedSet *)other}" "intersectsOrderedSet:(NSOrderedSet *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("containsObject:" "containsObject:${1:(id)object}" "containsObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToOrderedSet:" "isEqualToOrderedSet:${1:(NSOrderedSet *)other}" "isEqualToOrderedSet:(NSOrderedSet *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectsAtIndexes:" "objectsAtIndexes:${1:(NSIndexSet *)indexes}" "objectsAtIndexes:(NSIndexSet *)indexes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getObjects:range:" "getObjects:${1:(id __unsafe_unretained [])objects} range:${2:(NSRange)range}" "getObjects:(id __unsafe_unretained [])objects range:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithObjects:count:" "initWithObjects:${1:(const id [])objects} count:${2:(NSUInteger)cnt} NS_DESIGNATED_INITIALIZER" "initWithObjects:(const id [])objects count:(NSUInteger)cnt NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObject:" "indexOfObject:${1:(id)object}" "indexOfObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectAtIndex:" "objectAtIndex:${1:(NSUInteger)idx}" "objectAtIndex:(NSUInteger)idx" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mainQueue NS_AVAILABLE(10_6, 4_0)" "mainQueue NS_AVAILABLE(10_6, 4_0)" "mainQueue NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("currentQueue NS_AVAILABLE(10_6, 4_0)" "currentQueue NS_AVAILABLE(10_6, 4_0)" "currentQueue NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("waitUntilAllOperationsAreFinished" "waitUntilAllOperationsAreFinished" "waitUntilAllOperationsAreFinished" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancelAllOperations" "cancelAllOperations" "cancelAllOperations" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addOperationWithBlock:" "addOperationWithBlock:${1:(void (^)(void))block} NS_AVAILABLE(10_6, 4_0)" "addOperationWithBlock:(void (^)(void))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addOperations:waitUntilFinished:" "addOperations:${1:(NSArray *)ops} waitUntilFinished:${2:(BOOL)wait} NS_AVAILABLE(10_6, 4_0)" "addOperations:(NSArray *)ops waitUntilFinished:(BOOL)wait NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addOperation:" "addOperation:${1:(NSOperation *)op}" "addOperation:(NSOperation *)op" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithInvocation:" "initWithInvocation:${1:(NSInvocation *)inv} NS_DESIGNATED_INITIALIZER" "initWithInvocation:(NSInvocation *)inv NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithTarget:selector:object:" "initWithTarget:${1:(id)target} selector:${2:(SEL)sel} object:${3:(id)arg}" "initWithTarget:(id)target selector:(SEL)sel object:(id)arg" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addExecutionBlock:" "addExecutionBlock:${1:(void (^)(void))block}" "addExecutionBlock:(void (^)(void))block" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("blockOperationWithBlock:" "blockOperationWithBlock:${1:(void (^)(void))block}" "blockOperationWithBlock:(void (^)(void))block" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("waitUntilFinished NS_AVAILABLE(10_6, 4_0)" "waitUntilFinished NS_AVAILABLE(10_6, 4_0)" "waitUntilFinished NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeDependency:" "removeDependency:${1:(NSOperation *)op}" "removeDependency:(NSOperation *)op" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addDependency:" "addDependency:${1:(NSOperation *)op}" "addDependency:(NSOperation *)op" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancel" "cancel" "cancel" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("main" "main" "main" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("start" "start" "start" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isContentDiscarded" "isContentDiscarded" "isContentDiscarded" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("discardContentIfPossible" "discardContentIfPossible" "discardContentIfPossible" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("endContentAccess" "endContentAccess" "endContentAccess" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("beginContentAccess" "beginContentAccess" "beginContentAccess" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("poseAsClass:" "poseAsClass:${1:(Class)aClass} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)
#if __OBJC2__
UNAVAILABLE_ATTRIBUTE
#endif
" "poseAsClass:(Class)aClass NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)
#if __OBJC2__
UNAVAILABLE_ATTRIBUTE
#endif
" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("awakeAfterUsingCoder:" "awakeAfterUsingCoder:${1:(NSCoder *)aDecoder} NS_REPLACES_RECEIVER" "awakeAfterUsingCoder:(NSCoder *)aDecoder NS_REPLACES_RECEIVER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replacementObjectForCoder:" "replacementObjectForCoder:${1:(NSCoder *)aCoder}" "replacementObjectForCoder:(NSCoder *)aCoder" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setVersion:" "setVersion:${1:(NSInteger)aVersion}" "setVersion:(NSInteger)aVersion" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("version" "version" "version" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("supportsSecureCoding" "supportsSecureCoding" "supportsSecureCoding" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder}" "initWithCoder:(NSCoder *)aDecoder" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeWithCoder:" "encodeWithCoder:${1:(NSCoder *)aCoder}" "encodeWithCoder:(NSCoder *)aCoder" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mutableCopyWithZone:" "mutableCopyWithZone:${1:(NSZone *)zone}" "mutableCopyWithZone:(NSZone *)zone" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("copyWithZone:" "copyWithZone:${1:(NSZone *)zone}" "copyWithZone:(NSZone *)zone" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDefaultFormatterBehavior:" "setDefaultFormatterBehavior:${1:(NSNumberFormatterBehavior)behavior}" "setDefaultFormatterBehavior:(NSNumberFormatterBehavior)behavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("defaultFormatterBehavior" "defaultFormatterBehavior" "defaultFormatterBehavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedStringFromNumber:numberStyle:" "localizedStringFromNumber:${1:(NSNumber *)num} numberStyle:${2:(NSNumberFormatterStyle)nstyle} NS_AVAILABLE(10_6, 4_0)" "localizedStringFromNumber:(NSNumber *)num numberStyle:(NSNumberFormatterStyle)nstyle NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("numberFromString:" "numberFromString:${1:(NSString *)string}" "numberFromString:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromNumber:" "stringFromNumber:${1:(NSNumber *)number}" "stringFromNumber:(NSNumber *)number" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getObjectValue:forString:range:error:" "getObjectValue:${1:(out id *)obj} forString:${2:(NSString *)string} range:${3:(inout NSRange *)rangep} error:${4:(out NSError **)error}" "getObjectValue:(out id *)obj forString:(NSString *)string range:(inout NSRange *)rangep error:(out NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("null" "null" "null" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dequeueNotificationsMatching:coalesceMask:" "dequeueNotificationsMatching:${1:(NSNotification *)notification} coalesceMask:${2:(NSUInteger)coalesceMask}" "dequeueNotificationsMatching:(NSNotification *)notification coalesceMask:(NSUInteger)coalesceMask" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enqueueNotification:postingStyle:coalesceMask:forModes:" "enqueueNotification:${1:(NSNotification *)notification} postingStyle:${2:(NSPostingStyle)postingStyle} coalesceMask:${3:(NSUInteger)coalesceMask} forModes:${4:(NSArray *)modes}" "enqueueNotification:(NSNotification *)notification postingStyle:(NSPostingStyle)postingStyle coalesceMask:(NSUInteger)coalesceMask forModes:(NSArray *)modes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enqueueNotification:postingStyle:" "enqueueNotification:${1:(NSNotification *)notification} postingStyle:${2:(NSPostingStyle)postingStyle}" "enqueueNotification:(NSNotification *)notification postingStyle:(NSPostingStyle)postingStyle" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithNotificationCenter:" "initWithNotificationCenter:${1:(NSNotificationCenter *)notificationCenter} NS_DESIGNATED_INITIALIZER" "initWithNotificationCenter:(NSNotificationCenter *)notificationCenter NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("defaultQueue" "defaultQueue" "defaultQueue" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObserverForName:object:queue:usingBlock:" "addObserverForName:${1:(NSString *)name} object:${2:(id)obj} queue:${3:(NSOperationQueue *)queue} usingBlock:${4:(void (^)(NSNotification *note))block} NS_AVAILABLE(10_6, 4_0)" "addObserverForName:(NSString *)name object:(id)obj queue:(NSOperationQueue *)queue usingBlock:(void (^)(NSNotification *note))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObserver:name:object:" "removeObserver:${1:(id)observer} name:${2:(NSString *)aName} object:${3:(id)anObject}" "removeObserver:(id)observer name:(NSString *)aName object:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObserver:" "removeObserver:${1:(id)observer}" "removeObserver:(id)observer" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("postNotificationName:object:userInfo:" "postNotificationName:${1:(NSString *)aName} object:${2:(id)anObject} userInfo:${3:(NSDictionary *)aUserInfo}" "postNotificationName:(NSString *)aName object:(id)anObject userInfo:(NSDictionary *)aUserInfo" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("postNotificationName:object:" "postNotificationName:${1:(NSString *)aName} object:${2:(id)anObject}" "postNotificationName:(NSString *)aName object:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("postNotification:" "postNotification:${1:(NSNotification *)notification}" "postNotification:(NSNotification *)notification" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObserver:selector:name:object:" "addObserver:${1:(id)observer} selector:${2:(SEL)aSelector} name:${3:(NSString *)aName} object:${4:(id)anObject}" "addObserver:(id)observer selector:(SEL)aSelector name:(NSString *)aName object:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("defaultCenter" "defaultCenter" "defaultCenter" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init /*NS_UNAVAILABLE*/" "init /*NS_UNAVAILABLE*/" "init /*NS_UNAVAILABLE*/" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("notificationWithName:object:userInfo:" "notificationWithName:${1:(NSString *)aName} object:${2:(id)anObject} userInfo:${3:(NSDictionary *)aUserInfo}" "notificationWithName:(NSString *)aName object:(id)anObject userInfo:(NSDictionary *)aUserInfo" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("notificationWithName:object:" "notificationWithName:${1:(NSString *)aName} object:${2:(id)anObject}" "notificationWithName:(NSString *)aName object:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithName:object:userInfo:" "initWithName:${1:(NSString *)name} object:${2:(id)object} userInfo:${3:(NSDictionary *)userInfo} NS_AVAILABLE(10_6, 4_0) NS_DESIGNATED_INITIALIZER" "initWithName:(NSString *)name object:(id)object userInfo:(NSDictionary *)userInfo NS_AVAILABLE(10_6, 4_0) NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("searchForAllDomains NS_DEPRECATED(10_2, 10_4, 2_0, 2_0)" "searchForAllDomains NS_DEPRECATED(10_2, 10_4, 2_0, 2_0)" "searchForAllDomains NS_DEPRECATED(10_2, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setProtocolSpecificInformation:" "setProtocolSpecificInformation:${1:(NSString *)specificInformation} NS_DEPRECATED(10_2, 10_4, 2_0, 2_0)" "setProtocolSpecificInformation:(NSString *)specificInformation NS_DEPRECATED(10_2, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("protocolSpecificInformation NS_DEPRECATED(10_2, 10_4, 2_0, 2_0)" "protocolSpecificInformation NS_DEPRECATED(10_2, 10_4, 2_0, 2_0)" "protocolSpecificInformation NS_DEPRECATED(10_2, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netServiceBrowser:didRemoveService:moreComing:" "netServiceBrowser:${1:(NSNetServiceBrowser *)aNetServiceBrowser} didRemoveService:${2:(NSNetService *)aNetService} moreComing:${3:(BOOL)moreComing}" "netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser didRemoveService:(NSNetService *)aNetService moreComing:(BOOL)moreComing" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netServiceBrowser:didRemoveDomain:moreComing:" "netServiceBrowser:${1:(NSNetServiceBrowser *)aNetServiceBrowser} didRemoveDomain:${2:(NSString *)domainString} moreComing:${3:(BOOL)moreComing}" "netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser didRemoveDomain:(NSString *)domainString moreComing:(BOOL)moreComing" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netServiceBrowser:didFindService:moreComing:" "netServiceBrowser:${1:(NSNetServiceBrowser *)aNetServiceBrowser} didFindService:${2:(NSNetService *)aNetService} moreComing:${3:(BOOL)moreComing}" "netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser didFindService:(NSNetService *)aNetService moreComing:(BOOL)moreComing" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netServiceBrowser:didFindDomain:moreComing:" "netServiceBrowser:${1:(NSNetServiceBrowser *)aNetServiceBrowser} didFindDomain:${2:(NSString *)domainString} moreComing:${3:(BOOL)moreComing}" "netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser didFindDomain:(NSString *)domainString moreComing:(BOOL)moreComing" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netServiceBrowser:didNotSearch:" "netServiceBrowser:${1:(NSNetServiceBrowser *)aNetServiceBrowser} didNotSearch:${2:(NSDictionary *)errorDict}" "netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser didNotSearch:(NSDictionary *)errorDict" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netServiceBrowserDidStopSearch:" "netServiceBrowserDidStopSearch:${1:(NSNetServiceBrowser *)aNetServiceBrowser}" "netServiceBrowserDidStopSearch:(NSNetServiceBrowser *)aNetServiceBrowser" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netServiceBrowserWillSearch:" "netServiceBrowserWillSearch:${1:(NSNetServiceBrowser *)aNetServiceBrowser}" "netServiceBrowserWillSearch:(NSNetServiceBrowser *)aNetServiceBrowser" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netService:didAcceptConnectionWithInputStream:outputStream:" "netService:${1:(NSNetService *)sender} didAcceptConnectionWithInputStream:${2:(NSInputStream *)inputStream} outputStream:${3:(NSOutputStream *)outputStream} NS_AVAILABLE(10_9, 7_0)" "netService:(NSNetService *)sender didAcceptConnectionWithInputStream:(NSInputStream *)inputStream outputStream:(NSOutputStream *)outputStream NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netService:didUpdateTXTRecordData:" "netService:${1:(NSNetService *)sender} didUpdateTXTRecordData:${2:(NSData *)data}" "netService:(NSNetService *)sender didUpdateTXTRecordData:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netServiceDidStop:" "netServiceDidStop:${1:(NSNetService *)sender}" "netServiceDidStop:(NSNetService *)sender" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netService:didNotResolve:" "netService:${1:(NSNetService *)sender} didNotResolve:${2:(NSDictionary *)errorDict}" "netService:(NSNetService *)sender didNotResolve:(NSDictionary *)errorDict" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netServiceDidResolveAddress:" "netServiceDidResolveAddress:${1:(NSNetService *)sender}" "netServiceDidResolveAddress:(NSNetService *)sender" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netServiceWillResolve:" "netServiceWillResolve:${1:(NSNetService *)sender}" "netServiceWillResolve:(NSNetService *)sender" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netService:didNotPublish:" "netService:${1:(NSNetService *)sender} didNotPublish:${2:(NSDictionary *)errorDict}" "netService:(NSNetService *)sender didNotPublish:(NSDictionary *)errorDict" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netServiceDidPublish:" "netServiceDidPublish:${1:(NSNetService *)sender}" "netServiceDidPublish:(NSNetService *)sender" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("netServiceWillPublish:" "netServiceWillPublish:${1:(NSNetService *)sender}" "netServiceWillPublish:(NSNetService *)sender" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stop" "stop" "stop" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("searchForServicesOfType:inDomain:" "searchForServicesOfType:${1:(NSString *)type} inDomain:${2:(NSString *)domainString}" "searchForServicesOfType:(NSString *)type inDomain:(NSString *)domainString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("searchForRegistrationDomains" "searchForRegistrationDomains" "searchForRegistrationDomains" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("searchForBrowsableDomains" "searchForBrowsableDomains" "searchForBrowsableDomains" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeFromRunLoop:forMode:" "removeFromRunLoop:${1:(NSRunLoop *)aRunLoop} forMode:${2:(NSString *)mode}" "removeFromRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scheduleInRunLoop:forMode:" "scheduleInRunLoop:${1:(NSRunLoop *)aRunLoop} forMode:${2:(NSString *)mode}" "scheduleInRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init" "init" "init" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stopMonitoring" "stopMonitoring" "stopMonitoring" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("startMonitoring" "startMonitoring" "startMonitoring" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("TXTRecordData" "TXTRecordData" "TXTRecordData" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setTXTRecordData:" "setTXTRecordData:${1:(NSData *)recordData}" "setTXTRecordData:(NSData *)recordData" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getInputStream:outputStream:" "getInputStream:${1:(out __strong NSInputStream **)inputStream} outputStream:${2:(out __strong NSOutputStream **)outputStream}" "getInputStream:(out __strong NSInputStream **)inputStream outputStream:(out __strong NSOutputStream **)outputStream" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resolveWithTimeout:" "resolveWithTimeout:${1:(NSTimeInterval)timeout}" "resolveWithTimeout:(NSTimeInterval)timeout" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataFromTXTRecordDictionary:" "dataFromTXTRecordDictionary:${1:(NSDictionary *)txtDictionary}" "dataFromTXTRecordDictionary:(NSDictionary *)txtDictionary" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryFromTXTRecordData:" "dictionaryFromTXTRecordData:${1:(NSData *)txtData}" "dictionaryFromTXTRecordData:(NSData *)txtData" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stop" "stop" "stop" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resolve NS_DEPRECATED(10_2, 10_4, 2_0, 2_0)" "resolve NS_DEPRECATED(10_2, 10_4, 2_0, 2_0)" "resolve NS_DEPRECATED(10_2, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("publishWithOptions:" "publishWithOptions:${1:(NSNetServiceOptions)options} NS_AVAILABLE(10_5, 2_0)" "publishWithOptions:(NSNetServiceOptions)options NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("publish" "publish" "publish" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeFromRunLoop:forMode:" "removeFromRunLoop:${1:(NSRunLoop *)aRunLoop} forMode:${2:(NSString *)mode}" "removeFromRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scheduleInRunLoop:forMode:" "scheduleInRunLoop:${1:(NSRunLoop *)aRunLoop} forMode:${2:(NSString *)mode}" "scheduleInRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithDomain:type:name:" "initWithDomain:${1:(NSString *)domain} type:${2:(NSString *)type} name:${3:(NSString *)name}" "initWithDomain:(NSString *)domain type:(NSString *)type name:(NSString *)name" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithDomain:type:name:port:" "initWithDomain:${1:(NSString *)domain} type:${2:(NSString *)type} name:${3:(NSString *)name} port:${4:(int)port}" "initWithDomain:(NSString *)domain type:(NSString *)type name:(NSString *)name port:(int)port" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isOneway" "isOneway" "isOneway" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getArgumentTypeAtIndex:" "getArgumentTypeAtIndex:${1:(NSUInteger)idx} NS_RETURNS_INNER_POINTER" "getArgumentTypeAtIndex:(NSUInteger)idx NS_RETURNS_INNER_POINTER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("signatureWithObjCTypes:" "signatureWithObjCTypes:${1:(const char *)types}" "signatureWithObjCTypes:(const char *)types" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resultAtIndex:" "resultAtIndex:${1:(NSUInteger)idx}" "resultAtIndex:(NSUInteger)idx" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valuesForAttributes:" "valuesForAttributes:${1:(NSArray *)keys}" "valuesForAttributes:(NSArray *)keys" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueForAttribute:" "valueForAttribute:${1:(NSString *)key}" "valueForAttribute:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithURL:" "initWithURL:${1:(NSURL *)url} NS_DESIGNATED_INITIALIZER NS_AVAILABLE_MAC(10_9)" "initWithURL:(NSURL *)url NS_DESIGNATED_INITIALIZER NS_AVAILABLE_MAC(10_9)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("metadataQuery:replacementValueForAttribute:value:" "metadataQuery:${1:(NSMetadataQuery *)query} replacementValueForAttribute:${2:(NSString *)attrName} value:${3:(id)attrValue}" "metadataQuery:(NSMetadataQuery *)query replacementValueForAttribute:(NSString *)attrName value:(id)attrValue" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("metadataQuery:replacementObjectForResultObject:" "metadataQuery:${1:(NSMetadataQuery *)query} replacementObjectForResultObject:${2:(NSMetadataItem *)result}" "metadataQuery:(NSMetadataQuery *)query replacementObjectForResultObject:(NSMetadataItem *)result" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueOfAttribute:forResultAtIndex:" "valueOfAttribute:${1:(NSString *)attrName} forResultAtIndex:${2:(NSUInteger)idx}" "valueOfAttribute:(NSString *)attrName forResultAtIndex:(NSUInteger)idx" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfResult:" "indexOfResult:${1:(id)result}" "indexOfResult:(id)result" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateResultsWithOptions:usingBlock:" "enumerateResultsWithOptions:${1:(NSEnumerationOptions)opts} usingBlock:${2:(void (^)(id result, NSUInteger idx, BOOL *stop))block} NS_AVAILABLE(10_9, 7_0)" "enumerateResultsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id result, NSUInteger idx, BOOL *stop))block NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateResultsUsingBlock:" "enumerateResultsUsingBlock:${1:(void (^)(id result, NSUInteger idx, BOOL *stop))block} NS_AVAILABLE(10_9, 7_0)" "enumerateResultsUsingBlock:(void (^)(id result, NSUInteger idx, BOOL *stop))block NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resultAtIndex:" "resultAtIndex:${1:(NSUInteger)idx}" "resultAtIndex:(NSUInteger)idx" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enableUpdates" "enableUpdates" "enableUpdates" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("disableUpdates" "disableUpdates" "disableUpdates" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stopQuery" "stopQuery" "stopQuery" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("startQuery" "startQuery" "startQuery" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getObjectValue:forString:errorDescription:" "getObjectValue:${1:(out id *)obj} forString:${2:(NSString *)string} errorDescription:${3:(out NSString **)error}" "getObjectValue:(out id *)obj forString:(NSString *)string errorDescription:(out NSString **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unitStringFromKilograms:usedUnit:" "unitStringFromKilograms:${1:(double)numberInKilograms} usedUnit:${2:(NSMassFormatterUnit *)unitp}" "unitStringFromKilograms:(double)numberInKilograms usedUnit:(NSMassFormatterUnit *)unitp" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unitStringFromValue:unit:" "unitStringFromValue:${1:(double)value} unit:${2:(NSMassFormatterUnit)unit}" "unitStringFromValue:(double)value unit:(NSMassFormatterUnit)unit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromKilograms:" "stringFromKilograms:${1:(double)numberInKilograms}" "stringFromKilograms:(double)numberInKilograms" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromValue:unit:" "stringFromValue:${1:(double)value} unit:${2:(NSMassFormatterUnit)unit}" "stringFromValue:(double)value unit:(NSMassFormatterUnit)unit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryRepresentation" "dictionaryRepresentation" "dictionaryRepresentation" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAllObjects" "removeAllObjects" "removeAllObjects" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectEnumerator" "objectEnumerator" "objectEnumerator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("keyEnumerator" "keyEnumerator" "keyEnumerator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setObject:forKey:" "setObject:${1:(id)anObject} forKey:${2:(id)aKey}" "setObject:(id)anObject forKey:(id)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectForKey:" "removeObjectForKey:${1:(id)aKey}" "removeObjectForKey:(id)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectForKey:" "objectForKey:${1:(id)aKey}" "objectForKey:(id)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("weakToWeakObjectsMapTable NS_AVAILABLE(10_8, 6_0)" "weakToWeakObjectsMapTable NS_AVAILABLE(10_8, 6_0)" "weakToWeakObjectsMapTable NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("strongToWeakObjectsMapTable NS_AVAILABLE(10_8, 6_0)" "strongToWeakObjectsMapTable NS_AVAILABLE(10_8, 6_0)" "strongToWeakObjectsMapTable NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("weakToStrongObjectsMapTable NS_AVAILABLE(10_8, 6_0)" "weakToStrongObjectsMapTable NS_AVAILABLE(10_8, 6_0)" "weakToStrongObjectsMapTable NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("strongToStrongObjectsMapTable NS_AVAILABLE(10_8, 6_0)" "strongToStrongObjectsMapTable NS_AVAILABLE(10_8, 6_0)" "strongToStrongObjectsMapTable NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mapTableWithWeakToWeakObjects NS_DEPRECATED_MAC(10_5, 10_8)" "mapTableWithWeakToWeakObjects NS_DEPRECATED_MAC(10_5, 10_8)" "mapTableWithWeakToWeakObjects NS_DEPRECATED_MAC(10_5, 10_8)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mapTableWithStrongToWeakObjects NS_DEPRECATED_MAC(10_5, 10_8)" "mapTableWithStrongToWeakObjects NS_DEPRECATED_MAC(10_5, 10_8)" "mapTableWithStrongToWeakObjects NS_DEPRECATED_MAC(10_5, 10_8)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mapTableWithWeakToStrongObjects NS_DEPRECATED_MAC(10_5, 10_8)" "mapTableWithWeakToStrongObjects NS_DEPRECATED_MAC(10_5, 10_8)" "mapTableWithWeakToStrongObjects NS_DEPRECATED_MAC(10_5, 10_8)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mapTableWithStrongToStrongObjects NS_DEPRECATED_MAC(10_5, 10_8)" "mapTableWithStrongToStrongObjects NS_DEPRECATED_MAC(10_5, 10_8)" "mapTableWithStrongToStrongObjects NS_DEPRECATED_MAC(10_5, 10_8)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mapTableWithKeyOptions:valueOptions:" "mapTableWithKeyOptions:${1:(NSPointerFunctionsOptions)keyOptions} valueOptions:${2:(NSPointerFunctionsOptions)valueOptions}" "mapTableWithKeyOptions:(NSPointerFunctionsOptions)keyOptions valueOptions:(NSPointerFunctionsOptions)valueOptions" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithKeyPointerFunctions:valuePointerFunctions:capacity:" "initWithKeyPointerFunctions:${1:(NSPointerFunctions *)keyFunctions} valuePointerFunctions:${2:(NSPointerFunctions *)valueFunctions} capacity:${3:(NSUInteger)initialCapacity} NS_DESIGNATED_INITIALIZER" "initWithKeyPointerFunctions:(NSPointerFunctions *)keyFunctions valuePointerFunctions:(NSPointerFunctions *)valueFunctions capacity:(NSUInteger)initialCapacity NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithKeyOptions:valueOptions:capacity:" "initWithKeyOptions:${1:(NSPointerFunctionsOptions)keyOptions} valueOptions:${2:(NSPointerFunctionsOptions)valueOptions} capacity:${3:(NSUInteger)initialCapacity} NS_DESIGNATED_INITIALIZER" "initWithKeyOptions:(NSPointerFunctionsOptions)keyOptions valueOptions:(NSPointerFunctionsOptions)valueOptions capacity:(NSUInteger)initialCapacity NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("broadcast" "broadcast" "broadcast" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("signal" "signal" "signal" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("waitUntilDate:" "waitUntilDate:${1:(NSDate *)limit}" "waitUntilDate:(NSDate *)limit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("wait" "wait" "wait" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lockBeforeDate:" "lockBeforeDate:${1:(NSDate *)limit}" "lockBeforeDate:(NSDate *)limit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("tryLock" "tryLock" "tryLock" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lockWhenCondition:beforeDate:" "lockWhenCondition:${1:(NSInteger)condition} beforeDate:${2:(NSDate *)limit}" "lockWhenCondition:(NSInteger)condition beforeDate:(NSDate *)limit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lockBeforeDate:" "lockBeforeDate:${1:(NSDate *)limit}" "lockBeforeDate:(NSDate *)limit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unlockWithCondition:" "unlockWithCondition:${1:(NSInteger)condition}" "unlockWithCondition:(NSInteger)condition" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("tryLockWhenCondition:" "tryLockWhenCondition:${1:(NSInteger)condition}" "tryLockWhenCondition:(NSInteger)condition" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("tryLock" "tryLock" "tryLock" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lockWhenCondition:" "lockWhenCondition:${1:(NSInteger)condition}" "lockWhenCondition:(NSInteger)condition" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCondition:" "initWithCondition:${1:(NSInteger)condition} NS_DESIGNATED_INITIALIZER" "initWithCondition:(NSInteger)condition NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lockBeforeDate:" "lockBeforeDate:${1:(NSDate *)limit}" "lockBeforeDate:(NSDate *)limit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("tryLock" "tryLock" "tryLock" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unlock" "unlock" "unlock" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lock" "lock" "lock" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lineDirectionForLanguage:" "lineDirectionForLanguage:${1:(NSString *)isoLangCode} NS_AVAILABLE(10_6, 4_0)" "lineDirectionForLanguage:(NSString *)isoLangCode NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("characterDirectionForLanguage:" "characterDirectionForLanguage:${1:(NSString *)isoLangCode} NS_AVAILABLE(10_6, 4_0)" "characterDirectionForLanguage:(NSString *)isoLangCode NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("windowsLocaleCodeFromLocaleIdentifier:" "windowsLocaleCodeFromLocaleIdentifier:${1:(NSString *)localeIdentifier} NS_AVAILABLE(10_6, 4_0)" "windowsLocaleCodeFromLocaleIdentifier:(NSString *)localeIdentifier NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localeIdentifierFromWindowsLocaleCode:" "localeIdentifierFromWindowsLocaleCode:${1:(uint32_t)lcid} NS_AVAILABLE(10_6, 4_0)" "localeIdentifierFromWindowsLocaleCode:(uint32_t)lcid NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("canonicalLanguageIdentifierFromString:" "canonicalLanguageIdentifierFromString:${1:(NSString *)string}" "canonicalLanguageIdentifierFromString:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("canonicalLocaleIdentifierFromString:" "canonicalLocaleIdentifierFromString:${1:(NSString *)string}" "canonicalLocaleIdentifierFromString:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localeIdentifierFromComponents:" "localeIdentifierFromComponents:${1:(NSDictionary *)dict}" "localeIdentifierFromComponents:(NSDictionary *)dict" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("componentsFromLocaleIdentifier:" "componentsFromLocaleIdentifier:${1:(NSString *)string}" "componentsFromLocaleIdentifier:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("preferredLanguages NS_AVAILABLE(10_5, 2_0)" "preferredLanguages NS_AVAILABLE(10_5, 2_0)" "preferredLanguages NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("commonISOCurrencyCodes NS_AVAILABLE(10_5, 2_0)" "commonISOCurrencyCodes NS_AVAILABLE(10_5, 2_0)" "commonISOCurrencyCodes NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("ISOCurrencyCodes" "ISOCurrencyCodes" "ISOCurrencyCodes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("ISOCountryCodes" "ISOCountryCodes" "ISOCountryCodes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("ISOLanguageCodes" "ISOLanguageCodes" "ISOLanguageCodes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("availableLocaleIdentifiers" "availableLocaleIdentifiers" "availableLocaleIdentifiers" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_UNAVAILABLE" "init NS_UNAVAILABLE" "init NS_UNAVAILABLE" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localeWithLocaleIdentifier:" "localeWithLocaleIdentifier:${1:(NSString *)ident} NS_AVAILABLE(10_6, 4_0)" "localeWithLocaleIdentifier:(NSString *)ident NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("systemLocale" "systemLocale" "systemLocale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("currentLocale" "currentLocale" "currentLocale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("autoupdatingCurrentLocale NS_AVAILABLE(10_5, 2_0)" "autoupdatingCurrentLocale NS_AVAILABLE(10_5, 2_0)" "autoupdatingCurrentLocale NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithLocaleIdentifier:" "initWithLocaleIdentifier:${1:(NSString *)string} NS_DESIGNATED_INITIALIZER" "initWithLocaleIdentifier:(NSString *)string NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("displayNameForKey:value:" "displayNameForKey:${1:(id)key} value:${2:(id)value}" "displayNameForKey:(id)key value:(id)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectForKey:" "objectForKey:${1:(id)key}" "objectForKey:(id)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:" "enumerateLinguisticTagsInRange:${1:(NSRange)range} scheme:${2:(NSString *)tagScheme} options:${3:(NSLinguisticTaggerOptions)opts} orthography:${4:(NSOrthography *)orthography} usingBlock:${5:(void (^)(NSString *tag, NSRange tokenRange, NSRange sentenceRange, BOOL *stop))block} NS_AVAILABLE(10_7, 5_0)" "enumerateLinguisticTagsInRange:(NSRange)range scheme:(NSString *)tagScheme options:(NSLinguisticTaggerOptions)opts orthography:(NSOrthography *)orthography usingBlock:(void (^)(NSString *tag, NSRange tokenRange, NSRange sentenceRange, BOOL *stop))block NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("linguisticTagsInRange:scheme:options:orthography:tokenRanges:" "linguisticTagsInRange:${1:(NSRange)range} scheme:${2:(NSString *)tagScheme} options:${3:(NSLinguisticTaggerOptions)opts} orthography:${4:(NSOrthography *)orthography} tokenRanges:${5:(NSArray **)tokenRanges} NS_AVAILABLE(10_7, 5_0)" "linguisticTagsInRange:(NSRange)range scheme:(NSString *)tagScheme options:(NSLinguisticTaggerOptions)opts orthography:(NSOrthography *)orthography tokenRanges:(NSArray **)tokenRanges NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:" "possibleTagsAtIndex:${1:(NSUInteger)charIndex} scheme:${2:(NSString *)tagScheme} tokenRange:${3:(NSRangePointer)tokenRange} sentenceRange:${4:(NSRangePointer)sentenceRange} scores:${5:(NSArray **)scores} NS_AVAILABLE(10_7, 5_0)" "possibleTagsAtIndex:(NSUInteger)charIndex scheme:(NSString *)tagScheme tokenRange:(NSRangePointer)tokenRange sentenceRange:(NSRangePointer)sentenceRange scores:(NSArray **)scores NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("tagsInRange:scheme:options:tokenRanges:" "tagsInRange:${1:(NSRange)range} scheme:${2:(NSString *)tagScheme} options:${3:(NSLinguisticTaggerOptions)opts} tokenRanges:${4:(NSArray **)tokenRanges} NS_AVAILABLE(10_7, 5_0)" "tagsInRange:(NSRange)range scheme:(NSString *)tagScheme options:(NSLinguisticTaggerOptions)opts tokenRanges:(NSArray **)tokenRanges NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("tagAtIndex:scheme:tokenRange:sentenceRange:" "tagAtIndex:${1:(NSUInteger)charIndex} scheme:${2:(NSString *)tagScheme} tokenRange:${3:(NSRangePointer)tokenRange} sentenceRange:${4:(NSRangePointer)sentenceRange} NS_AVAILABLE(10_7, 5_0)" "tagAtIndex:(NSUInteger)charIndex scheme:(NSString *)tagScheme tokenRange:(NSRangePointer)tokenRange sentenceRange:(NSRangePointer)sentenceRange NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sentenceRangeForRange:" "sentenceRangeForRange:${1:(NSRange)range} NS_AVAILABLE(10_7, 5_0)" "sentenceRangeForRange:(NSRange)range NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateTagsInRange:scheme:options:usingBlock:" "enumerateTagsInRange:${1:(NSRange)range} scheme:${2:(NSString *)tagScheme} options:${3:(NSLinguisticTaggerOptions)opts} usingBlock:${4:(void (^)(NSString *tag, NSRange tokenRange, NSRange sentenceRange, BOOL *stop))block} NS_AVAILABLE(10_7, 5_0)" "enumerateTagsInRange:(NSRange)range scheme:(NSString *)tagScheme options:(NSLinguisticTaggerOptions)opts usingBlock:(void (^)(NSString *tag, NSRange tokenRange, NSRange sentenceRange, BOOL *stop))block NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringEditedInRange:changeInLength:" "stringEditedInRange:${1:(NSRange)newRange} changeInLength:${2:(NSInteger)delta} NS_AVAILABLE(10_7, 5_0)" "stringEditedInRange:(NSRange)newRange changeInLength:(NSInteger)delta NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orthographyAtIndex:effectiveRange:" "orthographyAtIndex:${1:(NSUInteger)charIndex} effectiveRange:${2:(NSRangePointer)effectiveRange} NS_AVAILABLE(10_7, 5_0)" "orthographyAtIndex:(NSUInteger)charIndex effectiveRange:(NSRangePointer)effectiveRange NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setOrthography:range:" "setOrthography:${1:(NSOrthography *)orthography} range:${2:(NSRange)range} NS_AVAILABLE(10_7, 5_0)" "setOrthography:(NSOrthography *)orthography range:(NSRange)range NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("availableTagSchemesForLanguage:" "availableTagSchemesForLanguage:${1:(NSString *)language} NS_AVAILABLE(10_7, 5_0)" "availableTagSchemesForLanguage:(NSString *)language NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithTagSchemes:options:" "initWithTagSchemes:${1:(NSArray *)tagSchemes} options:${2:(NSUInteger)opts} NS_DESIGNATED_INITIALIZER NS_AVAILABLE(10_7, 5_0)" "initWithTagSchemes:(NSArray *)tagSchemes options:(NSUInteger)opts NS_DESIGNATED_INITIALIZER NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getObjectValue:forString:errorDescription:" "getObjectValue:${1:(out id *)obj} forString:${2:(NSString *)string} errorDescription:${3:(out NSString **)error}" "getObjectValue:(out id *)obj forString:(NSString *)string errorDescription:(out NSString **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unitStringFromMeters:usedUnit:" "unitStringFromMeters:${1:(double)numberInMeters} usedUnit:${2:(NSLengthFormatterUnit *)unitp}" "unitStringFromMeters:(double)numberInMeters usedUnit:(NSLengthFormatterUnit *)unitp" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unitStringFromValue:unit:" "unitStringFromValue:${1:(double)value} unit:${2:(NSLengthFormatterUnit)unit}" "unitStringFromValue:(double)value unit:(NSLengthFormatterUnit)unit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromMeters:" "stringFromMeters:${1:(double)numberInMeters}" "stringFromMeters:(double)numberInMeters" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromValue:unit:" "stringFromValue:${1:(double)value} unit:${2:(NSLengthFormatterUnit)unit}" "stringFromValue:(double)value unit:(NSLengthFormatterUnit)unit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setKeys:triggerChangeNotificationsForDependentKey:" "setKeys:${1:(NSArray *)keys} triggerChangeNotificationsForDependentKey:${2:(NSString *)dependentKey} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "setKeys:(NSArray *)keys triggerChangeNotificationsForDependentKey:(NSString *)dependentKey NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("automaticallyNotifiesObserversForKey:" "automaticallyNotifiesObserversForKey:${1:(NSString *)key}" "automaticallyNotifiesObserversForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("keyPathsForValuesAffectingValueForKey:" "keyPathsForValuesAffectingValueForKey:${1:(NSString *)key} NS_AVAILABLE(10_5, 2_0)" "keyPathsForValuesAffectingValueForKey:(NSString *)key NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("didChangeValueForKey:withSetMutation:usingObjects:" "didChangeValueForKey:${1:(NSString *)key} withSetMutation:${2:(NSKeyValueSetMutationKind)mutationKind} usingObjects:${3:(NSSet *)objects}" "didChangeValueForKey:(NSString *)key withSetMutation:(NSKeyValueSetMutationKind)mutationKind usingObjects:(NSSet *)objects" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("willChangeValueForKey:withSetMutation:usingObjects:" "willChangeValueForKey:${1:(NSString *)key} withSetMutation:${2:(NSKeyValueSetMutationKind)mutationKind} usingObjects:${3:(NSSet *)objects}" "willChangeValueForKey:(NSString *)key withSetMutation:(NSKeyValueSetMutationKind)mutationKind usingObjects:(NSSet *)objects" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("didChange:valuesAtIndexes:forKey:" "didChange:${1:(NSKeyValueChange)changeKind} valuesAtIndexes:${2:(NSIndexSet *)indexes} forKey:${3:(NSString *)key}" "didChange:(NSKeyValueChange)changeKind valuesAtIndexes:(NSIndexSet *)indexes forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("willChange:valuesAtIndexes:forKey:" "willChange:${1:(NSKeyValueChange)changeKind} valuesAtIndexes:${2:(NSIndexSet *)indexes} forKey:${3:(NSString *)key}" "willChange:(NSKeyValueChange)changeKind valuesAtIndexes:(NSIndexSet *)indexes forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("didChangeValueForKey:" "didChangeValueForKey:${1:(NSString *)key}" "didChangeValueForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("willChangeValueForKey:" "willChangeValueForKey:${1:(NSString *)key}" "willChangeValueForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObserver:forKeyPath:" "removeObserver:${1:(NSObject *)observer} forKeyPath:${2:(NSString *)keyPath}" "removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObserver:forKeyPath:context:" "removeObserver:${1:(NSObject *)observer} forKeyPath:${2:(NSString *)keyPath} context:${3:(void *)context} NS_AVAILABLE(10_7, 5_0)" "removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObserver:forKeyPath:options:context:" "addObserver:${1:(NSObject *)observer} forKeyPath:${2:(NSString *)keyPath} options:${3:(NSKeyValueObservingOptions)options} context:${4:(void *)context}" "addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObserver:forKeyPath:" "removeObserver:${1:(NSObject *)observer} forKeyPath:${2:(NSString *)keyPath}" "removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObserver:forKeyPath:context:" "removeObserver:${1:(NSObject *)observer} forKeyPath:${2:(NSString *)keyPath} context:${3:(void *)context} NS_AVAILABLE(10_7, 5_0)" "removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObserver:forKeyPath:options:context:" "addObserver:${1:(NSObject *)observer} forKeyPath:${2:(NSString *)keyPath} options:${3:(NSKeyValueObservingOptions)options} context:${4:(void *)context}" "addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObserver:forKeyPath:" "removeObserver:${1:(NSObject *)observer} forKeyPath:${2:(NSString *)keyPath}" "removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObserver:forKeyPath:context:" "removeObserver:${1:(NSObject *)observer} forKeyPath:${2:(NSString *)keyPath} context:${3:(void *)context} NS_AVAILABLE(10_7, 5_0)" "removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObserver:forKeyPath:options:context:" "addObserver:${1:(NSObject *)observer} forKeyPath:${2:(NSString *)keyPath} options:${3:(NSKeyValueObservingOptions)options} context:${4:(void *)context}" "addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObserver:fromObjectsAtIndexes:forKeyPath:" "removeObserver:${1:(NSObject *)observer} fromObjectsAtIndexes:${2:(NSIndexSet *)indexes} forKeyPath:${3:(NSString *)keyPath}" "removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObserver:fromObjectsAtIndexes:forKeyPath:context:" "removeObserver:${1:(NSObject *)observer} fromObjectsAtIndexes:${2:(NSIndexSet *)indexes} forKeyPath:${3:(NSString *)keyPath} context:${4:(void *)context} NS_AVAILABLE(10_7, 5_0)" "removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObserver:toObjectsAtIndexes:forKeyPath:options:context:" "addObserver:${1:(NSObject *)observer} toObjectsAtIndexes:${2:(NSIndexSet *)indexes} forKeyPath:${3:(NSString *)keyPath} options:${4:(NSKeyValueObservingOptions)options} context:${5:(void *)context}" "addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObserver:forKeyPath:" "removeObserver:${1:(NSObject *)observer} forKeyPath:${2:(NSString *)keyPath}" "removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObserver:forKeyPath:context:" "removeObserver:${1:(NSObject *)observer} forKeyPath:${2:(NSString *)keyPath} context:${3:(void *)context} NS_AVAILABLE(10_7, 5_0)" "removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObserver:forKeyPath:options:context:" "addObserver:${1:(NSObject *)observer} forKeyPath:${2:(NSString *)keyPath} options:${3:(NSKeyValueObservingOptions)options} context:${4:(void *)context}" "addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("observeValueForKeyPath:ofObject:change:context:" "observeValueForKeyPath:${1:(NSString *)keyPath} ofObject:${2:(id)object} change:${3:(NSDictionary *)change} context:${4:(void *)context}" "observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("takeValuesFromDictionary:" "takeValuesFromDictionary:${1:(NSDictionary *)properties} NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" "takeValuesFromDictionary:(NSDictionary *)properties NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valuesForKeys:" "valuesForKeys:${1:(NSArray *)keys} NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" "valuesForKeys:(NSArray *)keys NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unableToSetNilForKey:" "unableToSetNilForKey:${1:(NSString *)key} NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" "unableToSetNilForKey:(NSString *)key NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("handleTakeValue:forUnboundKey:" "handleTakeValue:${1:(id)value} forUnboundKey:${2:(NSString *)key} NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" "handleTakeValue:(id)value forUnboundKey:(NSString *)key NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("handleQueryWithUnboundKey:" "handleQueryWithUnboundKey:${1:(NSString *)key} NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" "handleQueryWithUnboundKey:(NSString *)key NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("takeValue:forKeyPath:" "takeValue:${1:(id)value} forKeyPath:${2:(NSString *)keyPath} NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" "takeValue:(id)value forKeyPath:(NSString *)keyPath NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("takeValue:forKey:" "takeValue:${1:(id)value} forKey:${2:(NSString *)key} NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" "takeValue:(id)value forKey:(NSString *)key NS_DEPRECATED(10_0, 10_3, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("takeStoredValue:forKey:" "takeStoredValue:${1:(id)value} forKey:${2:(NSString *)key} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "takeStoredValue:(id)value forKey:(NSString *)key NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("storedValueForKey:" "storedValueForKey:${1:(NSString *)key} NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "storedValueForKey:(NSString *)key NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("useStoredAccessor NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "useStoredAccessor NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" "useStoredAccessor NS_DEPRECATED(10_0, 10_4, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setValue:forKey:" "setValue:${1:(id)value} forKey:${2:(NSString *)key}" "setValue:(id)value forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueForKey:" "valueForKey:${1:(NSString *)key}" "valueForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setValue:forKey:" "setValue:${1:(id)value} forKey:${2:(NSString *)key} NS_AVAILABLE(10_7, 5_0)" "setValue:(id)value forKey:(NSString *)key NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueForKey:" "valueForKey:${1:(NSString *)key} NS_AVAILABLE(10_7, 5_0)" "valueForKey:(NSString *)key NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setValue:forKey:" "setValue:${1:(id)value} forKey:${2:(NSString *)key}" "setValue:(id)value forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueForKey:" "valueForKey:${1:(NSString *)key}" "valueForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setValue:forKey:" "setValue:${1:(id)value} forKey:${2:(NSString *)key}" "setValue:(id)value forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueForKey:" "valueForKey:${1:(NSString *)key}" "valueForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setValuesForKeysWithDictionary:" "setValuesForKeysWithDictionary:${1:(NSDictionary *)keyedValues}" "setValuesForKeysWithDictionary:(NSDictionary *)keyedValues" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithValuesForKeys:" "dictionaryWithValuesForKeys:${1:(NSArray *)keys}" "dictionaryWithValuesForKeys:(NSArray *)keys" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setNilValueForKey:" "setNilValueForKey:${1:(NSString *)key}" "setNilValueForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setValue:forUndefinedKey:" "setValue:${1:(id)value} forUndefinedKey:${2:(NSString *)key}" "setValue:(id)value forUndefinedKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueForUndefinedKey:" "valueForUndefinedKey:${1:(NSString *)key}" "valueForUndefinedKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mutableSetValueForKeyPath:" "mutableSetValueForKeyPath:${1:(NSString *)keyPath}" "mutableSetValueForKeyPath:(NSString *)keyPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mutableOrderedSetValueForKeyPath:" "mutableOrderedSetValueForKeyPath:${1:(NSString *)keyPath} NS_AVAILABLE(10_7, 5_0)" "mutableOrderedSetValueForKeyPath:(NSString *)keyPath NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mutableArrayValueForKeyPath:" "mutableArrayValueForKeyPath:${1:(NSString *)keyPath}" "mutableArrayValueForKeyPath:(NSString *)keyPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("validateValue:forKeyPath:error:" "validateValue:${1:(inout id *)ioValue} forKeyPath:${2:(NSString *)inKeyPath} error:${3:(out NSError **)outError}" "validateValue:(inout id *)ioValue forKeyPath:(NSString *)inKeyPath error:(out NSError **)outError" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setValue:forKeyPath:" "setValue:${1:(id)value} forKeyPath:${2:(NSString *)keyPath}" "setValue:(id)value forKeyPath:(NSString *)keyPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueForKeyPath:" "valueForKeyPath:${1:(NSString *)keyPath}" "valueForKeyPath:(NSString *)keyPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mutableSetValueForKey:" "mutableSetValueForKey:${1:(NSString *)key}" "mutableSetValueForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mutableOrderedSetValueForKey:" "mutableOrderedSetValueForKey:${1:(NSString *)key} NS_AVAILABLE(10_7, 5_0)" "mutableOrderedSetValueForKey:(NSString *)key NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mutableArrayValueForKey:" "mutableArrayValueForKey:${1:(NSString *)key}" "mutableArrayValueForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("validateValue:forKey:error:" "validateValue:${1:(inout id *)ioValue} forKey:${2:(NSString *)inKey} error:${3:(out NSError **)outError}" "validateValue:(inout id *)ioValue forKey:(NSString *)inKey error:(out NSError **)outError" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setValue:forKey:" "setValue:${1:(id)value} forKey:${2:(NSString *)key}" "setValue:(id)value forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueForKey:" "valueForKey:${1:(NSString *)key}" "valueForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("accessInstanceVariablesDirectly" "accessInstanceVariablesDirectly" "accessInstanceVariablesDirectly" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("classForKeyedUnarchiver" "classForKeyedUnarchiver" "classForKeyedUnarchiver" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("classFallbacksForKeyedArchiver" "classFallbacksForKeyedArchiver" "classFallbacksForKeyedArchiver" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replacementObjectForKeyedArchiver:" "replacementObjectForKeyedArchiver:${1:(NSKeyedArchiver *)archiver}" "replacementObjectForKeyedArchiver:(NSKeyedArchiver *)archiver" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unarchiverDidFinish:" "unarchiverDidFinish:${1:(NSKeyedUnarchiver *)unarchiver}" "unarchiverDidFinish:(NSKeyedUnarchiver *)unarchiver" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unarchiverWillFinish:" "unarchiverWillFinish:${1:(NSKeyedUnarchiver *)unarchiver}" "unarchiverWillFinish:(NSKeyedUnarchiver *)unarchiver" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unarchiver:willReplaceObject:withObject:" "unarchiver:${1:(NSKeyedUnarchiver *)unarchiver} willReplaceObject:${2:(id)object} withObject:${3:(id)newObject}" "unarchiver:(NSKeyedUnarchiver *)unarchiver willReplaceObject:(id)object withObject:(id)newObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unarchiver:didDecodeObject:" "unarchiver:${1:(NSKeyedUnarchiver *)unarchiver} didDecodeObject:${2:(id) NS_RELEASES_ARGUMENT} object NS_RETURNS_RETAINED" "unarchiver:(NSKeyedUnarchiver *)unarchiver didDecodeObject:(id) NS_RELEASES_ARGUMENT object NS_RETURNS_RETAINED" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unarchiver:cannotDecodeObjectOfClassName:originalClasses:" "unarchiver:${1:(NSKeyedUnarchiver *)unarchiver} cannotDecodeObjectOfClassName:${2:(NSString *)name} originalClasses:${3:(NSArray *)classNames}" "unarchiver:(NSKeyedUnarchiver *)unarchiver cannotDecodeObjectOfClassName:(NSString *)name originalClasses:(NSArray *)classNames" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("archiverDidFinish:" "archiverDidFinish:${1:(NSKeyedArchiver *)archiver}" "archiverDidFinish:(NSKeyedArchiver *)archiver" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("archiverWillFinish:" "archiverWillFinish:${1:(NSKeyedArchiver *)archiver}" "archiverWillFinish:(NSKeyedArchiver *)archiver" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("archiver:willReplaceObject:withObject:" "archiver:${1:(NSKeyedArchiver *)archiver} willReplaceObject:${2:(id)object} withObject:${3:(id)newObject}" "archiver:(NSKeyedArchiver *)archiver willReplaceObject:(id)object withObject:(id)newObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("archiver:didEncodeObject:" "archiver:${1:(NSKeyedArchiver *)archiver} didEncodeObject:${2:(id)object}" "archiver:(NSKeyedArchiver *)archiver didEncodeObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("archiver:willEncodeObject:" "archiver:${1:(NSKeyedArchiver *)archiver} willEncodeObject:${2:(id)object}" "archiver:(NSKeyedArchiver *)archiver willEncodeObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setRequiresSecureCoding:" "setRequiresSecureCoding:${1:(BOOL)b} NS_AVAILABLE(10_8, 6_0)" "setRequiresSecureCoding:(BOOL)b NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeBytesForKey:returnedLength:" "decodeBytesForKey:${1:(NSString *)key} returnedLength:${2:(NSUInteger *)lengthp} NS_RETURNS_INNER_POINTER" "decodeBytesForKey:(NSString *)key returnedLength:(NSUInteger *)lengthp NS_RETURNS_INNER_POINTER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeDoubleForKey:" "decodeDoubleForKey:${1:(NSString *)key}" "decodeDoubleForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeFloatForKey:" "decodeFloatForKey:${1:(NSString *)key}" "decodeFloatForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeInt64ForKey:" "decodeInt64ForKey:${1:(NSString *)key}" "decodeInt64ForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeInt32ForKey:" "decodeInt32ForKey:${1:(NSString *)key}" "decodeInt32ForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeIntForKey:" "decodeIntForKey:${1:(NSString *)key}" "decodeIntForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeBoolForKey:" "decodeBoolForKey:${1:(NSString *)key}" "decodeBoolForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeObjectForKey:" "decodeObjectForKey:${1:(NSString *)key}" "decodeObjectForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("containsValueForKey:" "containsValueForKey:${1:(NSString *)key}" "containsValueForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("classForClassName:" "classForClassName:${1:(NSString *)codedName}" "classForClassName:(NSString *)codedName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("classForClassName:" "classForClassName:${1:(NSString *)codedName}" "classForClassName:(NSString *)codedName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setClass:forClassName:" "setClass:${1:(Class)cls} forClassName:${2:(NSString *)codedName}" "setClass:(Class)cls forClassName:(NSString *)codedName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setClass:forClassName:" "setClass:${1:(Class)cls} forClassName:${2:(NSString *)codedName}" "setClass:(Class)cls forClassName:(NSString *)codedName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("finishDecoding" "finishDecoding" "finishDecoding" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initForReadingWithData:" "initForReadingWithData:${1:(NSData *)data}" "initForReadingWithData:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unarchiveObjectWithFile:" "unarchiveObjectWithFile:${1:(NSString *)path}" "unarchiveObjectWithFile:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unarchiveObjectWithData:" "unarchiveObjectWithData:${1:(NSData *)data}" "unarchiveObjectWithData:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setRequiresSecureCoding:" "setRequiresSecureCoding:${1:(BOOL)b} NS_AVAILABLE(10_8, 6_0)" "setRequiresSecureCoding:(BOOL)b NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeBytes:length:forKey:" "encodeBytes:${1:(const uint8_t *)bytesp} length:${2:(NSUInteger)lenv} forKey:${3:(NSString *)key}" "encodeBytes:(const uint8_t *)bytesp length:(NSUInteger)lenv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeDouble:forKey:" "encodeDouble:${1:(double)realv} forKey:${2:(NSString *)key}" "encodeDouble:(double)realv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeFloat:forKey:" "encodeFloat:${1:(float)realv} forKey:${2:(NSString *)key}" "encodeFloat:(float)realv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeInt64:forKey:" "encodeInt64:${1:(int64_t)intv} forKey:${2:(NSString *)key}" "encodeInt64:(int64_t)intv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeInt32:forKey:" "encodeInt32:${1:(int32_t)intv} forKey:${2:(NSString *)key}" "encodeInt32:(int32_t)intv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeInt:forKey:" "encodeInt:${1:(int)intv} forKey:${2:(NSString *)key}" "encodeInt:(int)intv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeBool:forKey:" "encodeBool:${1:(BOOL)boolv} forKey:${2:(NSString *)key}" "encodeBool:(BOOL)boolv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeConditionalObject:forKey:" "encodeConditionalObject:${1:(id)objv} forKey:${2:(NSString *)key}" "encodeConditionalObject:(id)objv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeObject:forKey:" "encodeObject:${1:(id)objv} forKey:${2:(NSString *)key}" "encodeObject:(id)objv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("classNameForClass:" "classNameForClass:${1:(Class)cls}" "classNameForClass:(Class)cls" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("classNameForClass:" "classNameForClass:${1:(Class)cls}" "classNameForClass:(Class)cls" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setClassName:forClass:" "setClassName:${1:(NSString *)codedName} forClass:${2:(Class)cls}" "setClassName:(NSString *)codedName forClass:(Class)cls" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setClassName:forClass:" "setClassName:${1:(NSString *)codedName} forClass:${2:(Class)cls}" "setClassName:(NSString *)codedName forClass:(Class)cls" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("finishEncoding" "finishEncoding" "finishEncoding" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initForWritingWithMutableData:" "initForWritingWithMutableData:${1:(NSMutableData *)data}" "initForWritingWithMutableData:(NSMutableData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("archiveRootObject:toFile:" "archiveRootObject:${1:(id)rootObject} toFile:${2:(NSString *)path}" "archiveRootObject:(id)rootObject toFile:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("archivedDataWithRootObject:" "archivedDataWithRootObject:${1:(id)rootObject}" "archivedDataWithRootObject:(id)rootObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("JSONObjectWithStream:options:error:" "JSONObjectWithStream:${1:(NSInputStream *)stream} options:${2:(NSJSONReadingOptions)opt} error:${3:(NSError **)error}" "JSONObjectWithStream:(NSInputStream *)stream options:(NSJSONReadingOptions)opt error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeJSONObject:toStream:options:error:" "writeJSONObject:${1:(id)obj} toStream:${2:(NSOutputStream *)stream} options:${3:(NSJSONWritingOptions)opt} error:${4:(NSError **)error}" "writeJSONObject:(id)obj toStream:(NSOutputStream *)stream options:(NSJSONWritingOptions)opt error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("JSONObjectWithData:options:error:" "JSONObjectWithData:${1:(NSData *)data} options:${2:(NSJSONReadingOptions)opt} error:${3:(NSError **)error}" "JSONObjectWithData:(NSData *)data options:(NSJSONReadingOptions)opt error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithJSONObject:options:error:" "dataWithJSONObject:${1:(id)obj} options:${2:(NSJSONWritingOptions)opt} error:${3:(NSError **)error}" "dataWithJSONObject:(id)obj options:(NSJSONWritingOptions)opt error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isValidJSONObject:" "isValidJSONObject:${1:(id)obj}" "isValidJSONObject:(id)obj" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("loadPreviewImageWithOptions:completionHandler:" "loadPreviewImageWithOptions:${1:(NSDictionary *)options} completionHandler:${2:(NSItemProviderCompletionHandler)completionHandler} NS_AVAILABLE(10_10, 8_0)" "loadPreviewImageWithOptions:(NSDictionary *)options completionHandler:(NSItemProviderCompletionHandler)completionHandler NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("loadItemForTypeIdentifier:options:completionHandler:" "loadItemForTypeIdentifier:${1:(NSString *)typeIdentifier} options:${2:(NSDictionary *)options} completionHandler:${3:(NSItemProviderCompletionHandler)completionHandler}" "loadItemForTypeIdentifier:(NSString *)typeIdentifier options:(NSDictionary *)options completionHandler:(NSItemProviderCompletionHandler)completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("hasItemConformingToTypeIdentifier:" "hasItemConformingToTypeIdentifier:${1:(NSString *)typeIdentifier}" "hasItemConformingToTypeIdentifier:(NSString *)typeIdentifier" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("registerItemForTypeIdentifier:loadHandler:" "registerItemForTypeIdentifier:${1:(NSString *)typeIdentifier} loadHandler:${2:(NSItemProviderLoadHandler)loadHandler}" "registerItemForTypeIdentifier:(NSString *)typeIdentifier loadHandler:(NSItemProviderLoadHandler)loadHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfURL:" "initWithContentsOfURL:${1:(NSURL *)fileURL}" "initWithContentsOfURL:(NSURL *)fileURL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithItem:typeIdentifier:" "initWithItem:${1:(id <NSSecureCoding>)item} typeIdentifier:${2:(NSString *)typeIdentifier} NS_DESIGNATED_INITIALIZER" "initWithItem:(id <NSSecureCoding>)item typeIdentifier:(NSString *)typeIdentifier NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("invokeWithTarget:" "invokeWithTarget:${1:(id)target}" "invokeWithTarget:(id)target" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("invoke" "invoke" "invoke" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setArgument:atIndex:" "setArgument:${1:(void *)argumentLocation} atIndex:${2:(NSInteger)idx}" "setArgument:(void *)argumentLocation atIndex:(NSInteger)idx" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getArgument:atIndex:" "getArgument:${1:(void *)argumentLocation} atIndex:${2:(NSInteger)idx}" "getArgument:(void *)argumentLocation atIndex:(NSInteger)idx" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setReturnValue:" "setReturnValue:${1:(void *)retLoc}" "setReturnValue:(void *)retLoc" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getReturnValue:" "getReturnValue:${1:(void *)retLoc}" "getReturnValue:(void *)retLoc" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("retainArguments" "retainArguments" "retainArguments" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("invocationWithMethodSignature:" "invocationWithMethodSignature:${1:(NSMethodSignature *)sig}" "invocationWithMethodSignature:(NSMethodSignature *)sig" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("shiftIndexesStartingAtIndex:by:" "shiftIndexesStartingAtIndex:${1:(NSUInteger)index} by:${2:(NSInteger)delta}" "shiftIndexesStartingAtIndex:(NSUInteger)index by:(NSInteger)delta" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeIndexesInRange:" "removeIndexesInRange:${1:(NSRange)range}" "removeIndexesInRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addIndexesInRange:" "addIndexesInRange:${1:(NSRange)range}" "addIndexesInRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeIndex:" "removeIndex:${1:(NSUInteger)value}" "removeIndex:(NSUInteger)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addIndex:" "addIndex:${1:(NSUInteger)value}" "addIndex:(NSUInteger)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAllIndexes" "removeAllIndexes" "removeAllIndexes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeIndexes:" "removeIndexes:${1:(NSIndexSet *)indexSet}" "removeIndexes:(NSIndexSet *)indexSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addIndexes:" "addIndexes:${1:(NSIndexSet *)indexSet}" "addIndexes:(NSIndexSet *)indexSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateRangesInRange:options:usingBlock:" "enumerateRangesInRange:${1:(NSRange)range} options:${2:(NSEnumerationOptions)opts} usingBlock:${3:(void (^)(NSRange range, BOOL *stop))block} NS_AVAILABLE(10_7, 5_0)" "enumerateRangesInRange:(NSRange)range options:(NSEnumerationOptions)opts usingBlock:(void (^)(NSRange range, BOOL *stop))block NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateRangesWithOptions:usingBlock:" "enumerateRangesWithOptions:${1:(NSEnumerationOptions)opts} usingBlock:${2:(void (^)(NSRange range, BOOL *stop))block} NS_AVAILABLE(10_7, 5_0)" "enumerateRangesWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(NSRange range, BOOL *stop))block NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateRangesUsingBlock:" "enumerateRangesUsingBlock:${1:(void (^)(NSRange range, BOOL *stop))block} NS_AVAILABLE(10_7, 5_0)" "enumerateRangesUsingBlock:(void (^)(NSRange range, BOOL *stop))block NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexesInRange:options:passingTest:" "indexesInRange:${1:(NSRange)range} options:${2:(NSEnumerationOptions)opts} passingTest:${3:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "indexesInRange:(NSRange)range options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexesWithOptions:passingTest:" "indexesWithOptions:${1:(NSEnumerationOptions)opts} passingTest:${2:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "indexesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexesPassingTest:" "indexesPassingTest:${1:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "indexesPassingTest:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexInRange:options:passingTest:" "indexInRange:${1:(NSRange)range} options:${2:(NSEnumerationOptions)opts} passingTest:${3:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "indexInRange:(NSRange)range options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexWithOptions:passingTest:" "indexWithOptions:${1:(NSEnumerationOptions)opts} passingTest:${2:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "indexWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexPassingTest:" "indexPassingTest:${1:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "indexPassingTest:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateIndexesInRange:options:usingBlock:" "enumerateIndexesInRange:${1:(NSRange)range} options:${2:(NSEnumerationOptions)opts} usingBlock:${3:(void (^)(NSUInteger idx, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateIndexesInRange:(NSRange)range options:(NSEnumerationOptions)opts usingBlock:(void (^)(NSUInteger idx, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateIndexesWithOptions:usingBlock:" "enumerateIndexesWithOptions:${1:(NSEnumerationOptions)opts} usingBlock:${2:(void (^)(NSUInteger idx, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateIndexesWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(NSUInteger idx, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateIndexesUsingBlock:" "enumerateIndexesUsingBlock:${1:(void (^)(NSUInteger idx, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateIndexesUsingBlock:(void (^)(NSUInteger idx, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("intersectsIndexesInRange:" "intersectsIndexesInRange:${1:(NSRange)range}" "intersectsIndexesInRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("containsIndexes:" "containsIndexes:${1:(NSIndexSet *)indexSet}" "containsIndexes:(NSIndexSet *)indexSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("containsIndexesInRange:" "containsIndexesInRange:${1:(NSRange)range}" "containsIndexesInRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("containsIndex:" "containsIndex:${1:(NSUInteger)value}" "containsIndex:(NSUInteger)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("countOfIndexesInRange:" "countOfIndexesInRange:${1:(NSRange)range} NS_AVAILABLE(10_5, 2_0)" "countOfIndexesInRange:(NSRange)range NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getIndexes:maxCount:inIndexRange:" "getIndexes:${1:(NSUInteger *)indexBuffer} maxCount:${2:(NSUInteger)bufferSize} inIndexRange:${3:(NSRangePointer)range}" "getIndexes:(NSUInteger *)indexBuffer maxCount:(NSUInteger)bufferSize inIndexRange:(NSRangePointer)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexLessThanOrEqualToIndex:" "indexLessThanOrEqualToIndex:${1:(NSUInteger)value}" "indexLessThanOrEqualToIndex:(NSUInteger)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexGreaterThanOrEqualToIndex:" "indexGreaterThanOrEqualToIndex:${1:(NSUInteger)value}" "indexGreaterThanOrEqualToIndex:(NSUInteger)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexLessThanIndex:" "indexLessThanIndex:${1:(NSUInteger)value}" "indexLessThanIndex:(NSUInteger)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexGreaterThanIndex:" "indexGreaterThanIndex:${1:(NSUInteger)value}" "indexGreaterThanIndex:(NSUInteger)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToIndexSet:" "isEqualToIndexSet:${1:(NSIndexSet *)indexSet}" "isEqualToIndexSet:(NSIndexSet *)indexSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithIndex:" "initWithIndex:${1:(NSUInteger)value}" "initWithIndex:(NSUInteger)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithIndexSet:" "initWithIndexSet:${1:(NSIndexSet *)indexSet} NS_DESIGNATED_INITIALIZER" "initWithIndexSet:(NSIndexSet *)indexSet NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithIndexesInRange:" "initWithIndexesInRange:${1:(NSRange)range} NS_DESIGNATED_INITIALIZER" "initWithIndexesInRange:(NSRange)range NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexSetWithIndexesInRange:" "indexSetWithIndexesInRange:${1:(NSRange)range}" "indexSetWithIndexesInRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexSetWithIndex:" "indexSetWithIndex:${1:(NSUInteger)value}" "indexSetWithIndex:(NSUInteger)value" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexSet" "indexSet" "indexSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("compare:" "compare:${1:(NSIndexPath *)otherObject}" "compare:(NSIndexPath *)otherObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getIndexes:" "getIndexes:${1:(NSUInteger *)indexes}" "getIndexes:(NSUInteger *)indexes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexAtPosition:" "indexAtPosition:${1:(NSUInteger)position}" "indexAtPosition:(NSUInteger)position" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexPathByRemovingLastIndex" "indexPathByRemovingLastIndex" "indexPathByRemovingLastIndex" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexPathByAddingIndex:" "indexPathByAddingIndex:${1:(NSUInteger)index}" "indexPathByAddingIndex:(NSUInteger)index" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithIndex:" "initWithIndex:${1:(NSUInteger)index}" "initWithIndex:(NSUInteger)index" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithIndexes:length:" "initWithIndexes:${1:(const NSUInteger [])indexes} length:${2:(NSUInteger)length} NS_DESIGNATED_INITIALIZER" "initWithIndexes:(const NSUInteger [])indexes length:(NSUInteger)length NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexPathWithIndexes:length:" "indexPathWithIndexes:${1:(const NSUInteger [])indexes} length:${2:(NSUInteger)length}" "indexPathWithIndexes:(const NSUInteger [])indexes length:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexPathWithIndex:" "indexPathWithIndex:${1:(NSUInteger)index}" "indexPathWithIndex:(NSUInteger)index" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getCookiesForTask:completionHandler:" "getCookiesForTask:${1:(NSURLSessionTask *)task} completionHandler:${2:(void (^) (NSArray *cookies))completionHandler} NS_AVAILABLE(10_10, 8_0)" "getCookiesForTask:(NSURLSessionTask *)task completionHandler:(void (^) (NSArray *cookies))completionHandler NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("storeCookies:forTask:" "storeCookies:${1:(NSArray *)cookies} forTask:${2:(NSURLSessionTask *)task} NS_AVAILABLE(10_10, 8_0)" "storeCookies:(NSArray *)cookies forTask:(NSURLSessionTask *)task NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortedCookiesUsingDescriptors:" "sortedCookiesUsingDescriptors:${1:(NSArray*) sortOrder} NS_AVAILABLE(10_7, 5_0)" "sortedCookiesUsingDescriptors:(NSArray*) sortOrder NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setCookies:forURL:mainDocumentURL:" "setCookies:${1:(NSArray *)cookies} forURL:${2:(NSURL *)URL} mainDocumentURL:${3:(NSURL *)mainDocumentURL}" "setCookies:(NSArray *)cookies forURL:(NSURL *)URL mainDocumentURL:(NSURL *)mainDocumentURL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cookiesForURL:" "cookiesForURL:${1:(NSURL *)URL}" "cookiesForURL:(NSURL *)URL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeCookiesSinceDate:" "removeCookiesSinceDate:${1:(NSDate *)date} NS_AVAILABLE(10_10, 8_0)" "removeCookiesSinceDate:(NSDate *)date NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("deleteCookie:" "deleteCookie:${1:(NSHTTPCookie *)cookie}" "deleteCookie:(NSHTTPCookie *)cookie" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setCookie:" "setCookie:${1:(NSHTTPCookie *)cookie}" "setCookie:(NSHTTPCookie *)cookie" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sharedHTTPCookieStorage" "sharedHTTPCookieStorage" "sharedHTTPCookieStorage" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cookiesWithResponseHeaderFields:forURL:" "cookiesWithResponseHeaderFields:${1:(NSDictionary *)headerFields} forURL:${2:(NSURL *)URL}" "cookiesWithResponseHeaderFields:(NSDictionary *)headerFields forURL:(NSURL *)URL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("requestHeaderFieldsWithCookies:" "requestHeaderFieldsWithCookies:${1:(NSArray *)cookies}" "requestHeaderFieldsWithCookies:(NSArray *)cookies" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cookieWithProperties:" "cookieWithProperties:${1:(NSDictionary *)properties}" "cookieWithProperties:(NSDictionary *)properties" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithProperties:" "initWithProperties:${1:(NSDictionary *)properties}" "initWithProperties:(NSDictionary *)properties" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("minusHashTable:" "minusHashTable:${1:(NSHashTable *)other}" "minusHashTable:(NSHashTable *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unionHashTable:" "unionHashTable:${1:(NSHashTable *)other}" "unionHashTable:(NSHashTable *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("intersectHashTable:" "intersectHashTable:${1:(NSHashTable *)other}" "intersectHashTable:(NSHashTable *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isSubsetOfHashTable:" "isSubsetOfHashTable:${1:(NSHashTable *)other}" "isSubsetOfHashTable:(NSHashTable *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToHashTable:" "isEqualToHashTable:${1:(NSHashTable *)other}" "isEqualToHashTable:(NSHashTable *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("intersectsHashTable:" "intersectsHashTable:${1:(NSHashTable *)other}" "intersectsHashTable:(NSHashTable *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("containsObject:" "containsObject:${1:(id)anObject}" "containsObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAllObjects" "removeAllObjects" "removeAllObjects" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObject:" "removeObject:${1:(id)object}" "removeObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObject:" "addObject:${1:(id)object}" "addObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectEnumerator" "objectEnumerator" "objectEnumerator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("member:" "member:${1:(id)object}" "member:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("weakObjectsHashTable NS_AVAILABLE(10_8, 6_0)" "weakObjectsHashTable NS_AVAILABLE(10_8, 6_0)" "weakObjectsHashTable NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("hashTableWithWeakObjects NS_DEPRECATED_MAC(10_5, 10_8)" "hashTableWithWeakObjects NS_DEPRECATED_MAC(10_5, 10_8)" "hashTableWithWeakObjects NS_DEPRECATED_MAC(10_5, 10_8)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("hashTableWithOptions:" "hashTableWithOptions:${1:(NSPointerFunctionsOptions)options}" "hashTableWithOptions:(NSPointerFunctionsOptions)options" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithPointerFunctions:capacity:" "initWithPointerFunctions:${1:(NSPointerFunctions *)functions} capacity:${2:(NSUInteger)initialCapacity} NS_DESIGNATED_INITIALIZER" "initWithPointerFunctions:(NSPointerFunctions *)functions capacity:(NSUInteger)initialCapacity NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithOptions:capacity:" "initWithOptions:${1:(NSPointerFunctionsOptions)options} capacity:${2:(NSUInteger)initialCapacity} NS_DESIGNATED_INITIALIZER" "initWithOptions:(NSPointerFunctionsOptions)options capacity:(NSUInteger)initialCapacity NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:" "isPartialStringValid:${1:(NSString **)partialStringPtr} proposedSelectedRange:${2:(NSRangePointer)proposedSelRangePtr} originalString:${3:(NSString *)origString} originalSelectedRange:${4:(NSRange)origSelRange} errorDescription:${5:(NSString **)error}" "isPartialStringValid:(NSString **)partialStringPtr proposedSelectedRange:(NSRangePointer)proposedSelRangePtr originalString:(NSString *)origString originalSelectedRange:(NSRange)origSelRange errorDescription:(NSString **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isPartialStringValid:newEditingString:errorDescription:" "isPartialStringValid:${1:(NSString *)partialString} newEditingString:${2:(NSString **)newString} errorDescription:${3:(NSString **)error}" "isPartialStringValid:(NSString *)partialString newEditingString:(NSString **)newString errorDescription:(NSString **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getObjectValue:forString:errorDescription:" "getObjectValue:${1:(out id *)obj} forString:${2:(NSString *)string} errorDescription:${3:(out NSString **)error}" "getObjectValue:(out id *)obj forString:(NSString *)string errorDescription:(out NSString **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("editingStringForObjectValue:" "editingStringForObjectValue:${1:(id)obj}" "editingStringForObjectValue:(id)obj" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("attributedStringForObjectValue:withDefaultAttributes:" "attributedStringForObjectValue:${1:(id)obj} withDefaultAttributes:${2:(NSDictionary *)attrs}" "attributedStringForObjectValue:(id)obj withDefaultAttributes:(NSDictionary *)attrs" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringForObjectValue:" "stringForObjectValue:${1:(id)obj}" "stringForObjectValue:(id)obj" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("symbolicLinkDestination NS_DEPRECATED_MAC(10_0, 10_10, \"Use -symbolicLinkDestinationURL instead.\")" "symbolicLinkDestination NS_DEPRECATED_MAC(10_0, 10_10, \"Use -symbolicLinkDestinationURL instead.\")" "symbolicLinkDestination NS_DEPRECATED_MAC(10_0, 10_10, \"Use -symbolicLinkDestinationURL instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addSymbolicLinkWithDestination:preferredFilename:initWithSymbolicLinkDestinationURL:setPreferredFileName:addFileWrapper:" "addSymbolicLinkWithDestination:${1:(NSString *)path} preferredFilename:${2:(NSString *)filename} NS_DEPRECATED_MAC(10_0, 10_10, \"Instantiate a new NSFileWrapper with -initWithSymbolicLinkDestinationURL:, send it -setPreferredFileName: if necessary, then use -addFileWrapper: instead.\")" "addSymbolicLinkWithDestination:(NSString *)path preferredFilename:(NSString *)filename NS_DEPRECATED_MAC(10_0, 10_10, \"Instantiate a new NSFileWrapper with -initWithSymbolicLinkDestinationURL:, send it -setPreferredFileName: if necessary, then use -addFileWrapper: instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addFileWithPath:initWithURL:options:error:setPreferredFileName:addFileWrapper:" "addFileWithPath:${1:(NSString *)path} NS_DEPRECATED_MAC(10_0, 10_10, \"Instantiate a new NSFileWrapper with -initWithURL:options:error:, send it -setPreferredFileName: if necessary, then use -addFileWrapper: instead.\")" "addFileWithPath:(NSString *)path NS_DEPRECATED_MAC(10_0, 10_10, \"Instantiate a new NSFileWrapper with -initWithURL:options:error:, send it -setPreferredFileName: if necessary, then use -addFileWrapper: instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToFile:atomically:updateFilenames:writeToURL:options:originalContentsURL:error:" "writeToFile:${1:(NSString *)path} atomically:${2:(BOOL)atomicFlag} updateFilenames:${3:(BOOL)updateFilenamesFlag} NS_DEPRECATED_MAC(10_0, 10_10, \"Use -writeToURL:options:originalContentsURL:error: instead.\")" "writeToFile:(NSString *)path atomically:(BOOL)atomicFlag updateFilenames:(BOOL)updateFilenamesFlag NS_DEPRECATED_MAC(10_0, 10_10, \"Use -writeToURL:options:originalContentsURL:error: instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("updateFromPath:readFromURL:options:error:" "updateFromPath:${1:(NSString *)path} NS_DEPRECATED_MAC(10_0, 10_10, \"Use -readFromURL:options:error: instead.\")" "updateFromPath:(NSString *)path NS_DEPRECATED_MAC(10_0, 10_10, \"Use -readFromURL:options:error: instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("needsToBeUpdatedFromPath:matchesContentsOfURL:" "needsToBeUpdatedFromPath:${1:(NSString *)path} NS_DEPRECATED_MAC(10_0, 10_10, \"Use -matchesContentsOfURL: instead.\")" "needsToBeUpdatedFromPath:(NSString *)path NS_DEPRECATED_MAC(10_0, 10_10, \"Use -matchesContentsOfURL: instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initSymbolicLinkWithDestination:initSymbolicLinkWithDestinationURL:setPreferredFileName:" "initSymbolicLinkWithDestination:${1:(NSString *)path} NS_DEPRECATED_MAC(10_0, 10_10, \"Use -initSymbolicLinkWithDestinationURL: and -setPreferredFileName:, if necessary, instead.\")" "initSymbolicLinkWithDestination:(NSString *)path NS_DEPRECATED_MAC(10_0, 10_10, \"Use -initSymbolicLinkWithDestinationURL: and -setPreferredFileName:, if necessary, instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithPath:initWithURL:options:error:" "initWithPath:${1:(NSString *)path} NS_DEPRECATED_MAC(10_0, 10_10, \"Use -initWithURL:options:error: instead.\")" "initWithPath:(NSString *)path NS_DEPRECATED_MAC(10_0, 10_10, \"Use -initWithURL:options:error: instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("keyForFileWrapper:" "keyForFileWrapper:${1:(NSFileWrapper *)child}" "keyForFileWrapper:(NSFileWrapper *)child" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeFileWrapper:" "removeFileWrapper:${1:(NSFileWrapper *)child}" "removeFileWrapper:(NSFileWrapper *)child" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addRegularFileWithContents:preferredFilename:" "addRegularFileWithContents:${1:(NSData *)data} preferredFilename:${2:(NSString *)fileName}" "addRegularFileWithContents:(NSData *)data preferredFilename:(NSString *)fileName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addFileWrapper:" "addFileWrapper:${1:(NSFileWrapper *)child}" "addFileWrapper:(NSFileWrapper *)child" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToURL:options:originalContentsURL:error:" "writeToURL:${1:(NSURL *)url} options:${2:(NSFileWrapperWritingOptions)options} originalContentsURL:${3:(NSURL *)originalContentsURL} error:${4:(NSError **)outError} NS_AVAILABLE(10_6, 4_0)" "writeToURL:(NSURL *)url options:(NSFileWrapperWritingOptions)options originalContentsURL:(NSURL *)originalContentsURL error:(NSError **)outError NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("readFromURL:options:error:" "readFromURL:${1:(NSURL *)url} options:${2:(NSFileWrapperReadingOptions)options} error:${3:(NSError **)outError} NS_AVAILABLE(10_6, 4_0)" "readFromURL:(NSURL *)url options:(NSFileWrapperReadingOptions)options error:(NSError **)outError NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("matchesContentsOfURL:" "matchesContentsOfURL:${1:(NSURL *)url} NS_AVAILABLE(10_6, 4_0)" "matchesContentsOfURL:(NSURL *)url NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)inCoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)inCoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithSerializedRepresentation:" "initWithSerializedRepresentation:${1:(NSData *)serializeRepresentation} NS_DESIGNATED_INITIALIZER" "initWithSerializedRepresentation:(NSData *)serializeRepresentation NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initSymbolicLinkWithDestinationURL:" "initSymbolicLinkWithDestinationURL:${1:(NSURL *)url} NS_DESIGNATED_INITIALIZER NS_AVAILABLE(10_6, 4_0)" "initSymbolicLinkWithDestinationURL:(NSURL *)url NS_DESIGNATED_INITIALIZER NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initRegularFileWithContents:" "initRegularFileWithContents:${1:(NSData *)contents} NS_DESIGNATED_INITIALIZER" "initRegularFileWithContents:(NSData *)contents NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initDirectoryWithFileWrappers:" "initDirectoryWithFileWrappers:${1:(NSDictionary *)childrenByPreferredName} NS_DESIGNATED_INITIALIZER" "initDirectoryWithFileWrappers:(NSDictionary *)childrenByPreferredName NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithURL:options:error:" "initWithURL:${1:(NSURL *)url} options:${2:(NSFileWrapperReadingOptions)options} error:${3:(NSError **)outError} NS_DESIGNATED_INITIALIZER NS_AVAILABLE(10_6, 4_0)" "initWithURL:(NSURL *)url options:(NSFileWrapperReadingOptions)options error:(NSError **)outError NS_DESIGNATED_INITIALIZER NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeOtherVersionsOfItemAtURL:error:" "removeOtherVersionsOfItemAtURL:${1:(NSURL *)url} error:${2:(NSError **)outError}" "removeOtherVersionsOfItemAtURL:(NSURL *)url error:(NSError **)outError" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAndReturnError:" "removeAndReturnError:${1:(NSError **)outError}" "removeAndReturnError:(NSError **)outError" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceItemAtURL:options:error:" "replaceItemAtURL:${1:(NSURL *)url} options:${2:(NSFileVersionReplacingOptions)options} error:${3:(NSError **)error}" "replaceItemAtURL:(NSURL *)url options:(NSFileVersionReplacingOptions)options error:(NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("temporaryDirectoryURLForNewVersionOfItemAtURL:" "temporaryDirectoryURLForNewVersionOfItemAtURL:${1:(NSURL *)url} NS_AVAILABLE_MAC(10_7)" "temporaryDirectoryURLForNewVersionOfItemAtURL:(NSURL *)url NS_AVAILABLE_MAC(10_7)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addVersionOfItemAtURL:withContentsOfURL:options:error:" "addVersionOfItemAtURL:${1:(NSURL *)url} withContentsOfURL:${2:(NSURL *)contentsURL} options:${3:(NSFileVersionAddingOptions)options} error:${4:(NSError **)outError} NS_AVAILABLE_MAC(10_7)" "addVersionOfItemAtURL:(NSURL *)url withContentsOfURL:(NSURL *)contentsURL options:(NSFileVersionAddingOptions)options error:(NSError **)outError NS_AVAILABLE_MAC(10_7)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("versionOfItemAtURL:forPersistentIdentifier:" "versionOfItemAtURL:${1:(NSURL *)url} forPersistentIdentifier:${2:(id)persistentIdentifier}" "versionOfItemAtURL:(NSURL *)url forPersistentIdentifier:(id)persistentIdentifier" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getNonlocalVersionsOfItemAtURL:completionHandler:" "getNonlocalVersionsOfItemAtURL:${1:(NSURL *)url} completionHandler:${2:(void (^)(NSArray *nonlocalFileVersions, NSError *error))completionHandler} NS_AVAILABLE(10_10, 8_0)" "getNonlocalVersionsOfItemAtURL:(NSURL *)url completionHandler:(void (^)(NSArray *nonlocalFileVersions, NSError *error))completionHandler NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unresolvedConflictVersionsOfItemAtURL:" "unresolvedConflictVersionsOfItemAtURL:${1:(NSURL *)url}" "unresolvedConflictVersionsOfItemAtURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("otherVersionsOfItemAtURL:" "otherVersionsOfItemAtURL:${1:(NSURL *)url}" "otherVersionsOfItemAtURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("currentVersionOfItemAtURL:" "currentVersionOfItemAtURL:${1:(NSURL *)url}" "currentVersionOfItemAtURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("presentedSubitemAtURL:didResolveConflictVersion:" "presentedSubitemAtURL:${1:(NSURL *)url} didResolveConflictVersion:${2:(NSFileVersion *)version}" "presentedSubitemAtURL:(NSURL *)url didResolveConflictVersion:(NSFileVersion *)version" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("presentedSubitemAtURL:didLoseVersion:" "presentedSubitemAtURL:${1:(NSURL *)url} didLoseVersion:${2:(NSFileVersion *)version}" "presentedSubitemAtURL:(NSURL *)url didLoseVersion:(NSFileVersion *)version" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("presentedSubitemAtURL:didGainVersion:" "presentedSubitemAtURL:${1:(NSURL *)url} didGainVersion:${2:(NSFileVersion *)version}" "presentedSubitemAtURL:(NSURL *)url didGainVersion:(NSFileVersion *)version" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("presentedSubitemDidChangeAtURL:" "presentedSubitemDidChangeAtURL:${1:(NSURL *)url}" "presentedSubitemDidChangeAtURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("presentedSubitemAtURL:didMoveToURL:" "presentedSubitemAtURL:${1:(NSURL *)oldURL} didMoveToURL:${2:(NSURL *)newURL}" "presentedSubitemAtURL:(NSURL *)oldURL didMoveToURL:(NSURL *)newURL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("presentedSubitemDidAppearAtURL:" "presentedSubitemDidAppearAtURL:${1:(NSURL *)url}" "presentedSubitemDidAppearAtURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("accommodatePresentedSubitemDeletionAtURL:completionHandler:" "accommodatePresentedSubitemDeletionAtURL:${1:(NSURL *)url} completionHandler:${2:(void (^)(NSError *errorOrNil))completionHandler}" "accommodatePresentedSubitemDeletionAtURL:(NSURL *)url completionHandler:(void (^)(NSError *errorOrNil))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("presentedItemDidResolveConflictVersion:" "presentedItemDidResolveConflictVersion:${1:(NSFileVersion *)version}" "presentedItemDidResolveConflictVersion:(NSFileVersion *)version" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("presentedItemDidLoseVersion:" "presentedItemDidLoseVersion:${1:(NSFileVersion *)version}" "presentedItemDidLoseVersion:(NSFileVersion *)version" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("presentedItemDidGainVersion:" "presentedItemDidGainVersion:${1:(NSFileVersion *)version}" "presentedItemDidGainVersion:(NSFileVersion *)version" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("presentedItemDidChange" "presentedItemDidChange" "presentedItemDidChange" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("presentedItemDidMoveToURL:" "presentedItemDidMoveToURL:${1:(NSURL *)newURL}" "presentedItemDidMoveToURL:(NSURL *)newURL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("accommodatePresentedItemDeletionWithCompletionHandler:" "accommodatePresentedItemDeletionWithCompletionHandler:${1:(void (^)(NSError *errorOrNil))completionHandler}" "accommodatePresentedItemDeletionWithCompletionHandler:(void (^)(NSError *errorOrNil))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("savePresentedItemChangesWithCompletionHandler:" "savePresentedItemChangesWithCompletionHandler:${1:(void (^)(NSError *errorOrNil))completionHandler}" "savePresentedItemChangesWithCompletionHandler:(void (^)(NSError *errorOrNil))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("relinquishPresentedItemToWriter:" "relinquishPresentedItemToWriter:${1:(void (^)(void (^reacquirer)(void)))writer}" "relinquishPresentedItemToWriter:(void (^)(void (^reacquirer)(void)))writer" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("relinquishPresentedItemToReader:" "relinquishPresentedItemToReader:${1:(void (^)(void (^reacquirer)(void)))reader}" "relinquishPresentedItemToReader:(void (^)(void (^reacquirer)(void)))reader" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileGroupOwnerAccountID" "fileGroupOwnerAccountID" "fileGroupOwnerAccountID" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileOwnerAccountID" "fileOwnerAccountID" "fileOwnerAccountID" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileCreationDate" "fileCreationDate" "fileCreationDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileIsAppendOnly" "fileIsAppendOnly" "fileIsAppendOnly" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileIsImmutable" "fileIsImmutable" "fileIsImmutable" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileHFSTypeCode" "fileHFSTypeCode" "fileHFSTypeCode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileHFSCreatorCode" "fileHFSCreatorCode" "fileHFSCreatorCode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileExtensionHidden" "fileExtensionHidden" "fileExtensionHidden" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileSystemFileNumber" "fileSystemFileNumber" "fileSystemFileNumber" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileSystemNumber" "fileSystemNumber" "fileSystemNumber" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileGroupOwnerAccountName" "fileGroupOwnerAccountName" "fileGroupOwnerAccountName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileOwnerAccountName" "fileOwnerAccountName" "fileOwnerAccountName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("filePosixPermissions" "filePosixPermissions" "filePosixPermissions" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileType" "fileType" "fileType" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileModificationDate" "fileModificationDate" "fileModificationDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileSize" "fileSize" "fileSize" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("skipDescendants NS_AVAILABLE(10_6, 4_0)" "skipDescendants NS_AVAILABLE(10_6, 4_0)" "skipDescendants NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("skipDescendents" "skipDescendents" "skipDescendents" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldProceedAfterError:removingItemAtURL:" "fileManager:${1:(NSFileManager *)fileManager} shouldProceedAfterError:${2:(NSError *)error} removingItemAtURL:${3:(NSURL *)URL} NS_AVAILABLE(10_6, 4_0)" "fileManager:(NSFileManager *)fileManager shouldProceedAfterError:(NSError *)error removingItemAtURL:(NSURL *)URL NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldProceedAfterError:removingItemAtPath:" "fileManager:${1:(NSFileManager *)fileManager} shouldProceedAfterError:${2:(NSError *)error} removingItemAtPath:${3:(NSString *)path}" "fileManager:(NSFileManager *)fileManager shouldProceedAfterError:(NSError *)error removingItemAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldRemoveItemAtURL:" "fileManager:${1:(NSFileManager *)fileManager} shouldRemoveItemAtURL:${2:(NSURL *)URL} NS_AVAILABLE(10_6, 4_0)" "fileManager:(NSFileManager *)fileManager shouldRemoveItemAtURL:(NSURL *)URL NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldRemoveItemAtPath:" "fileManager:${1:(NSFileManager *)fileManager} shouldRemoveItemAtPath:${2:(NSString *)path}" "fileManager:(NSFileManager *)fileManager shouldRemoveItemAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:" "fileManager:${1:(NSFileManager *)fileManager} shouldProceedAfterError:${2:(NSError *)error} linkingItemAtURL:${3:(NSURL *)srcURL} toURL:${4:(NSURL *)dstURL} NS_AVAILABLE(10_6, 4_0)" "fileManager:(NSFileManager *)fileManager shouldProceedAfterError:(NSError *)error linkingItemAtURL:(NSURL *)srcURL toURL:(NSURL *)dstURL NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:" "fileManager:${1:(NSFileManager *)fileManager} shouldProceedAfterError:${2:(NSError *)error} linkingItemAtPath:${3:(NSString *)srcPath} toPath:${4:(NSString *)dstPath}" "fileManager:(NSFileManager *)fileManager shouldProceedAfterError:(NSError *)error linkingItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldLinkItemAtURL:toURL:" "fileManager:${1:(NSFileManager *)fileManager} shouldLinkItemAtURL:${2:(NSURL *)srcURL} toURL:${3:(NSURL *)dstURL} NS_AVAILABLE(10_6, 4_0)" "fileManager:(NSFileManager *)fileManager shouldLinkItemAtURL:(NSURL *)srcURL toURL:(NSURL *)dstURL NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldLinkItemAtPath:toPath:" "fileManager:${1:(NSFileManager *)fileManager} shouldLinkItemAtPath:${2:(NSString *)srcPath} toPath:${3:(NSString *)dstPath}" "fileManager:(NSFileManager *)fileManager shouldLinkItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldProceedAfterError:movingItemAtURL:toURL:" "fileManager:${1:(NSFileManager *)fileManager} shouldProceedAfterError:${2:(NSError *)error} movingItemAtURL:${3:(NSURL *)srcURL} toURL:${4:(NSURL *)dstURL} NS_AVAILABLE(10_6, 4_0)" "fileManager:(NSFileManager *)fileManager shouldProceedAfterError:(NSError *)error movingItemAtURL:(NSURL *)srcURL toURL:(NSURL *)dstURL NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldProceedAfterError:movingItemAtPath:toPath:" "fileManager:${1:(NSFileManager *)fileManager} shouldProceedAfterError:${2:(NSError *)error} movingItemAtPath:${3:(NSString *)srcPath} toPath:${4:(NSString *)dstPath}" "fileManager:(NSFileManager *)fileManager shouldProceedAfterError:(NSError *)error movingItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldMoveItemAtURL:toURL:" "fileManager:${1:(NSFileManager *)fileManager} shouldMoveItemAtURL:${2:(NSURL *)srcURL} toURL:${3:(NSURL *)dstURL} NS_AVAILABLE(10_6, 4_0)" "fileManager:(NSFileManager *)fileManager shouldMoveItemAtURL:(NSURL *)srcURL toURL:(NSURL *)dstURL NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldMoveItemAtPath:toPath:" "fileManager:${1:(NSFileManager *)fileManager} shouldMoveItemAtPath:${2:(NSString *)srcPath} toPath:${3:(NSString *)dstPath}" "fileManager:(NSFileManager *)fileManager shouldMoveItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:" "fileManager:${1:(NSFileManager *)fileManager} shouldProceedAfterError:${2:(NSError *)error} copyingItemAtURL:${3:(NSURL *)srcURL} toURL:${4:(NSURL *)dstURL} NS_AVAILABLE(10_6, 4_0)" "fileManager:(NSFileManager *)fileManager shouldProceedAfterError:(NSError *)error copyingItemAtURL:(NSURL *)srcURL toURL:(NSURL *)dstURL NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:" "fileManager:${1:(NSFileManager *)fileManager} shouldProceedAfterError:${2:(NSError *)error} copyingItemAtPath:${3:(NSString *)srcPath} toPath:${4:(NSString *)dstPath}" "fileManager:(NSFileManager *)fileManager shouldProceedAfterError:(NSError *)error copyingItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldCopyItemAtURL:toURL:" "fileManager:${1:(NSFileManager *)fileManager} shouldCopyItemAtURL:${2:(NSURL *)srcURL} toURL:${3:(NSURL *)dstURL} NS_AVAILABLE(10_6, 4_0)" "fileManager:(NSFileManager *)fileManager shouldCopyItemAtURL:(NSURL *)srcURL toURL:(NSURL *)dstURL NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldCopyItemAtPath:toPath:" "fileManager:${1:(NSFileManager *)fileManager} shouldCopyItemAtPath:${2:(NSString *)srcPath} toPath:${3:(NSString *)dstPath}" "fileManager:(NSFileManager *)fileManager shouldCopyItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:willProcessPath:" "fileManager:${1:(NSFileManager *)fm} willProcessPath:${2:(NSString *)path} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "fileManager:(NSFileManager *)fm willProcessPath:(NSString *)path NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileManager:shouldProceedAfterError:" "fileManager:${1:(NSFileManager *)fm} shouldProceedAfterError:${2:(NSDictionary *)errorInfo} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "fileManager:(NSFileManager *)fm shouldProceedAfterError:(NSDictionary *)errorInfo NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("containerURLForSecurityApplicationGroupIdentifier:" "containerURLForSecurityApplicationGroupIdentifier:${1:(NSString *)groupIdentifier} NS_AVAILABLE(10_8, 7_0)" "containerURLForSecurityApplicationGroupIdentifier:(NSString *)groupIdentifier NS_AVAILABLE(10_8, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLForPublishingUbiquitousItemAtURL:expirationDate:error:" "URLForPublishingUbiquitousItemAtURL:${1:(NSURL *)url} expirationDate:${2:(NSDate **)outDate} error:${3:(NSError **)error} NS_AVAILABLE(10_7, 5_0)" "URLForPublishingUbiquitousItemAtURL:(NSURL *)url expirationDate:(NSDate **)outDate error:(NSError **)error NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLForUbiquityContainerIdentifier:" "URLForUbiquityContainerIdentifier:${1:(NSString *)containerIdentifier} NS_AVAILABLE(10_7, 5_0)" "URLForUbiquityContainerIdentifier:(NSString *)containerIdentifier NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("evictUbiquitousItemAtURL:error:" "evictUbiquitousItemAtURL:${1:(NSURL *)url} error:${2:(NSError **)error} NS_AVAILABLE(10_7, 5_0)" "evictUbiquitousItemAtURL:(NSURL *)url error:(NSError **)error NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("startDownloadingUbiquitousItemAtURL:error:" "startDownloadingUbiquitousItemAtURL:${1:(NSURL *)url} error:${2:(NSError **)error} NS_AVAILABLE(10_7, 5_0)" "startDownloadingUbiquitousItemAtURL:(NSURL *)url error:(NSError **)error NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isUbiquitousItemAtURL:" "isUbiquitousItemAtURL:${1:(NSURL *)url} NS_AVAILABLE(10_7, 5_0)" "isUbiquitousItemAtURL:(NSURL *)url NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setUbiquitous:itemAtURL:destinationURL:error:" "setUbiquitous:${1:(BOOL)flag} itemAtURL:${2:(NSURL *)url} destinationURL:${3:(NSURL *)destinationURL} error:${4:(NSError **)error} NS_AVAILABLE(10_7, 5_0)" "setUbiquitous:(BOOL)flag itemAtURL:(NSURL *)url destinationURL:(NSURL *)destinationURL error:(NSError **)error NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:" "replaceItemAtURL:${1:(NSURL *)originalItemURL} withItemAtURL:${2:(NSURL *)newItemURL} backupItemName:${3:(NSString *)backupItemName} options:${4:(NSFileManagerItemReplacementOptions)options} resultingItemURL:${5:(NSURL **)resultingURL} error:${6:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "replaceItemAtURL:(NSURL *)originalItemURL withItemAtURL:(NSURL *)newItemURL backupItemName:(NSString *)backupItemName options:(NSFileManagerItemReplacementOptions)options resultingItemURL:(NSURL **)resultingURL error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringWithFileSystemRepresentation:length:" "stringWithFileSystemRepresentation:${1:(const char *)str} length:${2:(NSUInteger)len}" "stringWithFileSystemRepresentation:(const char *)str length:(NSUInteger)len" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileSystemRepresentationWithPath:" "fileSystemRepresentationWithPath:${1:(NSString *)path} NS_RETURNS_INNER_POINTER" "fileSystemRepresentationWithPath:(NSString *)path NS_RETURNS_INNER_POINTER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("createFileAtPath:contents:attributes:" "createFileAtPath:${1:(NSString *)path} contents:${2:(NSData *)data} attributes:${3:(NSDictionary *)attr}" "createFileAtPath:(NSString *)path contents:(NSData *)data attributes:(NSDictionary *)attr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("contentsAtPath:" "contentsAtPath:${1:(NSString *)path}" "contentsAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("subpathsAtPath:" "subpathsAtPath:${1:(NSString *)path}" "subpathsAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:" "enumeratorAtURL:${1:(NSURL *)url} includingPropertiesForKeys:${2:(NSArray *)keys} options:${3:(NSDirectoryEnumerationOptions)mask} errorHandler:${4:(BOOL (^)(NSURL *url, NSError *error))handler} NS_AVAILABLE(10_6, 4_0)" "enumeratorAtURL:(NSURL *)url includingPropertiesForKeys:(NSArray *)keys options:(NSDirectoryEnumerationOptions)mask errorHandler:(BOOL (^)(NSURL *url, NSError *error))handler NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumeratorAtPath:" "enumeratorAtPath:${1:(NSString *)path}" "enumeratorAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("componentsToDisplayForPath:" "componentsToDisplayForPath:${1:(NSString *)path}" "componentsToDisplayForPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("displayNameAtPath:" "displayNameAtPath:${1:(NSString *)path}" "displayNameAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("contentsEqualAtPath:andPath:" "contentsEqualAtPath:${1:(NSString *)path1} andPath:${2:(NSString *)path2}" "contentsEqualAtPath:(NSString *)path1 andPath:(NSString *)path2" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isDeletableFileAtPath:" "isDeletableFileAtPath:${1:(NSString *)path}" "isDeletableFileAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isExecutableFileAtPath:" "isExecutableFileAtPath:${1:(NSString *)path}" "isExecutableFileAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isWritableFileAtPath:" "isWritableFileAtPath:${1:(NSString *)path}" "isWritableFileAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isReadableFileAtPath:" "isReadableFileAtPath:${1:(NSString *)path}" "isReadableFileAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileExistsAtPath:isDirectory:" "fileExistsAtPath:${1:(NSString *)path} isDirectory:${2:(BOOL *)isDirectory}" "fileExistsAtPath:(NSString *)path isDirectory:(BOOL *)isDirectory" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileExistsAtPath:" "fileExistsAtPath:${1:(NSString *)path}" "fileExistsAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("changeCurrentDirectoryPath:" "changeCurrentDirectoryPath:${1:(NSString *)path}" "changeCurrentDirectoryPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeFileAtPath:handler:" "removeFileAtPath:${1:(NSString *)path} handler:${2:(id)handler} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "removeFileAtPath:(NSString *)path handler:(id)handler NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("movePath:toPath:handler:" "movePath:${1:(NSString *)src} toPath:${2:(NSString *)dest} handler:${3:(id)handler} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "movePath:(NSString *)src toPath:(NSString *)dest handler:(id)handler NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("copyPath:toPath:handler:" "copyPath:${1:(NSString *)src} toPath:${2:(NSString *)dest} handler:${3:(id)handler} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "copyPath:(NSString *)src toPath:(NSString *)dest handler:(id)handler NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("linkPath:toPath:handler:" "linkPath:${1:(NSString *)src} toPath:${2:(NSString *)dest} handler:${3:(id)handler} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "linkPath:(NSString *)src toPath:(NSString *)dest handler:(id)handler NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("createDirectoryAtPath:attributes:" "createDirectoryAtPath:${1:(NSString *)path} attributes:${2:(NSDictionary *)attributes} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "createDirectoryAtPath:(NSString *)path attributes:(NSDictionary *)attributes NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("createSymbolicLinkAtPath:pathContent:" "createSymbolicLinkAtPath:${1:(NSString *)path} pathContent:${2:(NSString *)otherpath} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "createSymbolicLinkAtPath:(NSString *)path pathContent:(NSString *)otherpath NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pathContentOfSymbolicLinkAtPath:" "pathContentOfSymbolicLinkAtPath:${1:(NSString *)path} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "pathContentOfSymbolicLinkAtPath:(NSString *)path NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileSystemAttributesAtPath:" "fileSystemAttributesAtPath:${1:(NSString *)path} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "fileSystemAttributesAtPath:(NSString *)path NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("directoryContentsAtPath:" "directoryContentsAtPath:${1:(NSString *)path} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "directoryContentsAtPath:(NSString *)path NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("changeFileAttributes:atPath:" "changeFileAttributes:${1:(NSDictionary *)attributes} atPath:${2:(NSString *)path} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "changeFileAttributes:(NSDictionary *)attributes atPath:(NSString *)path NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileAttributesAtPath:traverseLink:" "fileAttributesAtPath:${1:(NSString *)path} traverseLink:${2:(BOOL)yorn} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "fileAttributesAtPath:(NSString *)path traverseLink:(BOOL)yorn NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("trashItemAtURL:resultingItemURL:error:" "trashItemAtURL:${1:(NSURL *)url} resultingItemURL:${2:(NSURL **)outResultingURL} error:${3:(NSError **)error} NS_AVAILABLE_MAC(10_8)" "trashItemAtURL:(NSURL *)url resultingItemURL:(NSURL **)outResultingURL error:(NSError **)error NS_AVAILABLE_MAC(10_8)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeItemAtURL:error:" "removeItemAtURL:${1:(NSURL *)URL} error:${2:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "removeItemAtURL:(NSURL *)URL error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("linkItemAtURL:toURL:error:" "linkItemAtURL:${1:(NSURL *)srcURL} toURL:${2:(NSURL *)dstURL} error:${3:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "linkItemAtURL:(NSURL *)srcURL toURL:(NSURL *)dstURL error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("moveItemAtURL:toURL:error:" "moveItemAtURL:${1:(NSURL *)srcURL} toURL:${2:(NSURL *)dstURL} error:${3:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "moveItemAtURL:(NSURL *)srcURL toURL:(NSURL *)dstURL error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("copyItemAtURL:toURL:error:" "copyItemAtURL:${1:(NSURL *)srcURL} toURL:${2:(NSURL *)dstURL} error:${3:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "copyItemAtURL:(NSURL *)srcURL toURL:(NSURL *)dstURL error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeItemAtPath:error:" "removeItemAtPath:${1:(NSString *)path} error:${2:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "removeItemAtPath:(NSString *)path error:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("linkItemAtPath:toPath:error:" "linkItemAtPath:${1:(NSString *)srcPath} toPath:${2:(NSString *)dstPath} error:${3:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "linkItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath error:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("moveItemAtPath:toPath:error:" "moveItemAtPath:${1:(NSString *)srcPath} toPath:${2:(NSString *)dstPath} error:${3:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "moveItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath error:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("copyItemAtPath:toPath:error:" "copyItemAtPath:${1:(NSString *)srcPath} toPath:${2:(NSString *)dstPath} error:${3:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "copyItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath error:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("destinationOfSymbolicLinkAtPath:error:" "destinationOfSymbolicLinkAtPath:${1:(NSString *)path} error:${2:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "destinationOfSymbolicLinkAtPath:(NSString *)path error:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("createSymbolicLinkAtPath:withDestinationPath:error:" "createSymbolicLinkAtPath:${1:(NSString *)path} withDestinationPath:${2:(NSString *)destPath} error:${3:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "createSymbolicLinkAtPath:(NSString *)path withDestinationPath:(NSString *)destPath error:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("attributesOfFileSystemForPath:error:" "attributesOfFileSystemForPath:${1:(NSString *)path} error:${2:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "attributesOfFileSystemForPath:(NSString *)path error:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("attributesOfItemAtPath:error:" "attributesOfItemAtPath:${1:(NSString *)path} error:${2:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "attributesOfItemAtPath:(NSString *)path error:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("subpathsOfDirectoryAtPath:error:" "subpathsOfDirectoryAtPath:${1:(NSString *)path} error:${2:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "subpathsOfDirectoryAtPath:(NSString *)path error:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("contentsOfDirectoryAtPath:error:" "contentsOfDirectoryAtPath:${1:(NSString *)path} error:${2:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "contentsOfDirectoryAtPath:(NSString *)path error:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("createDirectoryAtPath:withIntermediateDirectories:attributes:error:" "createDirectoryAtPath:${1:(NSString *)path} withIntermediateDirectories:${2:(BOOL)createIntermediates} attributes:${3:(NSDictionary *)attributes} error:${4:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "createDirectoryAtPath:(NSString *)path withIntermediateDirectories:(BOOL)createIntermediates attributes:(NSDictionary *)attributes error:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setAttributes:ofItemAtPath:error:" "setAttributes:${1:(NSDictionary *)attributes} ofItemAtPath:${2:(NSString *)path} error:${3:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "setAttributes:(NSDictionary *)attributes ofItemAtPath:(NSString *)path error:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("createSymbolicLinkAtURL:withDestinationURL:error:" "createSymbolicLinkAtURL:${1:(NSURL *)url} withDestinationURL:${2:(NSURL *)destURL} error:${3:(NSError **)error} NS_AVAILABLE(10_7, 5_0)" "createSymbolicLinkAtURL:(NSURL *)url withDestinationURL:(NSURL *)destURL error:(NSError **)error NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("createDirectoryAtURL:withIntermediateDirectories:attributes:error:" "createDirectoryAtURL:${1:(NSURL *)url} withIntermediateDirectories:${2:(BOOL)createIntermediates} attributes:${3:(NSDictionary *)attributes} error:${4:(NSError **)error} NS_AVAILABLE(10_7, 5_0)" "createDirectoryAtURL:(NSURL *)url withIntermediateDirectories:(BOOL)createIntermediates attributes:(NSDictionary *)attributes error:(NSError **)error NS_AVAILABLE(10_7, 5_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getRelationship:ofDirectory:inDomain:toItemAtURL:error:" "getRelationship:${1:(NSURLRelationship *)outRelationship} ofDirectory:${2:(NSSearchPathDirectory)directory} inDomain:${3:(NSSearchPathDomainMask)domainMask} toItemAtURL:${4:(NSURL *)url} error:${5:(NSError **)error} NS_AVAILABLE(10_10, 8_0)" "getRelationship:(NSURLRelationship *)outRelationship ofDirectory:(NSSearchPathDirectory)directory inDomain:(NSSearchPathDomainMask)domainMask toItemAtURL:(NSURL *)url error:(NSError **)error NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getRelationship:ofDirectoryAtURL:toItemAtURL:error:" "getRelationship:${1:(NSURLRelationship *)outRelationship} ofDirectoryAtURL:${2:(NSURL *)directoryURL} toItemAtURL:${3:(NSURL *)otherURL} error:${4:(NSError **)error} NS_AVAILABLE(10_10, 8_0)" "getRelationship:(NSURLRelationship *)outRelationship ofDirectoryAtURL:(NSURL *)directoryURL toItemAtURL:(NSURL *)otherURL error:(NSError **)error NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLForDirectory:inDomain:appropriateForURL:create:error:" "URLForDirectory:${1:(NSSearchPathDirectory)directory} inDomain:${2:(NSSearchPathDomainMask)domain} appropriateForURL:${3:(NSURL *)url} create:${4:(BOOL)shouldCreate} error:${5:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "URLForDirectory:(NSSearchPathDirectory)directory inDomain:(NSSearchPathDomainMask)domain appropriateForURL:(NSURL *)url create:(BOOL)shouldCreate error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLsForDirectory:inDomains:" "URLsForDirectory:${1:(NSSearchPathDirectory)directory} inDomains:${2:(NSSearchPathDomainMask)domainMask} NS_AVAILABLE(10_6, 4_0)" "URLsForDirectory:(NSSearchPathDirectory)directory inDomains:(NSSearchPathDomainMask)domainMask NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:" "contentsOfDirectoryAtURL:${1:(NSURL *)url} includingPropertiesForKeys:${2:(NSArray *)keys} options:${3:(NSDirectoryEnumerationOptions)mask} error:${4:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "contentsOfDirectoryAtURL:(NSURL *)url includingPropertiesForKeys:(NSArray *)keys options:(NSDirectoryEnumerationOptions)mask error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mountedVolumeURLsIncludingResourceValuesForKeys:options:" "mountedVolumeURLsIncludingResourceValuesForKeys:${1:(NSArray *)propertyKeys} options:${2:(NSVolumeEnumerationOptions)options} NS_AVAILABLE(10_6, 4_0)" "mountedVolumeURLsIncludingResourceValuesForKeys:(NSArray *)propertyKeys options:(NSVolumeEnumerationOptions)options NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("defaultManager" "defaultManager" "defaultManager" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pipe" "pipe" "pipe" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithFileDescriptor:" "initWithFileDescriptor:${1:(int)fd}" "initWithFileDescriptor:(int)fd" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("waitForDataInBackgroundAndNotify" "waitForDataInBackgroundAndNotify" "waitForDataInBackgroundAndNotify" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("waitForDataInBackgroundAndNotifyForModes:" "waitForDataInBackgroundAndNotifyForModes:${1:(NSArray *)modes}" "waitForDataInBackgroundAndNotifyForModes:(NSArray *)modes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("acceptConnectionInBackgroundAndNotify" "acceptConnectionInBackgroundAndNotify" "acceptConnectionInBackgroundAndNotify" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("acceptConnectionInBackgroundAndNotifyForModes:" "acceptConnectionInBackgroundAndNotifyForModes:${1:(NSArray *)modes}" "acceptConnectionInBackgroundAndNotifyForModes:(NSArray *)modes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("readToEndOfFileInBackgroundAndNotify" "readToEndOfFileInBackgroundAndNotify" "readToEndOfFileInBackgroundAndNotify" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("readToEndOfFileInBackgroundAndNotifyForModes:" "readToEndOfFileInBackgroundAndNotifyForModes:${1:(NSArray *)modes}" "readToEndOfFileInBackgroundAndNotifyForModes:(NSArray *)modes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("readInBackgroundAndNotify" "readInBackgroundAndNotify" "readInBackgroundAndNotify" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("readInBackgroundAndNotifyForModes:" "readInBackgroundAndNotifyForModes:${1:(NSArray *)modes}" "readInBackgroundAndNotifyForModes:(NSArray *)modes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileHandleForUpdatingURL:error:" "fileHandleForUpdatingURL:${1:(NSURL *)url} error:${2:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "fileHandleForUpdatingURL:(NSURL *)url error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileHandleForWritingToURL:error:" "fileHandleForWritingToURL:${1:(NSURL *)url} error:${2:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "fileHandleForWritingToURL:(NSURL *)url error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileHandleForReadingFromURL:error:" "fileHandleForReadingFromURL:${1:(NSURL *)url} error:${2:(NSError **)error} NS_AVAILABLE(10_6, 4_0)" "fileHandleForReadingFromURL:(NSURL *)url error:(NSError **)error NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileHandleForUpdatingAtPath:" "fileHandleForUpdatingAtPath:${1:(NSString *)path}" "fileHandleForUpdatingAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileHandleForWritingAtPath:" "fileHandleForWritingAtPath:${1:(NSString *)path}" "fileHandleForWritingAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileHandleForReadingAtPath:" "fileHandleForReadingAtPath:${1:(NSString *)path}" "fileHandleForReadingAtPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileHandleWithNullDevice" "fileHandleWithNullDevice" "fileHandleWithNullDevice" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileHandleWithStandardError" "fileHandleWithStandardError" "fileHandleWithStandardError" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileHandleWithStandardOutput" "fileHandleWithStandardOutput" "fileHandleWithStandardOutput" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("fileHandleWithStandardInput" "fileHandleWithStandardInput" "fileHandleWithStandardInput" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)coder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)coder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithFileDescriptor:closeOnDealloc:" "initWithFileDescriptor:${1:(int)fd} closeOnDealloc:${2:(BOOL)closeopt} NS_DESIGNATED_INITIALIZER" "initWithFileDescriptor:(int)fd closeOnDealloc:(BOOL)closeopt NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("closeFile" "closeFile" "closeFile" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("synchronizeFile" "synchronizeFile" "synchronizeFile" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("truncateFileAtOffset:" "truncateFileAtOffset:${1:(unsigned long long)offset}" "truncateFileAtOffset:(unsigned long long)offset" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("seekToFileOffset:" "seekToFileOffset:${1:(unsigned long long)offset}" "seekToFileOffset:(unsigned long long)offset" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("seekToEndOfFile" "seekToEndOfFile" "seekToEndOfFile" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeData:" "writeData:${1:(NSData *)data}" "writeData:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("readDataOfLength:" "readDataOfLength:${1:(NSUInteger)length}" "readDataOfLength:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("readDataToEndOfFile" "readDataToEndOfFile" "readDataToEndOfFile" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancel" "cancel" "cancel" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("itemAtURL:didMoveToURL:" "itemAtURL:${1:(NSURL *)oldURL} didMoveToURL:${2:(NSURL *)newURL}" "itemAtURL:(NSURL *)oldURL didMoveToURL:(NSURL *)newURL" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("itemAtURL:willMoveToURL:" "itemAtURL:${1:(NSURL *)oldURL} willMoveToURL:${2:(NSURL *)newURL} NS_AVAILABLE(10_8, 6_0)" "itemAtURL:(NSURL *)oldURL willMoveToURL:(NSURL *)newURL NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:" "prepareForReadingItemsAtURLs:${1:(NSArray *)readingURLs} options:${2:(NSFileCoordinatorReadingOptions)readingOptions} writingItemsAtURLs:${3:(NSArray *)writingURLs} options:${4:(NSFileCoordinatorWritingOptions)writingOptions} error:${5:(NSError **)outError} byAccessor:${6:(void (^)(void (^completionHandler)(void)))batchAccessor}" "prepareForReadingItemsAtURLs:(NSArray *)readingURLs options:(NSFileCoordinatorReadingOptions)readingOptions writingItemsAtURLs:(NSArray *)writingURLs options:(NSFileCoordinatorWritingOptions)writingOptions error:(NSError **)outError byAccessor:(void (^)(void (^completionHandler)(void)))batchAccessor" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:" "coordinateWritingItemAtURL:${1:(NSURL *)url1} options:${2:(NSFileCoordinatorWritingOptions)options1} writingItemAtURL:${3:(NSURL *)url2} options:${4:(NSFileCoordinatorWritingOptions)options2} error:${5:(NSError **)outError} byAccessor:${6:(void (^)(NSURL *newURL1, NSURL *newURL2))writer}" "coordinateWritingItemAtURL:(NSURL *)url1 options:(NSFileCoordinatorWritingOptions)options1 writingItemAtURL:(NSURL *)url2 options:(NSFileCoordinatorWritingOptions)options2 error:(NSError **)outError byAccessor:(void (^)(NSURL *newURL1, NSURL *newURL2))writer" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:" "coordinateReadingItemAtURL:${1:(NSURL *)readingURL} options:${2:(NSFileCoordinatorReadingOptions)readingOptions} writingItemAtURL:${3:(NSURL *)writingURL} options:${4:(NSFileCoordinatorWritingOptions)writingOptions} error:${5:(NSError **)outError} byAccessor:${6:(void (^)(NSURL *newReadingURL, NSURL *newWritingURL))readerWriter}" "coordinateReadingItemAtURL:(NSURL *)readingURL options:(NSFileCoordinatorReadingOptions)readingOptions writingItemAtURL:(NSURL *)writingURL options:(NSFileCoordinatorWritingOptions)writingOptions error:(NSError **)outError byAccessor:(void (^)(NSURL *newReadingURL, NSURL *newWritingURL))readerWriter" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("coordinateWritingItemAtURL:options:error:byAccessor:" "coordinateWritingItemAtURL:${1:(NSURL *)url} options:${2:(NSFileCoordinatorWritingOptions)options} error:${3:(NSError **)outError} byAccessor:${4:(void (^)(NSURL *newURL))writer}" "coordinateWritingItemAtURL:(NSURL *)url options:(NSFileCoordinatorWritingOptions)options error:(NSError **)outError byAccessor:(void (^)(NSURL *newURL))writer" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("coordinateReadingItemAtURL:options:error:byAccessor:" "coordinateReadingItemAtURL:${1:(NSURL *)url} options:${2:(NSFileCoordinatorReadingOptions)options} error:${3:(NSError **)outError} byAccessor:${4:(void (^)(NSURL *newURL))reader}" "coordinateReadingItemAtURL:(NSURL *)url options:(NSFileCoordinatorReadingOptions)options error:(NSError **)outError byAccessor:(void (^)(NSURL *newURL))reader" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("coordinateAccessWithIntents:queue:byAccessor:" "coordinateAccessWithIntents:${1:(NSArray *)intents} queue:${2:(NSOperationQueue *)queue} byAccessor:${3:(void (^)(NSError *error))accessor} NS_AVAILABLE(10_10, 8_0)" "coordinateAccessWithIntents:(NSArray *)intents queue:(NSOperationQueue *)queue byAccessor:(void (^)(NSError *error))accessor NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithFilePresenter:" "initWithFilePresenter:${1:(id<NSFilePresenter>)filePresenterOrNil} NS_DESIGNATED_INITIALIZER" "initWithFilePresenter:(id<NSFilePresenter>)filePresenterOrNil NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("filePresenters" "filePresenters" "filePresenters" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeFilePresenter:" "removeFilePresenter:${1:(id<NSFilePresenter>)filePresenter}" "removeFilePresenter:(id<NSFilePresenter>)filePresenter" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addFilePresenter:" "addFilePresenter:${1:(id<NSFilePresenter>)filePresenter}" "addFilePresenter:(id<NSFilePresenter>)filePresenter" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writingIntentWithURL:options:" "writingIntentWithURL:${1:(NSURL *)url} options:${2:(NSFileCoordinatorWritingOptions)options}" "writingIntentWithURL:(NSURL *)url options:(NSFileCoordinatorWritingOptions)options" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("readingIntentWithURL:options:" "readingIntentWithURL:${1:(NSURL *)url} options:${2:(NSFileCoordinatorReadingOptions)options}" "readingIntentWithURL:(NSURL *)url options:(NSFileCoordinatorReadingOptions)options" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("beginRequestWithExtensionContext:" "beginRequestWithExtensionContext:${1:(NSExtensionContext *)context}" "beginRequestWithExtensionContext:(NSExtensionContext *)context" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("openURL:completionHandler:" "openURL:${1:(NSURL *)URL} completionHandler:${2:(void (^)(BOOL success))completionHandler}" "openURL:(NSURL *)URL completionHandler:(void (^)(BOOL success))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cancelRequestWithError:" "cancelRequestWithError:${1:(NSError *)error}" "cancelRequestWithError:(NSError *)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("completeRequestReturningItems:completionHandler:" "completeRequestReturningItems:${1:(NSArray *)items} completionHandler:${2:(void(^)(BOOL expired))completionHandler}" "completeRequestReturningItems:(NSArray *)items completionHandler:(void(^)(BOOL expired))completionHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("allowEvaluation NS_AVAILABLE(10_9, 7_0)" "allowEvaluation NS_AVAILABLE(10_9, 7_0)" "allowEvaluation NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionValueWithObject:context:" "expressionValueWithObject:${1:(id)object} context:${2:(NSMutableDictionary *)context}" "expressionValueWithObject:(id)object context:(NSMutableDictionary *)context" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithExpressionType:" "initWithExpressionType:${1:(NSExpressionType)type}" "initWithExpressionType:(NSExpressionType)type" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForBlock:arguments:" "expressionForBlock:${1:(id (^)(id evaluatedObject, NSArray *expressions, NSMutableDictionary *context))block} arguments:${2:(NSArray *)arguments} NS_AVAILABLE(10_6, 4_0)" "expressionForBlock:(id (^)(id evaluatedObject, NSArray *expressions, NSMutableDictionary *context))block arguments:(NSArray *)arguments NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForAnyKey NS_AVAILABLE(10_9, 7_0)" "expressionForAnyKey NS_AVAILABLE(10_9, 7_0)" "expressionForAnyKey NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForFunction:selectorName:arguments:" "expressionForFunction:${1:(NSExpression *)target} selectorName:${2:(NSString *)name} arguments:${3:(NSArray *)parameters} NS_AVAILABLE(10_5, 3_0)" "expressionForFunction:(NSExpression *)target selectorName:(NSString *)name arguments:(NSArray *)parameters NS_AVAILABLE(10_5, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForSubquery:usingIteratorVariable:predicate:" "expressionForSubquery:${1:(NSExpression *)expression} usingIteratorVariable:${2:(NSString *)variable} predicate:${3:(id)predicate} NS_AVAILABLE(10_5, 3_0)" "expressionForSubquery:(NSExpression *)expression usingIteratorVariable:(NSString *)variable predicate:(id)predicate NS_AVAILABLE(10_5, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForMinusSet:with:" "expressionForMinusSet:${1:(NSExpression *)left} with:${2:(NSExpression *)right} NS_AVAILABLE(10_5, 3_0)" "expressionForMinusSet:(NSExpression *)left with:(NSExpression *)right NS_AVAILABLE(10_5, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForIntersectSet:with:" "expressionForIntersectSet:${1:(NSExpression *)left} with:${2:(NSExpression *)right} NS_AVAILABLE(10_5, 3_0)" "expressionForIntersectSet:(NSExpression *)left with:(NSExpression *)right NS_AVAILABLE(10_5, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForUnionSet:with:" "expressionForUnionSet:${1:(NSExpression *)left} with:${2:(NSExpression *)right} NS_AVAILABLE(10_5, 3_0)" "expressionForUnionSet:(NSExpression *)left with:(NSExpression *)right NS_AVAILABLE(10_5, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForAggregate:" "expressionForAggregate:${1:(NSArray *)subexpressions} NS_AVAILABLE(10_5, 3_0)" "expressionForAggregate:(NSArray *)subexpressions NS_AVAILABLE(10_5, 3_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForFunction:arguments:" "expressionForFunction:${1:(NSString *)name} arguments:${2:(NSArray *)parameters}" "expressionForFunction:(NSString *)name arguments:(NSArray *)parameters" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForKeyPath:" "expressionForKeyPath:${1:(NSString *)keyPath}" "expressionForKeyPath:(NSString *)keyPath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForVariable:" "expressionForVariable:${1:(NSString *)string}" "expressionForVariable:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForEvaluatedObject" "expressionForEvaluatedObject" "expressionForEvaluatedObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionForConstantValue:" "expressionForConstantValue:${1:(id)obj}" "expressionForConstantValue:(id)obj" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionWithFormat:arguments:" "expressionWithFormat:${1:(NSString *)expressionFormat} arguments:${2:(va_list)argList} NS_AVAILABLE(10_6,4_0)" "expressionWithFormat:(NSString *)expressionFormat arguments:(va_list)argList NS_AVAILABLE(10_6,4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionWithFormat:" "expressionWithFormat:${1:(NSString *)expressionFormat}, ...  NS_AVAILABLE(10_6,4_0)" "expressionWithFormat:(NSString *)expressionFormat, ...  NS_AVAILABLE(10_6,4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("expressionWithFormat:argumentArray:" "expressionWithFormat:${1:(NSString *)expressionFormat} argumentArray:${2:(NSArray *)arguments} NS_AVAILABLE(10_6,4_0)" "expressionWithFormat:(NSString *)expressionFormat argumentArray:(NSArray *)arguments NS_AVAILABLE(10_6,4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("handleFailureInFunction:file:lineNumber:description:" "handleFailureInFunction:${1:(NSString *)functionName} file:${2:(NSString *)fileName} lineNumber:${3:(NSInteger)line} description:${4:(NSString *)format},... NS_FORMAT_FUNCTION(4,5)" "handleFailureInFunction:(NSString *)functionName file:(NSString *)fileName lineNumber:(NSInteger)line description:(NSString *)format,... NS_FORMAT_FUNCTION(4,5)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("handleFailureInMethod:object:file:lineNumber:description:" "handleFailureInMethod:${1:(SEL)selector} object:${2:(id)object} file:${3:(NSString *)fileName} lineNumber:${4:(NSInteger)line} description:${5:(NSString *)format},... NS_FORMAT_FUNCTION(5,6)" "handleFailureInMethod:(SEL)selector object:(id)object file:(NSString *)fileName lineNumber:(NSInteger)line description:(NSString *)format,... NS_FORMAT_FUNCTION(5,6)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("currentHandler" "currentHandler" "currentHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("raise:format:arguments:" "raise:${1:(NSString *)name} format:${2:(NSString *)format} arguments:${3:(va_list)argList} NS_FORMAT_FUNCTION(2,0)" "raise:(NSString *)name format:(NSString *)format arguments:(va_list)argList NS_FORMAT_FUNCTION(2,0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("raise:format:" "raise:${1:(NSString *)name} format:${2:(NSString *)format}, ... NS_FORMAT_FUNCTION(2,3)" "raise:(NSString *)name format:(NSString *)format, ... NS_FORMAT_FUNCTION(2,3)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("raise" "raise" "raise" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithName:reason:userInfo:" "initWithName:${1:(NSString *)aName} reason:${2:(NSString *)aReason} userInfo:${3:(NSDictionary *)aUserInfo} NS_DESIGNATED_INITIALIZER" "initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("exceptionWithName:reason:userInfo:" "exceptionWithName:${1:(NSString *)name} reason:${2:(NSString *)reason} userInfo:${3:(NSDictionary *)userInfo}" "exceptionWithName:(NSString *)name reason:(NSString *)reason userInfo:(NSDictionary *)userInfo" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("attemptRecoveryFromError:optionIndex:" "attemptRecoveryFromError:${1:(NSError *)error} optionIndex:${2:(NSUInteger)recoveryOptionIndex}" "attemptRecoveryFromError:(NSError *)error optionIndex:(NSUInteger)recoveryOptionIndex" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:" "attemptRecoveryFromError:${1:(NSError *)error} optionIndex:${2:(NSUInteger)recoveryOptionIndex} delegate:${3:(id)delegate} didRecoverSelector:${4:(SEL)didRecoverSelector} contextInfo:${5:(void *)contextInfo}" "attemptRecoveryFromError:(NSError *)error optionIndex:(NSUInteger)recoveryOptionIndex delegate:(id)delegate didRecoverSelector:(SEL)didRecoverSelector contextInfo:(void *)contextInfo" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("didPresentErrorWithRecovery:contextInfo:" "didPresentErrorWithRecovery:${1:(BOOL)didRecover} contextInfo:${2:(void *)contextInfo}" "didPresentErrorWithRecovery:(BOOL)didRecover contextInfo:(void *)contextInfo" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("errorWithDomain:code:userInfo:" "errorWithDomain:${1:(NSString *)domain} code:${2:(NSInteger)code} userInfo:${3:(NSDictionary *)dict}" "errorWithDomain:(NSString *)domain code:(NSInteger)code userInfo:(NSDictionary *)dict" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithDomain:code:userInfo:" "initWithDomain:${1:(NSString *)domain} code:${2:(NSInteger)code} userInfo:${3:(NSDictionary *)dict} NS_DESIGNATED_INITIALIZER" "initWithDomain:(NSString *)domain code:(NSInteger)code userInfo:(NSDictionary *)dict NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("nextObject" "nextObject" "nextObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("countByEnumeratingWithState:objects:count:" "countByEnumeratingWithState:${1:(NSFastEnumerationState *)state} objects:${2:(id __unsafe_unretained [])buffer} count:${3:(NSUInteger)len}" "countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id __unsafe_unretained [])buffer count:(NSUInteger)len" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getObjectValue:forString:errorDescription:" "getObjectValue:${1:(out id *)obj} forString:${2:(NSString *)string} errorDescription:${3:(out NSString **)error}" "getObjectValue:(out id *)obj forString:(NSString *)string errorDescription:(out NSString **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unitStringFromJoules:usedUnit:" "unitStringFromJoules:${1:(double)numberInJoules} usedUnit:${2:(NSEnergyFormatterUnit *)unitp}" "unitStringFromJoules:(double)numberInJoules usedUnit:(NSEnergyFormatterUnit *)unitp" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unitStringFromValue:unit:" "unitStringFromValue:${1:(double)value} unit:${2:(NSEnergyFormatterUnit)unit}" "unitStringFromValue:(double)value unit:(NSEnergyFormatterUnit)unit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromJoules:" "stringFromJoules:${1:(double)numberInJoules}" "stringFromJoules:(double)numberInJoules" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromValue:unit:" "stringFromValue:${1:(double)value} unit:${2:(NSEnergyFormatterUnit)unit}" "stringFromValue:(double)value unit:(NSEnergyFormatterUnit)unit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithSharedKeySet:" "dictionaryWithSharedKeySet:${1:(id)keyset} NS_AVAILABLE(10_8, 6_0)" "dictionaryWithSharedKeySet:(id)keyset NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sharedKeySetForKeys:" "sharedKeySetForKeys:${1:(NSArray *)keys} NS_AVAILABLE(10_8, 6_0)" "sharedKeySetForKeys:(NSArray *)keys NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfURL:" "initWithContentsOfURL:${1:(NSURL *)url}" "initWithContentsOfURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfFile:" "initWithContentsOfFile:${1:(NSString *)path}" "initWithContentsOfFile:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithContentsOfURL:" "dictionaryWithContentsOfURL:${1:(NSURL *)url}" "dictionaryWithContentsOfURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithContentsOfFile:" "dictionaryWithContentsOfFile:${1:(NSString *)path}" "dictionaryWithContentsOfFile:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithCapacity:" "dictionaryWithCapacity:${1:(NSUInteger)numItems}" "dictionaryWithCapacity:(NSUInteger)numItems" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setObject:forKeyedSubscript:" "setObject:${1:(id)obj} forKeyedSubscript:${2:(id <NSCopying>)key} NS_AVAILABLE(10_8, 6_0)" "setObject:(id)obj forKeyedSubscript:(id <NSCopying>)key NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDictionary:" "setDictionary:${1:(NSDictionary *)otherDictionary}" "setDictionary:(NSDictionary *)otherDictionary" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectsForKeys:" "removeObjectsForKeys:${1:(NSArray *)keyArray}" "removeObjectsForKeys:(NSArray *)keyArray" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAllObjects" "removeAllObjects" "removeAllObjects" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addEntriesFromDictionary:" "addEntriesFromDictionary:${1:(NSDictionary *)otherDictionary}" "addEntriesFromDictionary:(NSDictionary *)otherDictionary" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCapacity:" "initWithCapacity:${1:(NSUInteger)numItems} NS_DESIGNATED_INITIALIZER" "initWithCapacity:(NSUInteger)numItems NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setObject:forKey:" "setObject:${1:(id)anObject} forKey:${2:(id <NSCopying>)aKey}" "setObject:(id)anObject forKey:(id <NSCopying>)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectForKey:" "removeObjectForKey:${1:(id)aKey}" "removeObjectForKey:(id)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfURL:" "initWithContentsOfURL:${1:(NSURL *)url}" "initWithContentsOfURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfFile:" "initWithContentsOfFile:${1:(NSString *)path}" "initWithContentsOfFile:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithContentsOfURL:" "dictionaryWithContentsOfURL:${1:(NSURL *)url}" "dictionaryWithContentsOfURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithContentsOfFile:" "dictionaryWithContentsOfFile:${1:(NSString *)path}" "dictionaryWithContentsOfFile:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithObjects:forKeys:" "initWithObjects:${1:(NSArray *)objects} forKeys:${2:(NSArray *)keys}" "initWithObjects:(NSArray *)objects forKeys:(NSArray *)keys" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithDictionary:copyItems:" "initWithDictionary:${1:(NSDictionary *)otherDictionary} copyItems:${2:(BOOL)flag}" "initWithDictionary:(NSDictionary *)otherDictionary copyItems:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithDictionary:" "initWithDictionary:${1:(NSDictionary *)otherDictionary}" "initWithDictionary:(NSDictionary *)otherDictionary" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithObjectsAndKeys:" "initWithObjectsAndKeys:${1:(id)firstObject}, ... NS_REQUIRES_NIL_TERMINATION" "initWithObjectsAndKeys:(id)firstObject, ... NS_REQUIRES_NIL_TERMINATION" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithObjects:forKeys:" "dictionaryWithObjects:${1:(NSArray *)objects} forKeys:${2:(NSArray *)keys}" "dictionaryWithObjects:(NSArray *)objects forKeys:(NSArray *)keys" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithDictionary:" "dictionaryWithDictionary:${1:(NSDictionary *)dict}" "dictionaryWithDictionary:(NSDictionary *)dict" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithObjectsAndKeys:" "dictionaryWithObjectsAndKeys:${1:(id)firstObject}, ... NS_REQUIRES_NIL_TERMINATION" "dictionaryWithObjectsAndKeys:(id)firstObject, ... NS_REQUIRES_NIL_TERMINATION" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithObjects:forKeys:count:" "dictionaryWithObjects:${1:(const id [])objects} forKeys:${2:(const id <NSCopying> [])keys} count:${3:(NSUInteger)cnt}" "dictionaryWithObjects:(const id [])objects forKeys:(const id <NSCopying> [])keys count:(NSUInteger)cnt" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithObjects:forKeys:count:" "dictionaryWithObjects:${1:(const id [])objects} forKeys:${2:(const id [])keys} count:${3:(NSUInteger)cnt}" "dictionaryWithObjects:(const id [])objects forKeys:(const id [])keys count:(NSUInteger)cnt" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionaryWithObject:forKey:" "dictionaryWithObject:${1:(id)object} forKey:${2:(id <NSCopying>)key}" "dictionaryWithObject:(id)object forKey:(id <NSCopying>)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dictionary" "dictionary" "dictionary" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("keysOfEntriesWithOptions:passingTest:" "keysOfEntriesWithOptions:${1:(NSEnumerationOptions)opts} passingTest:${2:(BOOL (^)(id key, id obj, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("keysOfEntriesPassingTest:" "keysOfEntriesPassingTest:${1:(BOOL (^)(id key, id obj, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("keysSortedByValueWithOptions:usingComparator:" "keysSortedByValueWithOptions:${1:(NSSortOptions)opts} usingComparator:${2:(NSComparator)cmptr} NS_AVAILABLE(10_6, 4_0)" "keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("keysSortedByValueUsingComparator:" "keysSortedByValueUsingComparator:${1:(NSComparator)cmptr} NS_AVAILABLE(10_6, 4_0)" "keysSortedByValueUsingComparator:(NSComparator)cmptr NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateKeysAndObjectsWithOptions:usingBlock:" "enumerateKeysAndObjectsWithOptions:${1:(NSEnumerationOptions)opts} usingBlock:${2:(void (^)(id key, id obj, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateKeysAndObjectsUsingBlock:" "enumerateKeysAndObjectsUsingBlock:${1:(void (^)(id key, id obj, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectForKeyedSubscript:" "objectForKeyedSubscript:${1:(id)key} NS_AVAILABLE(10_8, 6_0)" "objectForKeyedSubscript:(id)key NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getObjects:andKeys:" "getObjects:${1:(id __unsafe_unretained [])objects} andKeys:${2:(id __unsafe_unretained [])keys}" "getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("keysSortedByValueUsingSelector:" "keysSortedByValueUsingSelector:${1:(SEL)comparator}" "keysSortedByValueUsingSelector:(SEL)comparator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToURL:atomically:" "writeToURL:${1:(NSURL *)url} atomically:${2:(BOOL)atomically}" "writeToURL:(NSURL *)url atomically:(BOOL)atomically" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToFile:atomically:" "writeToFile:${1:(NSString *)path} atomically:${2:(BOOL)useAuxiliaryFile}" "writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectsForKeys:notFoundMarker:" "objectsForKeys:${1:(NSArray *)keys} notFoundMarker:${2:(id)marker}" "objectsForKeys:(NSArray *)keys notFoundMarker:(id)marker" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectEnumerator" "objectEnumerator" "objectEnumerator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToDictionary:" "isEqualToDictionary:${1:(NSDictionary *)otherDictionary}" "isEqualToDictionary:(NSDictionary *)otherDictionary" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("descriptionWithLocale:indent:" "descriptionWithLocale:${1:(id)locale} indent:${2:(NSUInteger)level}" "descriptionWithLocale:(id)locale indent:(NSUInteger)level" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("descriptionWithLocale:" "descriptionWithLocale:${1:(id)locale}" "descriptionWithLocale:(id)locale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("allKeysForObject:" "allKeysForObject:${1:(id)anObject}" "allKeysForObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithObjects:forKeys:count:" "initWithObjects:${1:(const id [])objects} forKeys:${2:(const id <NSCopying> [])keys} count:${3:(NSUInteger)cnt} NS_DESIGNATED_INITIALIZER" "initWithObjects:(const id [])objects forKeys:(const id <NSCopying> [])keys count:(NSUInteger)cnt NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithObjects:forKeys:count:" "initWithObjects:${1:(const id [])objects} forKeys:${2:(const id [])keys} count:${3:(NSUInteger)cnt}" "initWithObjects:(const id [])objects forKeys:(const id [])keys count:(NSUInteger)cnt" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("keyEnumerator" "keyEnumerator" "keyEnumerator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectForKey:" "objectForKey:${1:(id)aKey}" "objectForKey:(id)aKey" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scanDecimal:" "scanDecimal:${1:(NSDecimal *)dcm}" "scanDecimal:(NSDecimal *)dcm" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:" "decimalNumberHandlerWithRoundingMode:${1:(NSRoundingMode)roundingMode} scale:${2:(short)scale} raiseOnExactness:${3:(BOOL)exact} raiseOnOverflow:${4:(BOOL)overflow} raiseOnUnderflow:${5:(BOOL)underflow} raiseOnDivideByZero:${6:(BOOL)divideByZero}" "decimalNumberHandlerWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)exact raiseOnOverflow:(BOOL)overflow raiseOnUnderflow:(BOOL)underflow raiseOnDivideByZero:(BOOL)divideByZero" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:" "initWithRoundingMode:${1:(NSRoundingMode)roundingMode} scale:${2:(short)scale} raiseOnExactness:${3:(BOOL)exact} raiseOnOverflow:${4:(BOOL)overflow} raiseOnUnderflow:${5:(BOOL)underflow} raiseOnDivideByZero:${6:(BOOL)divideByZero} NS_DESIGNATED_INITIALIZER" "initWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)exact raiseOnOverflow:(BOOL)overflow raiseOnUnderflow:(BOOL)underflow raiseOnDivideByZero:(BOOL)divideByZero NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("defaultDecimalNumberHandler" "defaultDecimalNumberHandler" "defaultDecimalNumberHandler" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("defaultBehavior" "defaultBehavior" "defaultBehavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDefaultBehavior:" "setDefaultBehavior:${1:(id <NSDecimalNumberBehaviors>)behavior}" "setDefaultBehavior:(id <NSDecimalNumberBehaviors>)behavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("compare:" "compare:${1:(NSNumber *)decimalNumber}" "compare:(NSNumber *)decimalNumber" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberByRoundingAccordingToBehavior:" "decimalNumberByRoundingAccordingToBehavior:${1:(id <NSDecimalNumberBehaviors>)behavior}" "decimalNumberByRoundingAccordingToBehavior:(id <NSDecimalNumberBehaviors>)behavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberByMultiplyingByPowerOf10:withBehavior:" "decimalNumberByMultiplyingByPowerOf10:${1:(short)power} withBehavior:${2:(id <NSDecimalNumberBehaviors>)behavior}" "decimalNumberByMultiplyingByPowerOf10:(short)power withBehavior:(id <NSDecimalNumberBehaviors>)behavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberByMultiplyingByPowerOf10:" "decimalNumberByMultiplyingByPowerOf10:${1:(short)power}" "decimalNumberByMultiplyingByPowerOf10:(short)power" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberByRaisingToPower:withBehavior:" "decimalNumberByRaisingToPower:${1:(NSUInteger)power} withBehavior:${2:(id <NSDecimalNumberBehaviors>)behavior}" "decimalNumberByRaisingToPower:(NSUInteger)power withBehavior:(id <NSDecimalNumberBehaviors>)behavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberByRaisingToPower:" "decimalNumberByRaisingToPower:${1:(NSUInteger)power}" "decimalNumberByRaisingToPower:(NSUInteger)power" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberByDividingBy:withBehavior:" "decimalNumberByDividingBy:${1:(NSDecimalNumber *)decimalNumber} withBehavior:${2:(id <NSDecimalNumberBehaviors>)behavior}" "decimalNumberByDividingBy:(NSDecimalNumber *)decimalNumber withBehavior:(id <NSDecimalNumberBehaviors>)behavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberByDividingBy:" "decimalNumberByDividingBy:${1:(NSDecimalNumber *)decimalNumber}" "decimalNumberByDividingBy:(NSDecimalNumber *)decimalNumber" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberByMultiplyingBy:withBehavior:" "decimalNumberByMultiplyingBy:${1:(NSDecimalNumber *)decimalNumber} withBehavior:${2:(id <NSDecimalNumberBehaviors>)behavior}" "decimalNumberByMultiplyingBy:(NSDecimalNumber *)decimalNumber withBehavior:(id <NSDecimalNumberBehaviors>)behavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberByMultiplyingBy:" "decimalNumberByMultiplyingBy:${1:(NSDecimalNumber *)decimalNumber}" "decimalNumberByMultiplyingBy:(NSDecimalNumber *)decimalNumber" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberBySubtracting:withBehavior:" "decimalNumberBySubtracting:${1:(NSDecimalNumber *)decimalNumber} withBehavior:${2:(id <NSDecimalNumberBehaviors>)behavior}" "decimalNumberBySubtracting:(NSDecimalNumber *)decimalNumber withBehavior:(id <NSDecimalNumberBehaviors>)behavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberBySubtracting:" "decimalNumberBySubtracting:${1:(NSDecimalNumber *)decimalNumber}" "decimalNumberBySubtracting:(NSDecimalNumber *)decimalNumber" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberByAdding:withBehavior:" "decimalNumberByAdding:${1:(NSDecimalNumber *)decimalNumber} withBehavior:${2:(id <NSDecimalNumberBehaviors>)behavior}" "decimalNumberByAdding:(NSDecimalNumber *)decimalNumber withBehavior:(id <NSDecimalNumberBehaviors>)behavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberByAdding:" "decimalNumberByAdding:${1:(NSDecimalNumber *)decimalNumber}" "decimalNumberByAdding:(NSDecimalNumber *)decimalNumber" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("notANumber" "notANumber" "notANumber" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("maximumDecimalNumber" "maximumDecimalNumber" "maximumDecimalNumber" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("minimumDecimalNumber" "minimumDecimalNumber" "minimumDecimalNumber" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("one" "one" "one" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("zero" "zero" "zero" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberWithString:locale:" "decimalNumberWithString:${1:(NSString *)numberValue} locale:${2:(id)locale}" "decimalNumberWithString:(NSString *)numberValue locale:(id)locale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberWithString:" "decimalNumberWithString:${1:(NSString *)numberValue}" "decimalNumberWithString:(NSString *)numberValue" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberWithDecimal:" "decimalNumberWithDecimal:${1:(NSDecimal)dcm}" "decimalNumberWithDecimal:(NSDecimal)dcm" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalNumberWithMantissa:exponent:isNegative:" "decimalNumberWithMantissa:${1:(unsigned long long)mantissa} exponent:${2:(short)exponent} isNegative:${3:(BOOL)flag}" "decimalNumberWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("descriptionWithLocale:" "descriptionWithLocale:${1:(id)locale}" "descriptionWithLocale:(id)locale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithString:locale:" "initWithString:${1:(NSString *)numberValue} locale:${2:(id)locale}" "initWithString:(NSString *)numberValue locale:(id)locale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithString:" "initWithString:${1:(NSString *)numberValue}" "initWithString:(NSString *)numberValue" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithDecimal:" "initWithDecimal:${1:(NSDecimal)dcm} NS_DESIGNATED_INITIALIZER" "initWithDecimal:(NSDecimal)dcm NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithMantissa:exponent:isNegative:" "initWithMantissa:${1:(unsigned long long)mantissa} exponent:${2:(short)exponent} isNegative:${3:(BOOL)flag}" "initWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("exceptionDuringOperation:error:leftOperand:rightOperand:" "exceptionDuringOperation:${1:(SEL)operation} error:${2:(NSCalculationError)error} leftOperand:${3:(NSDecimalNumber *)leftOperand} rightOperand:${4:(NSDecimalNumber *)rightOperand}" "exceptionDuringOperation:(SEL)operation error:(NSCalculationError)error leftOperand:(NSDecimalNumber *)leftOperand rightOperand:(NSDecimalNumber *)rightOperand" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("scale" "scale" "scale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("roundingMode" "roundingMode" "roundingMode" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromDate:toDate:" "stringFromDate:${1:(NSDate *)fromDate} toDate:${2:(NSDate *)toDate}" "stringFromDate:(NSDate *)fromDate toDate:(NSDate *)toDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("allowsNaturalLanguage NS_CALENDAR_DEPRECATED_MAC(10_4, 10_9, \"There is no replacement\")" "allowsNaturalLanguage NS_CALENDAR_DEPRECATED_MAC(10_4, 10_9, \"There is no replacement\")" "allowsNaturalLanguage NS_CALENDAR_DEPRECATED_MAC(10_4, 10_9, \"There is no replacement\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithDateFormat:allowNaturalLanguage:setDateFormat:" "initWithDateFormat:${1:(NSString *)format} allowNaturalLanguage:${2:(BOOL)flag} NS_CALENDAR_DEPRECATED_MAC(10_4, 10_9, \"Use -setDateFormat: as of OS X 10.9 to set the date format of a 10.0-style date formatter" "initWithDateFormat:(NSString *)format allowNaturalLanguage:(BOOL)flag NS_CALENDAR_DEPRECATED_MAC(10_4, 10_9, \"Use -setDateFormat: as of OS X 10.9 to set the date format of a 10.0-style date formatter" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setLocalizedDateFormatFromTemplate:" " setLocalizedDateFormatFromTemplate:${1:(NSString *)dateFormatTemplate} NS_AVAILABLE(10_10, 8_0)" " setLocalizedDateFormatFromTemplate:(NSString *)dateFormatTemplate NS_AVAILABLE(10_10, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setDefaultFormatterBehavior:" "setDefaultFormatterBehavior:${1:(NSDateFormatterBehavior)behavior}" "setDefaultFormatterBehavior:(NSDateFormatterBehavior)behavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("defaultFormatterBehavior" "defaultFormatterBehavior" "defaultFormatterBehavior" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateFormatFromTemplate:options:locale:" "dateFormatFromTemplate:${1:(NSString *)tmplate} options:${2:(NSUInteger)opts} locale:${3:(NSLocale *)locale} NS_AVAILABLE(10_6, 4_0)" "dateFormatFromTemplate:(NSString *)tmplate options:(NSUInteger)opts locale:(NSLocale *)locale NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedStringFromDate:dateStyle:timeStyle:" "localizedStringFromDate:${1:(NSDate *)date} dateStyle:${2:(NSDateFormatterStyle)dstyle} timeStyle:${3:(NSDateFormatterStyle)tstyle} NS_AVAILABLE(10_6, 4_0)" "localizedStringFromDate:(NSDate *)date dateStyle:(NSDateFormatterStyle)dstyle timeStyle:(NSDateFormatterStyle)tstyle NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateFromString:" "dateFromString:${1:(NSString *)string}" "dateFromString:(NSString *)string" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromDate:" "stringFromDate:${1:(NSDate *)date}" "stringFromDate:(NSDate *)date" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getObjectValue:forString:range:error:" "getObjectValue:${1:(out id *)obj} forString:${2:(NSString *)string} range:${3:(inout NSRange *)rangep} error:${4:(out NSError **)error}" "getObjectValue:(out id *)obj forString:(NSString *)string range:(inout NSRange *)rangep error:(out NSError **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getObjectValue:forString:errorDescription:" "getObjectValue:${1:(out id *)obj} forString:${2:(NSString *)string} errorDescription:${3:(out NSString **)error}" "getObjectValue:(out id *)obj forString:(NSString *)string errorDescription:(out NSString **)error" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedStringFromDateComponents:unitsStyle:" "localizedStringFromDateComponents:${1:(NSDateComponents *)components} unitsStyle:${2:(NSDateComponentsFormatterUnitsStyle) unitsStyle}" "localizedStringFromDateComponents:(NSDateComponents *)components unitsStyle:(NSDateComponentsFormatterUnitsStyle) unitsStyle" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromTimeInterval:" "stringFromTimeInterval:${1:(NSTimeInterval)ti}" "stringFromTimeInterval:(NSTimeInterval)ti" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromDate:toDate:" "stringFromDate:${1:(NSDate *)startDate} toDate:${2:(NSDate *)endDate}" "stringFromDate:(NSDate *)startDate toDate:(NSDate *)endDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromDateComponents:" "stringFromDateComponents:${1:(NSDateComponents *)components}" "stringFromDateComponents:(NSDateComponents *)components" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringForObjectValue:" "stringForObjectValue:${1:(id)obj}" "stringForObjectValue:(id)obj" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithTimeInterval:sinceDate:" "initWithTimeInterval:${1:(NSTimeInterval)secsToBeAdded} sinceDate:${2:(NSDate *)date}" "initWithTimeInterval:(NSTimeInterval)secsToBeAdded sinceDate:(NSDate *)date" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithTimeIntervalSince1970:" "initWithTimeIntervalSince1970:${1:(NSTimeInterval)secs}" "initWithTimeIntervalSince1970:(NSTimeInterval)secs" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithTimeIntervalSinceNow:" "initWithTimeIntervalSinceNow:${1:(NSTimeInterval)secs}" "initWithTimeIntervalSinceNow:(NSTimeInterval)secs" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("distantPast" "distantPast" "distantPast" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("distantFuture" "distantFuture" "distantFuture" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateWithTimeInterval:sinceDate:" "dateWithTimeInterval:${1:(NSTimeInterval)secsToBeAdded} sinceDate:${2:(NSDate *)date}" "dateWithTimeInterval:(NSTimeInterval)secsToBeAdded sinceDate:(NSDate *)date" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateWithTimeIntervalSince1970:" "dateWithTimeIntervalSince1970:${1:(NSTimeInterval)secs}" "dateWithTimeIntervalSince1970:(NSTimeInterval)secs" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateWithTimeIntervalSinceReferenceDate:" "dateWithTimeIntervalSinceReferenceDate:${1:(NSTimeInterval)ti}" "dateWithTimeIntervalSinceReferenceDate:(NSTimeInterval)ti" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateWithTimeIntervalSinceNow:" "dateWithTimeIntervalSinceNow:${1:(NSTimeInterval)secs}" "dateWithTimeIntervalSinceNow:(NSTimeInterval)secs" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("date" "date" "date" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("timeIntervalSinceReferenceDate" "timeIntervalSinceReferenceDate" "timeIntervalSinceReferenceDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("descriptionWithLocale:" "descriptionWithLocale:${1:(id)locale}" "descriptionWithLocale:(id)locale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToDate:" "isEqualToDate:${1:(NSDate *)otherDate}" "isEqualToDate:(NSDate *)otherDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("compare:" "compare:${1:(NSDate *)other}" "compare:(NSDate *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("laterDate:" "laterDate:${1:(NSDate *)anotherDate}" "laterDate:(NSDate *)anotherDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("earlierDate:" "earlierDate:${1:(NSDate *)anotherDate}" "earlierDate:(NSDate *)anotherDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateByAddingTimeInterval:" "dateByAddingTimeInterval:${1:(NSTimeInterval)ti} NS_AVAILABLE(10_6, 2_0)" "dateByAddingTimeInterval:(NSTimeInterval)ti NS_AVAILABLE(10_6, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addTimeInterval:" "addTimeInterval:${1:(NSTimeInterval)seconds} NS_DEPRECATED(10_0, 10_6, 2_0, 4_0)" "addTimeInterval:(NSTimeInterval)seconds NS_DEPRECATED(10_0, 10_6, 2_0, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("timeIntervalSinceDate:" "timeIntervalSinceDate:${1:(NSDate *)anotherDate}" "timeIntervalSinceDate:(NSDate *)anotherDate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithTimeIntervalSinceReferenceDate:" "initWithTimeIntervalSinceReferenceDate:${1:(NSTimeInterval)ti} NS_DESIGNATED_INITIALIZER" "initWithTimeIntervalSinceReferenceDate:(NSTimeInterval)ti NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithLength:" "initWithLength:${1:(NSUInteger)length}" "initWithLength:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCapacity:" "initWithCapacity:${1:(NSUInteger)capacity}" "initWithCapacity:(NSUInteger)capacity" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithLength:" "dataWithLength:${1:(NSUInteger)length}" "dataWithLength:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithCapacity:" "dataWithCapacity:${1:(NSUInteger)aNumItems}" "dataWithCapacity:(NSUInteger)aNumItems" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceBytesInRange:withBytes:length:" "replaceBytesInRange:${1:(NSRange)range} withBytes:${2:(const void *)replacementBytes} length:${3:(NSUInteger)replacementLength}" "replaceBytesInRange:(NSRange)range withBytes:(const void *)replacementBytes length:(NSUInteger)replacementLength" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setData:" "setData:${1:(NSData *)data}" "setData:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("resetBytesInRange:" "resetBytesInRange:${1:(NSRange)range}" "resetBytesInRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceBytesInRange:withBytes:" "replaceBytesInRange:${1:(NSRange)range} withBytes:${2:(const void *)bytes}" "replaceBytesInRange:(NSRange)range withBytes:(const void *)bytes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("increaseLengthBy:" "increaseLengthBy:${1:(NSUInteger)extraLength}" "increaseLengthBy:(NSUInteger)extraLength" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("appendData:" "appendData:${1:(NSData *)other}" "appendData:(NSData *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("appendBytes:length:" "appendBytes:${1:(const void *)bytes} length:${2:(NSUInteger)length}" "appendBytes:(const void *)bytes length:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("base64Encoding NS_DEPRECATED(10_6, 10_9, 4_0, 7_0)" "base64Encoding NS_DEPRECATED(10_6, 10_9, 4_0, 7_0)" "base64Encoding NS_DEPRECATED(10_6, 10_9, 4_0, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithBase64Encoding:" "initWithBase64Encoding:${1:(NSString *)base64String} NS_DEPRECATED(10_6, 10_9, 4_0, 7_0)" "initWithBase64Encoding:(NSString *)base64String NS_DEPRECATED(10_6, 10_9, 4_0, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfMappedFile:initWithContentsOfURL:options:error:" "initWithContentsOfMappedFile:${1:(NSString *)path}  NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.\")" "initWithContentsOfMappedFile:(NSString *)path  NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"Use -initWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithContentsOfMappedFile:dataWithContentsOfURL:options:error:" "dataWithContentsOfMappedFile:${1:(NSString *)path} NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.\")" "dataWithContentsOfMappedFile:(NSString *)path NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"Use +dataWithContentsOfURL:options:error: and NSDataReadingMappedIfSafe or NSDataReadingMappedAlways instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getBytes:getBytes:length:" "getBytes:${1:(void *)buffer} NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.\")" "getBytes:(void *)buffer NS_DEPRECATED(10_0, 10_10, 2_0, 8_0, \"This method is unsafe because it could potentially cause buffer overruns. Use -getBytes:length: instead.\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("base64EncodedDataWithOptions:" "base64EncodedDataWithOptions:${1:(NSDataBase64EncodingOptions)options} NS_AVAILABLE(10_9, 7_0)" "base64EncodedDataWithOptions:(NSDataBase64EncodingOptions)options NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithBase64EncodedData:options:" "initWithBase64EncodedData:${1:(NSData *)base64Data} options:${2:(NSDataBase64DecodingOptions)options} NS_AVAILABLE(10_9, 7_0)" "initWithBase64EncodedData:(NSData *)base64Data options:(NSDataBase64DecodingOptions)options NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("base64EncodedStringWithOptions:" "base64EncodedStringWithOptions:${1:(NSDataBase64EncodingOptions)options} NS_AVAILABLE(10_9, 7_0)" "base64EncodedStringWithOptions:(NSDataBase64EncodingOptions)options NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithBase64EncodedString:options:" "initWithBase64EncodedString:${1:(NSString *)base64String} options:${2:(NSDataBase64DecodingOptions)options} NS_AVAILABLE(10_9, 7_0)" "initWithBase64EncodedString:(NSString *)base64String options:(NSDataBase64DecodingOptions)options NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithData:" "dataWithData:${1:(NSData *)data}" "dataWithData:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithData:" "initWithData:${1:(NSData *)data}" "initWithData:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfURL:" "initWithContentsOfURL:${1:(NSURL *)url}" "initWithContentsOfURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfFile:" "initWithContentsOfFile:${1:(NSString *)path}" "initWithContentsOfFile:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfURL:options:error:" "initWithContentsOfURL:${1:(NSURL *)url} options:${2:(NSDataReadingOptions)readOptionsMask} error:${3:(NSError **)errorPtr}" "initWithContentsOfURL:(NSURL *)url options:(NSDataReadingOptions)readOptionsMask error:(NSError **)errorPtr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfFile:options:error:" "initWithContentsOfFile:${1:(NSString *)path} options:${2:(NSDataReadingOptions)readOptionsMask} error:${3:(NSError **)errorPtr}" "initWithContentsOfFile:(NSString *)path options:(NSDataReadingOptions)readOptionsMask error:(NSError **)errorPtr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithBytesNoCopy:length:deallocator:" "initWithBytesNoCopy:${1:(void *)bytes} length:${2:(NSUInteger)length} deallocator:${3:(void (^)(void *bytes, NSUInteger length))deallocator} NS_AVAILABLE(10_9, 7_0)" "initWithBytesNoCopy:(void *)bytes length:(NSUInteger)length deallocator:(void (^)(void *bytes, NSUInteger length))deallocator NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithBytesNoCopy:length:freeWhenDone:" "initWithBytesNoCopy:${1:(void *)bytes} length:${2:(NSUInteger)length} freeWhenDone:${3:(BOOL)b}" "initWithBytesNoCopy:(void *)bytes length:(NSUInteger)length freeWhenDone:(BOOL)b" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithBytesNoCopy:length:" "initWithBytesNoCopy:${1:(void *)bytes} length:${2:(NSUInteger)length}" "initWithBytesNoCopy:(void *)bytes length:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithBytes:length:" "initWithBytes:${1:(const void *)bytes} length:${2:(NSUInteger)length}" "initWithBytes:(const void *)bytes length:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithContentsOfURL:" "dataWithContentsOfURL:${1:(NSURL *)url}" "dataWithContentsOfURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithContentsOfFile:" "dataWithContentsOfFile:${1:(NSString *)path}" "dataWithContentsOfFile:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithContentsOfURL:options:error:" "dataWithContentsOfURL:${1:(NSURL *)url} options:${2:(NSDataReadingOptions)readOptionsMask} error:${3:(NSError **)errorPtr}" "dataWithContentsOfURL:(NSURL *)url options:(NSDataReadingOptions)readOptionsMask error:(NSError **)errorPtr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithContentsOfFile:options:error:" "dataWithContentsOfFile:${1:(NSString *)path} options:${2:(NSDataReadingOptions)readOptionsMask} error:${3:(NSError **)errorPtr}" "dataWithContentsOfFile:(NSString *)path options:(NSDataReadingOptions)readOptionsMask error:(NSError **)errorPtr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithBytesNoCopy:length:freeWhenDone:" "dataWithBytesNoCopy:${1:(void *)bytes} length:${2:(NSUInteger)length} freeWhenDone:${3:(BOOL)b}" "dataWithBytesNoCopy:(void *)bytes length:(NSUInteger)length freeWhenDone:(BOOL)b" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithBytesNoCopy:length:" "dataWithBytesNoCopy:${1:(void *)bytes} length:${2:(NSUInteger)length}" "dataWithBytesNoCopy:(void *)bytes length:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dataWithBytes:length:" "dataWithBytes:${1:(const void *)bytes} length:${2:(NSUInteger)length}" "dataWithBytes:(const void *)bytes length:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("data" "data" "data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateByteRangesUsingBlock:" " enumerateByteRangesUsingBlock:${1:(void (^)(const void *bytes, NSRange byteRange, BOOL *stop))block} NS_AVAILABLE(10_9, 7_0)" " enumerateByteRangesUsingBlock:(void (^)(const void *bytes, NSRange byteRange, BOOL *stop))block NS_AVAILABLE(10_9, 7_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfData:options:range:" "rangeOfData:${1:(NSData *)dataToFind} options:${2:(NSDataSearchOptions)mask} range:${3:(NSRange)searchRange} NS_AVAILABLE(10_6, 4_0)" "rangeOfData:(NSData *)dataToFind options:(NSDataSearchOptions)mask range:(NSRange)searchRange NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToURL:options:error:" "writeToURL:${1:(NSURL *)url} options:${2:(NSDataWritingOptions)writeOptionsMask} error:${3:(NSError **)errorPtr}" "writeToURL:(NSURL *)url options:(NSDataWritingOptions)writeOptionsMask error:(NSError **)errorPtr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToFile:options:error:" "writeToFile:${1:(NSString *)path} options:${2:(NSDataWritingOptions)writeOptionsMask} error:${3:(NSError **)errorPtr}" "writeToFile:(NSString *)path options:(NSDataWritingOptions)writeOptionsMask error:(NSError **)errorPtr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToURL:atomically:" "writeToURL:${1:(NSURL *)url} atomically:${2:(BOOL)atomically}" "writeToURL:(NSURL *)url atomically:(BOOL)atomically" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToFile:atomically:" "writeToFile:${1:(NSString *)path} atomically:${2:(BOOL)useAuxiliaryFile}" "writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("subdataWithRange:" "subdataWithRange:${1:(NSRange)range}" "subdataWithRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToData:" "isEqualToData:${1:(NSData *)other}" "isEqualToData:(NSData *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getBytes:range:" "getBytes:${1:(void *)buffer} range:${2:(NSRange)range}" "getBytes:(void *)buffer range:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getBytes:length:" "getBytes:${1:(void *)buffer} length:${2:(NSUInteger)length}" "getBytes:(void *)buffer length:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("notPredicateWithSubpredicate:" "notPredicateWithSubpredicate:${1:(NSPredicate *)predicate}" "notPredicateWithSubpredicate:(NSPredicate *)predicate" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("orPredicateWithSubpredicates:" "orPredicateWithSubpredicates:${1:(NSArray *)subpredicates}" "orPredicateWithSubpredicates:(NSArray *)subpredicates" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("andPredicateWithSubpredicates:" "andPredicateWithSubpredicates:${1:(NSArray *)subpredicates}" "andPredicateWithSubpredicates:(NSArray *)subpredicates" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithType:subpredicates:" "initWithType:${1:(NSCompoundPredicateType)type} subpredicates:${2:(NSArray *)subpredicates}" "initWithType:(NSCompoundPredicateType)type subpredicates:(NSArray *)subpredicates" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithLeftExpression:rightExpression:customSelector:" "initWithLeftExpression:${1:(NSExpression *)lhs} rightExpression:${2:(NSExpression *)rhs} customSelector:${3:(SEL)selector}" "initWithLeftExpression:(NSExpression *)lhs rightExpression:(NSExpression *)rhs customSelector:(SEL)selector" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithLeftExpression:rightExpression:modifier:type:options:" "initWithLeftExpression:${1:(NSExpression *)lhs} rightExpression:${2:(NSExpression *)rhs} modifier:${3:(NSComparisonPredicateModifier)modifier} type:${4:(NSPredicateOperatorType)type} options:${5:(NSComparisonPredicateOptions)options}" "initWithLeftExpression:(NSExpression *)lhs rightExpression:(NSExpression *)rhs modifier:(NSComparisonPredicateModifier)modifier type:(NSPredicateOperatorType)type options:(NSComparisonPredicateOptions)options" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("predicateWithLeftExpression:rightExpression:customSelector:" "predicateWithLeftExpression:${1:(NSExpression *)lhs} rightExpression:${2:(NSExpression *)rhs} customSelector:${3:(SEL)selector}" "predicateWithLeftExpression:(NSExpression *)lhs rightExpression:(NSExpression *)rhs customSelector:(SEL)selector" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("predicateWithLeftExpression:rightExpression:modifier:type:options:" "predicateWithLeftExpression:${1:(NSExpression *)lhs} rightExpression:${2:(NSExpression *)rhs} modifier:${3:(NSComparisonPredicateModifier)modifier} type:${4:(NSPredicateOperatorType)type} options:${5:(NSComparisonPredicateOptions)options}" "predicateWithLeftExpression:(NSExpression *)lhs rightExpression:(NSExpression *)rhs modifier:(NSComparisonPredicateModifier)modifier type:(NSPredicateOperatorType)type options:(NSComparisonPredicateOptions)options" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeNXObject NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "decodeNXObject NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "decodeNXObject NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeNXObject:" "encodeNXObject:${1:(id)object} NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" "encodeNXObject:(id)object NS_DEPRECATED(10_0, 10_5, 2_0, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodePropertyListForKey:" "decodePropertyListForKey:${1:(NSString *)key} NS_AVAILABLE(10_8, 6_0)" "decodePropertyListForKey:(NSString *)key NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeObjectOfClasses:forKey:" "decodeObjectOfClasses:${1:(NSSet *)classes} forKey:${2:(NSString *)key} NS_AVAILABLE(10_8, 6_0)" "decodeObjectOfClasses:(NSSet *)classes forKey:(NSString *)key NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeObjectOfClass:forKey:" "decodeObjectOfClass:${1:(Class)aClass} forKey:${2:(NSString *)key} NS_AVAILABLE(10_8, 6_0)" "decodeObjectOfClass:(Class)aClass forKey:(NSString *)key NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeIntegerForKey:" "decodeIntegerForKey:${1:(NSString *)key} NS_AVAILABLE(10_5, 2_0)" "decodeIntegerForKey:(NSString *)key NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeInteger:forKey:" "encodeInteger:${1:(NSInteger)intv} forKey:${2:(NSString *)key} NS_AVAILABLE(10_5, 2_0)" "encodeInteger:(NSInteger)intv forKey:(NSString *)key NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeBytesForKey:returnedLength:" "decodeBytesForKey:${1:(NSString *)key} returnedLength:${2:(NSUInteger *)lengthp} NS_RETURNS_INNER_POINTER" "decodeBytesForKey:(NSString *)key returnedLength:(NSUInteger *)lengthp NS_RETURNS_INNER_POINTER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeDoubleForKey:" "decodeDoubleForKey:${1:(NSString *)key}" "decodeDoubleForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeFloatForKey:" "decodeFloatForKey:${1:(NSString *)key}" "decodeFloatForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeInt64ForKey:" "decodeInt64ForKey:${1:(NSString *)key}" "decodeInt64ForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeInt32ForKey:" "decodeInt32ForKey:${1:(NSString *)key}" "decodeInt32ForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeIntForKey:" "decodeIntForKey:${1:(NSString *)key}" "decodeIntForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeBoolForKey:" "decodeBoolForKey:${1:(NSString *)key}" "decodeBoolForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeObjectForKey:" "decodeObjectForKey:${1:(NSString *)key}" "decodeObjectForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("containsValueForKey:" "containsValueForKey:${1:(NSString *)key}" "containsValueForKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeBytes:length:forKey:" "encodeBytes:${1:(const uint8_t *)bytesp} length:${2:(NSUInteger)lenv} forKey:${3:(NSString *)key}" "encodeBytes:(const uint8_t *)bytesp length:(NSUInteger)lenv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeDouble:forKey:" "encodeDouble:${1:(double)realv} forKey:${2:(NSString *)key}" "encodeDouble:(double)realv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeFloat:forKey:" "encodeFloat:${1:(float)realv} forKey:${2:(NSString *)key}" "encodeFloat:(float)realv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeInt64:forKey:" "encodeInt64:${1:(int64_t)intv} forKey:${2:(NSString *)key}" "encodeInt64:(int64_t)intv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeInt32:forKey:" "encodeInt32:${1:(int32_t)intv} forKey:${2:(NSString *)key}" "encodeInt32:(int32_t)intv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeInt:forKey:" "encodeInt:${1:(int)intv} forKey:${2:(NSString *)key}" "encodeInt:(int)intv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeBool:forKey:" "encodeBool:${1:(BOOL)boolv} forKey:${2:(NSString *)key}" "encodeBool:(BOOL)boolv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeConditionalObject:forKey:" "encodeConditionalObject:${1:(id)objv} forKey:${2:(NSString *)key}" "encodeConditionalObject:(id)objv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeObject:forKey:" "encodeObject:${1:(id)objv} forKey:${2:(NSString *)key}" "encodeObject:(id)objv forKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectZone NS_AUTOMATED_REFCOUNT_UNAVAILABLE" "objectZone NS_AUTOMATED_REFCOUNT_UNAVAILABLE" "objectZone NS_AUTOMATED_REFCOUNT_UNAVAILABLE" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setObjectZone:" "setObjectZone:${1:(NSZone *)zone} NS_AUTOMATED_REFCOUNT_UNAVAILABLE" "setObjectZone:(NSZone *)zone NS_AUTOMATED_REFCOUNT_UNAVAILABLE" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodePropertyList" "decodePropertyList" "decodePropertyList" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodePropertyList:" "encodePropertyList:${1:(id)aPropertyList}" "encodePropertyList:(id)aPropertyList" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeBytesWithReturnedLength:" "decodeBytesWithReturnedLength:${1:(NSUInteger *)lengthp} NS_RETURNS_INNER_POINTER" "decodeBytesWithReturnedLength:(NSUInteger *)lengthp NS_RETURNS_INNER_POINTER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeArrayOfObjCType:count:at:" "decodeArrayOfObjCType:${1:(const char *)itemType} count:${2:(NSUInteger)count} at:${3:(void *)array}" "decodeArrayOfObjCType:(const char *)itemType count:(NSUInteger)count at:(void *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeValuesOfObjCTypes:" "decodeValuesOfObjCTypes:${1:(const char *)types}, ..." "decodeValuesOfObjCTypes:(const char *)types, ..." nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeObject" "decodeObject" "decodeObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeBytes:length:" "encodeBytes:${1:(const void *)byteaddr} length:${2:(NSUInteger)length}" "encodeBytes:(const void *)byteaddr length:(NSUInteger)length" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeArrayOfObjCType:count:at:" "encodeArrayOfObjCType:${1:(const char *)type} count:${2:(NSUInteger)count} at:${3:(const void *)array}" "encodeArrayOfObjCType:(const char *)type count:(NSUInteger)count at:(const void *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeValuesOfObjCTypes:" "encodeValuesOfObjCTypes:${1:(const char *)types}, ..." "encodeValuesOfObjCTypes:(const char *)types, ..." nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeConditionalObject:" "encodeConditionalObject:${1:(id)object}" "encodeConditionalObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeByrefObject:" "encodeByrefObject:${1:(id)anObject}" "encodeByrefObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeBycopyObject:" "encodeBycopyObject:${1:(id)anObject}" "encodeBycopyObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeRootObject:" "encodeRootObject:${1:(id)rootObject}" "encodeRootObject:(id)rootObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeObject:" "encodeObject:${1:(id)object}" "encodeObject:(id)object" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("versionForClassName:" "versionForClassName:${1:(NSString *)className}" "versionForClassName:(NSString *)className" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeDataObject" "decodeDataObject" "decodeDataObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decodeValueOfObjCType:at:" "decodeValueOfObjCType:${1:(const char *)type} at:${2:(void *)data}" "decodeValueOfObjCType:(const char *)type at:(void *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeDataObject:" "encodeDataObject:${1:(NSData *)data}" "encodeDataObject:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("encodeValueOfObjCType:at:" "encodeValueOfObjCType:${1:(const char *)type} at:${2:(const void *)addr}" "encodeValueOfObjCType:(const char *)type at:(const void *)addr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("characterSetWithContentsOfFile:" "characterSetWithContentsOfFile:${1:(NSString *)fName}" "characterSetWithContentsOfFile:(NSString *)fName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("characterSetWithBitmapRepresentation:" "characterSetWithBitmapRepresentation:${1:(NSData *)data}" "characterSetWithBitmapRepresentation:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("characterSetWithCharactersInString:" "characterSetWithCharactersInString:${1:(NSString *)aString}" "characterSetWithCharactersInString:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("characterSetWithRange:" "characterSetWithRange:${1:(NSRange)aRange}" "characterSetWithRange:(NSRange)aRange" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("newlineCharacterSet NS_AVAILABLE(10_5, 2_0)" "newlineCharacterSet NS_AVAILABLE(10_5, 2_0)" "newlineCharacterSet NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("symbolCharacterSet" "symbolCharacterSet" "symbolCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("capitalizedLetterCharacterSet" "capitalizedLetterCharacterSet" "capitalizedLetterCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("punctuationCharacterSet" "punctuationCharacterSet" "punctuationCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("illegalCharacterSet" "illegalCharacterSet" "illegalCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decomposableCharacterSet" "decomposableCharacterSet" "decomposableCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("alphanumericCharacterSet" "alphanumericCharacterSet" "alphanumericCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("nonBaseCharacterSet" "nonBaseCharacterSet" "nonBaseCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("uppercaseLetterCharacterSet" "uppercaseLetterCharacterSet" "uppercaseLetterCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lowercaseLetterCharacterSet" "lowercaseLetterCharacterSet" "lowercaseLetterCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("letterCharacterSet" "letterCharacterSet" "letterCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalDigitCharacterSet" "decimalDigitCharacterSet" "decimalDigitCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("whitespaceAndNewlineCharacterSet" "whitespaceAndNewlineCharacterSet" "whitespaceAndNewlineCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("whitespaceCharacterSet" "whitespaceCharacterSet" "whitespaceCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("controlCharacterSet" "controlCharacterSet" "controlCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("invert" "invert" "invert" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("formIntersectionWithCharacterSet:" "formIntersectionWithCharacterSet:${1:(NSCharacterSet *)otherSet}" "formIntersectionWithCharacterSet:(NSCharacterSet *)otherSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("formUnionWithCharacterSet:" "formUnionWithCharacterSet:${1:(NSCharacterSet *)otherSet}" "formUnionWithCharacterSet:(NSCharacterSet *)otherSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeCharactersInString:" "removeCharactersInString:${1:(NSString *)aString}" "removeCharactersInString:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addCharactersInString:" "addCharactersInString:${1:(NSString *)aString}" "addCharactersInString:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeCharactersInRange:" "removeCharactersInRange:${1:(NSRange)aRange}" "removeCharactersInRange:(NSRange)aRange" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addCharactersInRange:" "addCharactersInRange:${1:(NSRange)aRange}" "addCharactersInRange:(NSRange)aRange" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("hasMemberInPlane:" "hasMemberInPlane:${1:(uint8_t)thePlane}" "hasMemberInPlane:(uint8_t)thePlane" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isSupersetOfSet:" "isSupersetOfSet:${1:(NSCharacterSet *)theOtherSet}" "isSupersetOfSet:(NSCharacterSet *)theOtherSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("longCharacterIsMember:" "longCharacterIsMember:${1:(UTF32Char)theLongChar}" "longCharacterIsMember:(UTF32Char)theLongChar" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("characterIsMember:" "characterIsMember:${1:(unichar)aCharacter}" "characterIsMember:(unichar)aCharacter" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" " initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" " initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("characterSetWithContentsOfFile:" "characterSetWithContentsOfFile:${1:(NSString *)fName}" "characterSetWithContentsOfFile:(NSString *)fName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("characterSetWithBitmapRepresentation:" "characterSetWithBitmapRepresentation:${1:(NSData *)data}" "characterSetWithBitmapRepresentation:(NSData *)data" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("characterSetWithCharactersInString:" "characterSetWithCharactersInString:${1:(NSString *)aString}" "characterSetWithCharactersInString:(NSString *)aString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("characterSetWithRange:" "characterSetWithRange:${1:(NSRange)aRange}" "characterSetWithRange:(NSRange)aRange" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("newlineCharacterSet NS_AVAILABLE(10_5, 2_0)" "newlineCharacterSet NS_AVAILABLE(10_5, 2_0)" "newlineCharacterSet NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("symbolCharacterSet" "symbolCharacterSet" "symbolCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("capitalizedLetterCharacterSet" "capitalizedLetterCharacterSet" "capitalizedLetterCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("punctuationCharacterSet" "punctuationCharacterSet" "punctuationCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("illegalCharacterSet" "illegalCharacterSet" "illegalCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decomposableCharacterSet" "decomposableCharacterSet" "decomposableCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("alphanumericCharacterSet" "alphanumericCharacterSet" "alphanumericCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("nonBaseCharacterSet" "nonBaseCharacterSet" "nonBaseCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("uppercaseLetterCharacterSet" "uppercaseLetterCharacterSet" "uppercaseLetterCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("lowercaseLetterCharacterSet" "lowercaseLetterCharacterSet" "lowercaseLetterCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("letterCharacterSet" "letterCharacterSet" "letterCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("decimalDigitCharacterSet" "decimalDigitCharacterSet" "decimalDigitCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("whitespaceAndNewlineCharacterSet" "whitespaceAndNewlineCharacterSet" "whitespaceAndNewlineCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("whitespaceCharacterSet" "whitespaceCharacterSet" "whitespaceCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("controlCharacterSet" "controlCharacterSet" "controlCharacterSet" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isValidDateInCalendar:" "isValidDateInCalendar:${1:(NSCalendar *)calendar} NS_AVAILABLE(10_9, 8_0)" "isValidDateInCalendar:(NSCalendar *)calendar NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("valueForComponent:" "valueForComponent:${1:(NSCalendarUnit)unit} NS_AVAILABLE(10_9, 8_0)" "valueForComponent:(NSCalendarUnit)unit NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setValue:forComponent:" "setValue:${1:(NSInteger)value} forComponent:${2:(NSCalendarUnit)unit} NS_AVAILABLE(10_9, 8_0)" "setValue:(NSInteger)value forComponent:(NSCalendarUnit)unit NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setWeek:setWeekOfMonth:setWeekOfYear:" "setWeek:${1:(NSInteger)v} NS_CALENDAR_DEPRECATED(10_4, 10_9, 2_0, 7_0, \"Use setWeekOfMonth: or setWeekOfYear:, depending on which you mean\")" "setWeek:(NSInteger)v NS_CALENDAR_DEPRECATED(10_4, 10_9, 2_0, 7_0, \"Use setWeekOfMonth: or setWeekOfYear:, depending on which you mean\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("week NS_CALENDAR_DEPRECATED(10_4, 10_9, 2_0, 7_0, \"Use weekOfMonth or weekOfYear, depending on which you mean\")" "week NS_CALENDAR_DEPRECATED(10_4, 10_9, 2_0, 7_0, \"Use weekOfMonth or weekOfYear, depending on which you mean\")" "week NS_CALENDAR_DEPRECATED(10_4, 10_9, 2_0, 7_0, \"Use weekOfMonth or weekOfYear, depending on which you mean\")" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("date:matchesComponents:" "date:${1:(NSDate *)date} matchesComponents:${2:(NSDateComponents *)components} NS_AVAILABLE(10_9, 8_0)" "date:(NSDate *)date matchesComponents:(NSDateComponents *)components NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateBySettingHour:minute:second:ofDate:options:" "dateBySettingHour:${1:(NSInteger)h} minute:${2:(NSInteger)m} second:${3:(NSInteger)s} ofDate:${4:(NSDate *)date} options:${5:(NSCalendarOptions)opts} NS_AVAILABLE(10_9, 8_0)" "dateBySettingHour:(NSInteger)h minute:(NSInteger)m second:(NSInteger)s ofDate:(NSDate *)date options:(NSCalendarOptions)opts NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateBySettingUnit:value:ofDate:options:" "dateBySettingUnit:${1:(NSCalendarUnit)unit} value:${2:(NSInteger)v} ofDate:${3:(NSDate *)date} options:${4:(NSCalendarOptions)opts} NS_AVAILABLE(10_9, 8_0)" "dateBySettingUnit:(NSCalendarUnit)unit value:(NSInteger)v ofDate:(NSDate *)date options:(NSCalendarOptions)opts NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("nextDateAfterDate:matchingHour:minute:second:options:" "nextDateAfterDate:${1:(NSDate *)date} matchingHour:${2:(NSInteger)hourValue} minute:${3:(NSInteger)minuteValue} second:${4:(NSInteger)secondValue} options:${5:(NSCalendarOptions)options} NS_AVAILABLE(10_9, 8_0)" "nextDateAfterDate:(NSDate *)date matchingHour:(NSInteger)hourValue minute:(NSInteger)minuteValue second:(NSInteger)secondValue options:(NSCalendarOptions)options NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("nextDateAfterDate:matchingUnit:value:options:" "nextDateAfterDate:${1:(NSDate *)date} matchingUnit:${2:(NSCalendarUnit)unit} value:${3:(NSInteger)value} options:${4:(NSCalendarOptions)options} NS_AVAILABLE(10_9, 8_0)" "nextDateAfterDate:(NSDate *)date matchingUnit:(NSCalendarUnit)unit value:(NSInteger)value options:(NSCalendarOptions)options NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("nextDateAfterDate:matchingComponents:options:" "nextDateAfterDate:${1:(NSDate *)date} matchingComponents:${2:(NSDateComponents *)comps} options:${3:(NSCalendarOptions)options} NS_AVAILABLE(10_9, 8_0)" "nextDateAfterDate:(NSDate *)date matchingComponents:(NSDateComponents *)comps options:(NSCalendarOptions)options NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:" "enumerateDatesStartingAfterDate:${1:(NSDate *)start} matchingComponents:${2:(NSDateComponents *)comps} options:${3:(NSCalendarOptions)opts} usingBlock:${4:(void (^)(NSDate *date, BOOL exactMatch, BOOL *stop))block} NS_AVAILABLE(10_9, 8_0)" "enumerateDatesStartingAfterDate:(NSDate *)start matchingComponents:(NSDateComponents *)comps options:(NSCalendarOptions)opts usingBlock:(void (^)(NSDate *date, BOOL exactMatch, BOOL *stop))block NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateByAddingUnit:value:toDate:options:" "dateByAddingUnit:${1:(NSCalendarUnit)unit} value:${2:(NSInteger)value} toDate:${3:(NSDate *)date} options:${4:(NSCalendarOptions)options} NS_AVAILABLE(10_9, 8_0)" "dateByAddingUnit:(NSCalendarUnit)unit value:(NSInteger)value toDate:(NSDate *)date options:(NSCalendarOptions)options NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("components:fromDateComponents:toDateComponents:options:" "components:${1:(NSCalendarUnit)unitFlags} fromDateComponents:${2:(NSDateComponents *)startingDateComp} toDateComponents:${3:(NSDateComponents *)resultDateComp} options:${4:(NSCalendarOptions)options} NS_AVAILABLE(10_9, 8_0)" "components:(NSCalendarUnit)unitFlags fromDateComponents:(NSDateComponents *)startingDateComp toDateComponents:(NSDateComponents *)resultDateComp options:(NSCalendarOptions)options NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("nextWeekendStartDate:interval:options:afterDate:" "nextWeekendStartDate:${1:(out NSDate **)datep} interval:${2:(out NSTimeInterval *)tip} options:${3:(NSCalendarOptions)options} afterDate:${4:(NSDate *)date} NS_AVAILABLE(10_9, 8_0)" "nextWeekendStartDate:(out NSDate **)datep interval:(out NSTimeInterval *)tip options:(NSCalendarOptions)options afterDate:(NSDate *)date NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfWeekendStartDate:interval:containingDate:" "rangeOfWeekendStartDate:${1:(out NSDate **)datep} interval:${2:(out NSTimeInterval *)tip} containingDate:${3:(NSDate *)date} NS_AVAILABLE(10_9, 8_0)" "rangeOfWeekendStartDate:(out NSDate **)datep interval:(out NSTimeInterval *)tip containingDate:(NSDate *)date NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isDateInWeekend:" "isDateInWeekend:${1:(NSDate *)date} NS_AVAILABLE(10_9, 8_0)" "isDateInWeekend:(NSDate *)date NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isDateInTomorrow:" "isDateInTomorrow:${1:(NSDate *)date} NS_AVAILABLE(10_9, 8_0)" "isDateInTomorrow:(NSDate *)date NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isDateInYesterday:" "isDateInYesterday:${1:(NSDate *)date} NS_AVAILABLE(10_9, 8_0)" "isDateInYesterday:(NSDate *)date NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isDateInToday:" "isDateInToday:${1:(NSDate *)date} NS_AVAILABLE(10_9, 8_0)" "isDateInToday:(NSDate *)date NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isDate:inSameDayAsDate:" "isDate:${1:(NSDate *)date1} inSameDayAsDate:${2:(NSDate *)date2} NS_AVAILABLE(10_9, 8_0)" "isDate:(NSDate *)date1 inSameDayAsDate:(NSDate *)date2 NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isDate:equalToDate:toUnitGranularity:" "isDate:${1:(NSDate *)date1} equalToDate:${2:(NSDate *)date2} toUnitGranularity:${3:(NSCalendarUnit)unit} NS_AVAILABLE(10_9, 8_0)" "isDate:(NSDate *)date1 equalToDate:(NSDate *)date2 toUnitGranularity:(NSCalendarUnit)unit NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("compareDate:toDate:toUnitGranularity:" "compareDate:${1:(NSDate *)date1} toDate:${2:(NSDate *)date2} toUnitGranularity:${3:(NSCalendarUnit)unit} NS_AVAILABLE(10_9, 8_0)" "compareDate:(NSDate *)date1 toDate:(NSDate *)date2 toUnitGranularity:(NSCalendarUnit)unit NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("componentsInTimeZone:fromDate:" "componentsInTimeZone:${1:(NSTimeZone *)timezone} fromDate:${2:(NSDate *)date} NS_AVAILABLE(10_9, 8_0)" "componentsInTimeZone:(NSTimeZone *)timezone fromDate:(NSDate *)date NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("startOfDayForDate:" "startOfDayForDate:${1:(NSDate *)date} NS_AVAILABLE(10_9, 8_0)" "startOfDayForDate:(NSDate *)date NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:" "dateWithEra:${1:(NSInteger)eraValue} yearForWeekOfYear:${2:(NSInteger)yearValue} weekOfYear:${3:(NSInteger)weekValue} weekday:${4:(NSInteger)weekdayValue} hour:${5:(NSInteger)hourValue} minute:${6:(NSInteger)minuteValue} second:${7:(NSInteger)secondValue} nanosecond:${8:(NSInteger)nanosecondValue} NS_AVAILABLE(10_9, 8_0)" "dateWithEra:(NSInteger)eraValue yearForWeekOfYear:(NSInteger)yearValue weekOfYear:(NSInteger)weekValue weekday:(NSInteger)weekdayValue hour:(NSInteger)hourValue minute:(NSInteger)minuteValue second:(NSInteger)secondValue nanosecond:(NSInteger)nanosecondValue NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateWithEra:year:month:day:hour:minute:second:nanosecond:" "dateWithEra:${1:(NSInteger)eraValue} year:${2:(NSInteger)yearValue} month:${3:(NSInteger)monthValue} day:${4:(NSInteger)dayValue} hour:${5:(NSInteger)hourValue} minute:${6:(NSInteger)minuteValue} second:${7:(NSInteger)secondValue} nanosecond:${8:(NSInteger)nanosecondValue} NS_AVAILABLE(10_9, 8_0)" "dateWithEra:(NSInteger)eraValue year:(NSInteger)yearValue month:(NSInteger)monthValue day:(NSInteger)dayValue hour:(NSInteger)hourValue minute:(NSInteger)minuteValue second:(NSInteger)secondValue nanosecond:(NSInteger)nanosecondValue NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("component:fromDate:" "component:${1:(NSCalendarUnit)unit} fromDate:${2:(NSDate *)date} NS_AVAILABLE(10_9, 8_0)" "component:(NSCalendarUnit)unit fromDate:(NSDate *)date NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getHour:minute:second:nanosecond:fromDate:" "getHour:${1:(out NSInteger *)hourValuePointer} minute:${2:(out NSInteger *)minuteValuePointer} second:${3:(out NSInteger *)secondValuePointer} nanosecond:${4:(out NSInteger *)nanosecondValuePointer} fromDate:${5:(NSDate *)date} NS_AVAILABLE(10_9, 8_0)" "getHour:(out NSInteger *)hourValuePointer minute:(out NSInteger *)minuteValuePointer second:(out NSInteger *)secondValuePointer nanosecond:(out NSInteger *)nanosecondValuePointer fromDate:(NSDate *)date NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:" "getEra:${1:(out NSInteger *)eraValuePointer} yearForWeekOfYear:${2:(out NSInteger *)yearValuePointer} weekOfYear:${3:(out NSInteger *)weekValuePointer} weekday:${4:(out NSInteger *)weekdayValuePointer} fromDate:${5:(NSDate *)date} NS_AVAILABLE(10_9, 8_0)" "getEra:(out NSInteger *)eraValuePointer yearForWeekOfYear:(out NSInteger *)yearValuePointer weekOfYear:(out NSInteger *)weekValuePointer weekday:(out NSInteger *)weekdayValuePointer fromDate:(NSDate *)date NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getEra:year:month:day:fromDate:" "getEra:${1:(out NSInteger *)eraValuePointer} year:${2:(out NSInteger *)yearValuePointer} month:${3:(out NSInteger *)monthValuePointer} day:${4:(out NSInteger *)dayValuePointer} fromDate:${5:(NSDate *)date} NS_AVAILABLE(10_9, 8_0)" "getEra:(out NSInteger *)eraValuePointer year:(out NSInteger *)yearValuePointer month:(out NSInteger *)monthValuePointer day:(out NSInteger *)dayValuePointer fromDate:(NSDate *)date NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("components:fromDate:toDate:options:" "components:${1:(NSCalendarUnit)unitFlags} fromDate:${2:(NSDate *)startingDate} toDate:${3:(NSDate *)resultDate} options:${4:(NSCalendarOptions)opts}" "components:(NSCalendarUnit)unitFlags fromDate:(NSDate *)startingDate toDate:(NSDate *)resultDate options:(NSCalendarOptions)opts" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateByAddingComponents:toDate:options:" "dateByAddingComponents:${1:(NSDateComponents *)comps} toDate:${2:(NSDate *)date} options:${3:(NSCalendarOptions)opts}" "dateByAddingComponents:(NSDateComponents *)comps toDate:(NSDate *)date options:(NSCalendarOptions)opts" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("components:fromDate:" "components:${1:(NSCalendarUnit)unitFlags} fromDate:${2:(NSDate *)date}" "components:(NSCalendarUnit)unitFlags fromDate:(NSDate *)date" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("dateFromComponents:" "dateFromComponents:${1:(NSDateComponents *)comps}" "dateFromComponents:(NSDateComponents *)comps" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfUnit:startDate:interval:forDate:" "rangeOfUnit:${1:(NSCalendarUnit)unit} startDate:${2:(NSDate **)datep} interval:${3:(NSTimeInterval *)tip} forDate:${4:(NSDate *)date} NS_AVAILABLE(10_5, 2_0)" "rangeOfUnit:(NSCalendarUnit)unit startDate:(NSDate **)datep interval:(NSTimeInterval *)tip forDate:(NSDate *)date NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("ordinalityOfUnit:inUnit:forDate:" "ordinalityOfUnit:${1:(NSCalendarUnit)smaller} inUnit:${2:(NSCalendarUnit)larger} forDate:${3:(NSDate *)date}" "ordinalityOfUnit:(NSCalendarUnit)smaller inUnit:(NSCalendarUnit)larger forDate:(NSDate *)date" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("rangeOfUnit:inUnit:forDate:" "rangeOfUnit:${1:(NSCalendarUnit)smaller} inUnit:${2:(NSCalendarUnit)larger} forDate:${3:(NSDate *)date}" "rangeOfUnit:(NSCalendarUnit)smaller inUnit:(NSCalendarUnit)larger forDate:(NSDate *)date" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("maximumRangeOfUnit:" "maximumRangeOfUnit:${1:(NSCalendarUnit)unit}" "maximumRangeOfUnit:(NSCalendarUnit)unit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("minimumRangeOfUnit:" "minimumRangeOfUnit:${1:(NSCalendarUnit)unit}" "minimumRangeOfUnit:(NSCalendarUnit)unit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCalendarIdentifier:" "initWithCalendarIdentifier:${1:(NSString *)ident} NS_DESIGNATED_INITIALIZER" "initWithCalendarIdentifier:(NSString *)ident NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("calendarWithIdentifier:" "calendarWithIdentifier:${1:(NSString *)calendarIdentifierConstant} NS_AVAILABLE(10_9, 8_0)" "calendarWithIdentifier:(NSString *)calendarIdentifierConstant NS_AVAILABLE(10_9, 8_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("autoupdatingCurrentCalendar NS_AVAILABLE(10_5, 2_0)" "autoupdatingCurrentCalendar NS_AVAILABLE(10_5, 2_0)" "autoupdatingCurrentCalendar NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("currentCalendar" "currentCalendar" "currentCalendar" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("cache:willEvictObject:" "cache:${1:(NSCache *)cache} willEvictObject:${2:(id)obj}" "cache:(NSCache *)cache willEvictObject:(id)obj" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAllObjects" "removeAllObjects" "removeAllObjects" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectForKey:" "removeObjectForKey:${1:(id)key}" "removeObjectForKey:(id)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setObject:forKey:cost:" "setObject:${1:(id)obj} forKey:${2:(id)key} cost:${3:(NSUInteger)g}" "setObject:(id)obj forKey:(id)key cost:(NSUInteger)g" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setObject:forKey:" "setObject:${1:(id)obj} forKey:${2:(id)key}" "setObject:(id)obj forKey:(id)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectForKey:" "objectForKey:${1:(id)key}" "objectForKey:(id)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromByteCount:" "stringFromByteCount:${1:(long long)byteCount}" "stringFromByteCount:(long long)byteCount" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("stringFromByteCount:countStyle:" "stringFromByteCount:${1:(long long)byteCount} countStyle:${2:(NSByteCountFormatterCountStyle)countStyle}" "stringFromByteCount:(long long)byteCount countStyle:(NSByteCountFormatterCountStyle)countStyle" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("preferredLocalizationsFromArray:forPreferences:" "preferredLocalizationsFromArray:${1:(NSArray *)localizationsArray} forPreferences:${2:(NSArray *)preferencesArray}" "preferredLocalizationsFromArray:(NSArray *)localizationsArray forPreferences:(NSArray *)preferencesArray" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("preferredLocalizationsFromArray:" "preferredLocalizationsFromArray:${1:(NSArray *)localizationsArray}" "preferredLocalizationsFromArray:(NSArray *)localizationsArray" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("classNamed:" "classNamed:${1:(NSString *)className}" "classNamed:(NSString *)className" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectForInfoDictionaryKey:" "objectForInfoDictionaryKey:${1:(NSString *)key}" "objectForInfoDictionaryKey:(NSString *)key" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("localizedStringForKey:value:table:" "localizedStringForKey:${1:(NSString *)key} value:${2:(NSString *)value} table:${3:(NSString *)tableName} NS_FORMAT_ARGUMENT(1)" "localizedStringForKey:(NSString *)key value:(NSString *)value table:(NSString *)tableName NS_FORMAT_ARGUMENT(1)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pathsForResourcesOfType:inDirectory:forLocalization:" "pathsForResourcesOfType:${1:(NSString *)ext} inDirectory:${2:(NSString *)subpath} forLocalization:${3:(NSString *)localizationName}" "pathsForResourcesOfType:(NSString *)ext inDirectory:(NSString *)subpath forLocalization:(NSString *)localizationName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pathsForResourcesOfType:inDirectory:" "pathsForResourcesOfType:${1:(NSString *)ext} inDirectory:${2:(NSString *)subpath}" "pathsForResourcesOfType:(NSString *)ext inDirectory:(NSString *)subpath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pathForResource:ofType:inDirectory:forLocalization:" "pathForResource:${1:(NSString *)name} ofType:${2:(NSString *)ext} inDirectory:${3:(NSString *)subpath} forLocalization:${4:(NSString *)localizationName}" "pathForResource:(NSString *)name ofType:(NSString *)ext inDirectory:(NSString *)subpath forLocalization:(NSString *)localizationName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pathForResource:ofType:inDirectory:" "pathForResource:${1:(NSString *)name} ofType:${2:(NSString *)ext} inDirectory:${3:(NSString *)subpath}" "pathForResource:(NSString *)name ofType:(NSString *)ext inDirectory:(NSString *)subpath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pathForResource:ofType:" "pathForResource:${1:(NSString *)name} ofType:${2:(NSString *)ext}" "pathForResource:(NSString *)name ofType:(NSString *)ext" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pathsForResourcesOfType:inDirectory:" "pathsForResourcesOfType:${1:(NSString *)ext} inDirectory:${2:(NSString *)bundlePath}" "pathsForResourcesOfType:(NSString *)ext inDirectory:(NSString *)bundlePath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pathForResource:ofType:inDirectory:" "pathForResource:${1:(NSString *)name} ofType:${2:(NSString *)ext} inDirectory:${3:(NSString *)bundlePath}" "pathForResource:(NSString *)name ofType:(NSString *)ext inDirectory:(NSString *)bundlePath" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLsForResourcesWithExtension:subdirectory:localization:" "URLsForResourcesWithExtension:${1:(NSString *)ext} subdirectory:${2:(NSString *)subpath} localization:${3:(NSString *)localizationName} NS_AVAILABLE(10_6, 4_0)" "URLsForResourcesWithExtension:(NSString *)ext subdirectory:(NSString *)subpath localization:(NSString *)localizationName NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLsForResourcesWithExtension:subdirectory:" "URLsForResourcesWithExtension:${1:(NSString *)ext} subdirectory:${2:(NSString *)subpath} NS_AVAILABLE(10_6, 4_0)" "URLsForResourcesWithExtension:(NSString *)ext subdirectory:(NSString *)subpath NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLForResource:withExtension:subdirectory:localization:" "URLForResource:${1:(NSString *)name} withExtension:${2:(NSString *)ext} subdirectory:${3:(NSString *)subpath} localization:${4:(NSString *)localizationName} NS_AVAILABLE(10_6, 4_0)" "URLForResource:(NSString *)name withExtension:(NSString *)ext subdirectory:(NSString *)subpath localization:(NSString *)localizationName NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLForResource:withExtension:subdirectory:" "URLForResource:${1:(NSString *)name} withExtension:${2:(NSString *)ext} subdirectory:${3:(NSString *)subpath} NS_AVAILABLE(10_6, 4_0)" "URLForResource:(NSString *)name withExtension:(NSString *)ext subdirectory:(NSString *)subpath NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLForResource:withExtension:" "URLForResource:${1:(NSString *)name} withExtension:${2:(NSString *)ext} NS_AVAILABLE(10_6, 4_0)" "URLForResource:(NSString *)name withExtension:(NSString *)ext NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLsForResourcesWithExtension:subdirectory:inBundleWithURL:" "URLsForResourcesWithExtension:${1:(NSString *)ext} subdirectory:${2:(NSString *)subpath} inBundleWithURL:${3:(NSURL *)bundleURL} NS_AVAILABLE(10_6, 4_0)" "URLsForResourcesWithExtension:(NSString *)ext subdirectory:(NSString *)subpath inBundleWithURL:(NSURL *)bundleURL NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLForResource:withExtension:subdirectory:inBundleWithURL:" "URLForResource:${1:(NSString *)name} withExtension:${2:(NSString *)ext} subdirectory:${3:(NSString *)subpath} inBundleWithURL:${4:(NSURL *)bundleURL} NS_AVAILABLE(10_6, 4_0)" "URLForResource:(NSString *)name withExtension:(NSString *)ext subdirectory:(NSString *)subpath inBundleWithURL:(NSURL *)bundleURL NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("pathForAuxiliaryExecutable:" "pathForAuxiliaryExecutable:${1:(NSString *)executableName}" "pathForAuxiliaryExecutable:(NSString *)executableName" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("URLForAuxiliaryExecutable:" "URLForAuxiliaryExecutable:${1:(NSString *)executableName} NS_AVAILABLE(10_6, 4_0)" "URLForAuxiliaryExecutable:(NSString *)executableName NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("loadAndReturnError:" "loadAndReturnError:${1:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "loadAndReturnError:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("preflightAndReturnError:" "preflightAndReturnError:${1:(NSError **)error} NS_AVAILABLE(10_5, 2_0)" "preflightAndReturnError:(NSError **)error NS_AVAILABLE(10_5, 2_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("unload" "unload" "unload" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("load" "load" "load" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("allFrameworks" "allFrameworks" "allFrameworks" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("allBundles" "allBundles" "allBundles" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("bundleWithIdentifier:" "bundleWithIdentifier:${1:(NSString *)identifier}" "bundleWithIdentifier:(NSString *)identifier" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("bundleForClass:" "bundleForClass:${1:(Class)aClass}" "bundleForClass:(Class)aClass" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithURL:" "initWithURL:${1:(NSURL *)url} NS_AVAILABLE(10_6, 4_0)" "initWithURL:(NSURL *)url NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("bundleWithURL:" "bundleWithURL:${1:(NSURL *)url} NS_AVAILABLE(10_6, 4_0)" "bundleWithURL:(NSURL *)url NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithPath:" "initWithPath:${1:(NSString *)path} NS_DESIGNATED_INITIALIZER" "initWithPath:(NSString *)path NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("bundleWithPath:" "bundleWithPath:${1:(NSString *)path}" "bundleWithPath:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("mainBundle" "mainBundle" "mainBundle" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("drain" "drain" "drain" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObject:" "addObject:${1:(id)anObject}" "addObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObject:" "addObject:${1:(id)anObject}" "addObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("endEditing" "endEditing" "endEditing" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("beginEditing" "beginEditing" "beginEditing" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setAttributedString:" "setAttributedString:${1:(NSAttributedString *)attrString}" "setAttributedString:(NSAttributedString *)attrString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("deleteCharactersInRange:" "deleteCharactersInRange:${1:(NSRange)range}" "deleteCharactersInRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("appendAttributedString:" "appendAttributedString:${1:(NSAttributedString *)attrString}" "appendAttributedString:(NSAttributedString *)attrString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("insertAttributedString:atIndex:" "insertAttributedString:${1:(NSAttributedString *)attrString} atIndex:${2:(NSUInteger)loc}" "insertAttributedString:(NSAttributedString *)attrString atIndex:(NSUInteger)loc" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceCharactersInRange:withAttributedString:" "replaceCharactersInRange:${1:(NSRange)range} withAttributedString:${2:(NSAttributedString *)attrString}" "replaceCharactersInRange:(NSRange)range withAttributedString:(NSAttributedString *)attrString" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAttribute:range:" "removeAttribute:${1:(NSString *)name} range:${2:(NSRange)range}" "removeAttribute:(NSString *)name range:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addAttributes:range:" "addAttributes:${1:(NSDictionary *)attrs} range:${2:(NSRange)range}" "addAttributes:(NSDictionary *)attrs range:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addAttribute:value:range:" "addAttribute:${1:(NSString *)name} value:${2:(id)value} range:${3:(NSRange)range}" "addAttribute:(NSString *)name value:(id)value range:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setAttributes:range:" "setAttributes:${1:(NSDictionary *)attrs} range:${2:(NSRange)range}" "setAttributes:(NSDictionary *)attrs range:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceCharactersInRange:withString:" "replaceCharactersInRange:${1:(NSRange)range} withString:${2:(NSString *)str}" "replaceCharactersInRange:(NSRange)range withString:(NSString *)str" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateAttribute:inRange:options:usingBlock:" "enumerateAttribute:${1:(NSString *)attrName} inRange:${2:(NSRange)enumerationRange} options:${3:(NSAttributedStringEnumerationOptions)opts} usingBlock:${4:(void (^)(id value, NSRange range, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateAttribute:(NSString *)attrName inRange:(NSRange)enumerationRange options:(NSAttributedStringEnumerationOptions)opts usingBlock:(void (^)(id value, NSRange range, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateAttributesInRange:options:usingBlock:" "enumerateAttributesInRange:${1:(NSRange)enumerationRange} options:${2:(NSAttributedStringEnumerationOptions)opts} usingBlock:${3:(void (^)(NSDictionary *attrs, NSRange range, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateAttributesInRange:(NSRange)enumerationRange options:(NSAttributedStringEnumerationOptions)opts usingBlock:(void (^)(NSDictionary *attrs, NSRange range, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithAttributedString:" "initWithAttributedString:${1:(NSAttributedString *)attrStr}" "initWithAttributedString:(NSAttributedString *)attrStr" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithString:attributes:" "initWithString:${1:(NSString *)str} attributes:${2:(NSDictionary *)attrs}" "initWithString:(NSString *)str attributes:(NSDictionary *)attrs" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithString:" "initWithString:${1:(NSString *)str}" "initWithString:(NSString *)str" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToAttributedString:" "isEqualToAttributedString:${1:(NSAttributedString *)other}" "isEqualToAttributedString:(NSAttributedString *)other" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("attribute:atIndex:longestEffectiveRange:inRange:" "attribute:${1:(NSString *)attrName} atIndex:${2:(NSUInteger)location} longestEffectiveRange:${3:(NSRangePointer)range} inRange:${4:(NSRange)rangeLimit}" "attribute:(NSString *)attrName atIndex:(NSUInteger)location longestEffectiveRange:(NSRangePointer)range inRange:(NSRange)rangeLimit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("attributesAtIndex:longestEffectiveRange:inRange:" "attributesAtIndex:${1:(NSUInteger)location} longestEffectiveRange:${2:(NSRangePointer)range} inRange:${3:(NSRange)rangeLimit}" "attributesAtIndex:(NSUInteger)location longestEffectiveRange:(NSRangePointer)range inRange:(NSRange)rangeLimit" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("attributedSubstringFromRange:" "attributedSubstringFromRange:${1:(NSRange)range}" "attributedSubstringFromRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("attribute:atIndex:effectiveRange:" "attribute:${1:(NSString *)attrName} atIndex:${2:(NSUInteger)location} effectiveRange:${3:(NSRangePointer)range}" "attribute:(NSString *)attrName atIndex:(NSUInteger)location effectiveRange:(NSRangePointer)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("attributesAtIndex:effectiveRange:" "attributesAtIndex:${1:(NSUInteger)location} effectiveRange:${2:(NSRangePointer)range}" "attributesAtIndex:(NSUInteger)location effectiveRange:(NSRangePointer)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfURL:" "initWithContentsOfURL:${1:(NSURL *)url}" "initWithContentsOfURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfFile:" "initWithContentsOfFile:${1:(NSString *)path}" "initWithContentsOfFile:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayWithContentsOfURL:" "arrayWithContentsOfURL:${1:(NSURL *)url}" "arrayWithContentsOfURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayWithContentsOfFile:" "arrayWithContentsOfFile:${1:(NSString *)path}" "arrayWithContentsOfFile:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayWithCapacity:" "arrayWithCapacity:${1:(NSUInteger)numItems}" "arrayWithCapacity:(NSUInteger)numItems" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortWithOptions:usingComparator:" "sortWithOptions:${1:(NSSortOptions)opts} usingComparator:${2:(NSComparator)cmptr} NS_AVAILABLE(10_6, 4_0)" "sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortUsingComparator:" "sortUsingComparator:${1:(NSComparator)cmptr} NS_AVAILABLE(10_6, 4_0)" "sortUsingComparator:(NSComparator)cmptr NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setObject:atIndexedSubscript:" "setObject:${1:(id)obj} atIndexedSubscript:${2:(NSUInteger)idx} NS_AVAILABLE(10_8, 6_0)" "setObject:(id)obj atIndexedSubscript:(NSUInteger)idx NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceObjectsAtIndexes:withObjects:" "replaceObjectsAtIndexes:${1:(NSIndexSet *)indexes} withObjects:${2:(NSArray *)objects}" "replaceObjectsAtIndexes:(NSIndexSet *)indexes withObjects:(NSArray *)objects" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectsAtIndexes:" "removeObjectsAtIndexes:${1:(NSIndexSet *)indexes}" "removeObjectsAtIndexes:(NSIndexSet *)indexes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("insertObjects:atIndexes:" "insertObjects:${1:(NSArray *)objects} atIndexes:${2:(NSIndexSet *)indexes}" "insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortUsingSelector:" "sortUsingSelector:${1:(SEL)comparator}" "sortUsingSelector:(SEL)comparator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortUsingFunction:context:" "sortUsingFunction:${1:(NSInteger (*)(id, id, void *))compare} context:${2:(void *)context}" "sortUsingFunction:(NSInteger (*)(id, id, void *))compare context:(void *)context" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("setArray:" "setArray:${1:(NSArray *)otherArray}" "setArray:(NSArray *)otherArray" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceObjectsInRange:withObjectsFromArray:" "replaceObjectsInRange:${1:(NSRange)range} withObjectsFromArray:${2:(NSArray *)otherArray}" "replaceObjectsInRange:(NSRange)range withObjectsFromArray:(NSArray *)otherArray" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceObjectsInRange:withObjectsFromArray:range:" "replaceObjectsInRange:${1:(NSRange)range} withObjectsFromArray:${2:(NSArray *)otherArray} range:${3:(NSRange)otherRange}" "replaceObjectsInRange:(NSRange)range withObjectsFromArray:(NSArray *)otherArray range:(NSRange)otherRange" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectsInRange:" "removeObjectsInRange:${1:(NSRange)range}" "removeObjectsInRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectsInArray:" "removeObjectsInArray:${1:(NSArray *)otherArray}" "removeObjectsInArray:(NSArray *)otherArray" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectsFromIndices:numIndices:" "removeObjectsFromIndices:${1:(NSUInteger *)indices} numIndices:${2:(NSUInteger)cnt} NS_DEPRECATED(10_0, 10_6, 2_0, 4_0)" "removeObjectsFromIndices:(NSUInteger *)indices numIndices:(NSUInteger)cnt NS_DEPRECATED(10_0, 10_6, 2_0, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectIdenticalTo:" "removeObjectIdenticalTo:${1:(id)anObject}" "removeObjectIdenticalTo:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectIdenticalTo:inRange:" "removeObjectIdenticalTo:${1:(id)anObject} inRange:${2:(NSRange)range}" "removeObjectIdenticalTo:(id)anObject inRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObject:" "removeObject:${1:(id)anObject}" "removeObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObject:inRange:" "removeObject:${1:(id)anObject} inRange:${2:(NSRange)range}" "removeObject:(id)anObject inRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeAllObjects" "removeAllObjects" "removeAllObjects" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("exchangeObjectAtIndex:withObjectAtIndex:" "exchangeObjectAtIndex:${1:(NSUInteger)idx1} withObjectAtIndex:${2:(NSUInteger)idx2}" "exchangeObjectAtIndex:(NSUInteger)idx1 withObjectAtIndex:(NSUInteger)idx2" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObjectsFromArray:" "addObjectsFromArray:${1:(NSArray *)otherArray}" "addObjectsFromArray:(NSArray *)otherArray" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCapacity:" "initWithCapacity:${1:(NSUInteger)numItems} NS_DESIGNATED_INITIALIZER" "initWithCapacity:(NSUInteger)numItems NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("replaceObjectAtIndex:withObject:" "replaceObjectAtIndex:${1:(NSUInteger)index} withObject:${2:(id)anObject}" "replaceObjectAtIndex:(NSUInteger)index withObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeObjectAtIndex:" "removeObjectAtIndex:${1:(NSUInteger)index}" "removeObjectAtIndex:(NSUInteger)index" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("removeLastObject" "removeLastObject" "removeLastObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("insertObject:atIndex:" "insertObject:${1:(id)anObject} atIndex:${2:(NSUInteger)index}" "insertObject:(id)anObject atIndex:(NSUInteger)index" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("addObject:" "addObject:${1:(id)anObject}" "addObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getObjects:" "getObjects:${1:(id __unsafe_unretained [])objects}" "getObjects:(id __unsafe_unretained [])objects" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfURL:" "initWithContentsOfURL:${1:(NSURL *)url}" "initWithContentsOfURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithContentsOfFile:" "initWithContentsOfFile:${1:(NSString *)path}" "initWithContentsOfFile:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayWithContentsOfURL:" "arrayWithContentsOfURL:${1:(NSURL *)url}" "arrayWithContentsOfURL:(NSURL *)url" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayWithContentsOfFile:" "arrayWithContentsOfFile:${1:(NSString *)path}" "arrayWithContentsOfFile:(NSString *)path" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithArray:copyItems:" "initWithArray:${1:(NSArray *)array} copyItems:${2:(BOOL)flag}" "initWithArray:(NSArray *)array copyItems:(BOOL)flag" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithArray:" "initWithArray:${1:(NSArray *)array}" "initWithArray:(NSArray *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithObjects:" "initWithObjects:${1:(id)firstObj}, ... NS_REQUIRES_NIL_TERMINATION" "initWithObjects:(id)firstObj, ... NS_REQUIRES_NIL_TERMINATION" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayWithArray:" "arrayWithArray:${1:(NSArray *)array}" "arrayWithArray:(NSArray *)array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayWithObjects:" "arrayWithObjects:${1:(id)firstObj}, ... NS_REQUIRES_NIL_TERMINATION" "arrayWithObjects:(id)firstObj, ... NS_REQUIRES_NIL_TERMINATION" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayWithObjects:count:" "arrayWithObjects:${1:(const id [])objects} count:${2:(NSUInteger)cnt}" "arrayWithObjects:(const id [])objects count:(NSUInteger)cnt" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayWithObject:" "arrayWithObject:${1:(id)anObject}" "arrayWithObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("array" "array" "array" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObject:inSortedRange:options:usingComparator:" "indexOfObject:${1:(id)obj} inSortedRange:${2:(NSRange)r} options:${3:(NSBinarySearchingOptions)opts} usingComparator:${4:(NSComparator)cmp} NS_AVAILABLE(10_6, 4_0)" "indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortedArrayWithOptions:usingComparator:" "sortedArrayWithOptions:${1:(NSSortOptions)opts} usingComparator:${2:(NSComparator)cmptr} NS_AVAILABLE(10_6, 4_0)" "sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortedArrayUsingComparator:" "sortedArrayUsingComparator:${1:(NSComparator)cmptr} NS_AVAILABLE(10_6, 4_0)" "sortedArrayUsingComparator:(NSComparator)cmptr NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexesOfObjectsAtIndexes:options:passingTest:" "indexesOfObjectsAtIndexes:${1:(NSIndexSet *)s} options:${2:(NSEnumerationOptions)opts} passingTest:${3:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "indexesOfObjectsAtIndexes:(NSIndexSet *)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexesOfObjectsWithOptions:passingTest:" "indexesOfObjectsWithOptions:${1:(NSEnumerationOptions)opts} passingTest:${2:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexesOfObjectsPassingTest:" "indexesOfObjectsPassingTest:${1:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "indexesOfObjectsPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObjectAtIndexes:options:passingTest:" "indexOfObjectAtIndexes:${1:(NSIndexSet *)s} options:${2:(NSEnumerationOptions)opts} passingTest:${3:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "indexOfObjectAtIndexes:(NSIndexSet *)s options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObjectWithOptions:passingTest:" "indexOfObjectWithOptions:${1:(NSEnumerationOptions)opts} passingTest:${2:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObjectPassingTest:" "indexOfObjectPassingTest:${1:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate} NS_AVAILABLE(10_6, 4_0)" "indexOfObjectPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateObjectsAtIndexes:options:usingBlock:" "enumerateObjectsAtIndexes:${1:(NSIndexSet *)s} options:${2:(NSEnumerationOptions)opts} usingBlock:${3:(void (^)(id obj, NSUInteger idx, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateObjectsAtIndexes:(NSIndexSet *)s options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateObjectsWithOptions:usingBlock:" "enumerateObjectsWithOptions:${1:(NSEnumerationOptions)opts} usingBlock:${2:(void (^)(id obj, NSUInteger idx, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("enumerateObjectsUsingBlock:" "enumerateObjectsUsingBlock:${1:(void (^)(id obj, NSUInteger idx, BOOL *stop))block} NS_AVAILABLE(10_6, 4_0)" "enumerateObjectsUsingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block NS_AVAILABLE(10_6, 4_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectAtIndexedSubscript:" "objectAtIndexedSubscript:${1:(NSUInteger)idx} NS_AVAILABLE(10_8, 6_0)" "objectAtIndexedSubscript:(NSUInteger)idx NS_AVAILABLE(10_8, 6_0)" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectsAtIndexes:" "objectsAtIndexes:${1:(NSIndexSet *)indexes}" "objectsAtIndexes:(NSIndexSet *)indexes" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("makeObjectsPerformSelector:withObject:" "makeObjectsPerformSelector:${1:(SEL)aSelector} withObject:${2:(id)argument}" "makeObjectsPerformSelector:(SEL)aSelector withObject:(id)argument" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("makeObjectsPerformSelector:" "makeObjectsPerformSelector:${1:(SEL)aSelector}" "makeObjectsPerformSelector:(SEL)aSelector" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToURL:atomically:" "writeToURL:${1:(NSURL *)url} atomically:${2:(BOOL)atomically}" "writeToURL:(NSURL *)url atomically:(BOOL)atomically" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("writeToFile:atomically:" "writeToFile:${1:(NSString *)path} atomically:${2:(BOOL)useAuxiliaryFile}" "writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("subarrayWithRange:" "subarrayWithRange:${1:(NSRange)range}" "subarrayWithRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortedArrayUsingSelector:" "sortedArrayUsingSelector:${1:(SEL)comparator}" "sortedArrayUsingSelector:(SEL)comparator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortedArrayUsingFunction:context:hint:" "sortedArrayUsingFunction:${1:(NSInteger (*)(id, id, void *))comparator} context:${2:(void *)context} hint:${3:(NSData *)hint}" "sortedArrayUsingFunction:(NSInteger (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("sortedArrayUsingFunction:context:" "sortedArrayUsingFunction:${1:(NSInteger (*)(id, id, void *))comparator} context:${2:(void *)context}" "sortedArrayUsingFunction:(NSInteger (*)(id, id, void *))comparator context:(void *)context" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("reverseObjectEnumerator" "reverseObjectEnumerator" "reverseObjectEnumerator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectEnumerator" "objectEnumerator" "objectEnumerator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("isEqualToArray:" "isEqualToArray:${1:(NSArray *)otherArray}" "isEqualToArray:(NSArray *)otherArray" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObjectIdenticalTo:inRange:" "indexOfObjectIdenticalTo:${1:(id)anObject} inRange:${2:(NSRange)range}" "indexOfObjectIdenticalTo:(id)anObject inRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObjectIdenticalTo:" "indexOfObjectIdenticalTo:${1:(id)anObject}" "indexOfObjectIdenticalTo:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObject:inRange:" "indexOfObject:${1:(id)anObject} inRange:${2:(NSRange)range}" "indexOfObject:(id)anObject inRange:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("indexOfObject:" "indexOfObject:${1:(id)anObject}" "indexOfObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("getObjects:range:" "getObjects:${1:(id __unsafe_unretained [])objects} range:${2:(NSRange)range}" "getObjects:(id __unsafe_unretained [])objects range:(NSRange)range" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("firstObjectCommonWithArray:" "firstObjectCommonWithArray:${1:(NSArray *)otherArray}" "firstObjectCommonWithArray:(NSArray *)otherArray" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("descriptionWithLocale:indent:" "descriptionWithLocale:${1:(id)locale} indent:${2:(NSUInteger)level}" "descriptionWithLocale:(id)locale indent:(NSUInteger)level" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("descriptionWithLocale:" "descriptionWithLocale:${1:(id)locale}" "descriptionWithLocale:(id)locale" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("containsObject:" "containsObject:${1:(id)anObject}" "containsObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("componentsJoinedByString:" "componentsJoinedByString:${1:(NSString *)separator}" "componentsJoinedByString:(NSString *)separator" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayByAddingObjectsFromArray:" "arrayByAddingObjectsFromArray:${1:(NSArray *)otherArray}" "arrayByAddingObjectsFromArray:(NSArray *)otherArray" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("arrayByAddingObject:" "arrayByAddingObject:${1:(id)anObject}" "arrayByAddingObject:(id)anObject" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithCoder:" "initWithCoder:${1:(NSCoder *)aDecoder} NS_DESIGNATED_INITIALIZER" "initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("initWithObjects:count:" "initWithObjects:${1:(const id [])objects} count:${2:(NSUInteger)cnt} NS_DESIGNATED_INITIALIZER" "initWithObjects:(const id [])objects count:(NSUInteger)cnt NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" "init NS_DESIGNATED_INITIALIZER" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("objectAtIndex:" "objectAtIndex:${1:(NSUInteger)index}" "objectAtIndex:(NSUInteger)index" nil nil ((yas/indent-line (quote fixed)) (yas/wrap-around-region (quote nil))) nil nil nil) ("prop" "- (${1:id})${2:foo}
{
    return $2;
}

- (void)set${2:$(capitalize text)}:($1)aValue
{
    [$2 autorelease];
    $2 = [aValue retain];
}
$0" "foo { ... } ; setFoo { ... }" nil nil nil nil nil nil))))